{"content":[{"type":"paragraph","crDate":1754393287531,"chDate":1754393842322,"text":"Access Modifiers erlauben es, den Zugriff auf Attribute einzuschränken.\nEs gibt vier verschiedene Access Modifiers:\n<ul>\n<li><b>public</b>: Standardzugriff; ermöglicht uneingeschränkten Zugriff auf Klassenelemente von überall, innerhalb und außerhalb der Klasse. Mit anderen Worten: Das Attribut verhält sich wie immer.</li>\n<li><b>private</b>: Beschränkt den Zugriff ausschließlich auf die definierende Klasse; weder von außen noch von abgeleiteten Klassen zugreifbar.</li>\n<li><b>protected</b>: Erlaubt Zugriff innerhalb der definierenden Klasse und allen abgeleiteten Klassen (Unterklassen), aber nicht von außerhalb der Klassenhierarchie.</li>\n<li><b>readonly</b>: Macht Eigenschaften nur lesbar; Werte können nur bei der Deklaration oder im Konstruktor zugewiesen werden, danach nicht mehr veränderbar.</li>\n</ul>\nDabei ist - wie immer in TS - zu beachten, dass dieses Schlüsselwort im kompilierten Code <i>keine Auswirkung</i> hat."},{"type":"code","crDate":1754394443727,"chDate":1754395025833,"text":"class Person {\n public nName: string;\n public vName: string;\n private id: string;\n readonly geburtsdatum: Date;\n protected adresse: string;\n\n constructor(\n  nName: string,\n  vName: string, \n  geburtsdatum: Date = new Date(),\n  adresse: string = 'Unbekannt'\n ) {\n  this.nName = nName;\n  this.vName = vName;\n  this.id = (Math.random()*1e17).toString(36);\n  this.geburtsdatum = geburtsdatum; // readonly kann nur im Konstruktor gesetzt werden\n  this.adresse = adresse;\n }\n\n get getID(): string {\n  return this.id;\n }\n}\n\nlet myObj = new Person('Mustermann', 'Max');\nconsole.log(myObj);"},{"type":"subheader","crDate":1754394121244,"chDate":1754394149695,"text":"Alternativen"},{"type":"paragraph","crDate":1754389699850,"chDate":1754394417957,"text":"Insbesondere für <i>private</i> erscheint die TS-Lösung nicht ausreichend, da die Attribute im laufenden Code nicht geschützt sind..\nDie bessere Alternative ist die Verwendung von Javascript-Privates, wie sie seit ~2021 flächendeckend unterstützt werden."},{"type":"code","crDate":1754389849725,"chDate":1754389925811,"text":"class Person {\n nName: string;\n vName: string;\n #id: string;\n\n constructor(nName: string, vName: string) {\n  this.nName = nName;\n  this.vName = vName;\n  this.#id = (Math.random()*1e17).toString(36);\n }\n\n get getID(): string {\n  return this.#id;\n }\n}\n\nlet myObj = new Person('Mustermann', 'Max');\n\nconsole.log(myObj);\nconsole.log(`ID: ${myObj.id}`); // -> Erzeugt einen Laufzeitfehler\nconsole.log(`ID: ${myObj.getID}`);"}]}