{"content":[{"type":"subheader","crDate":1686149555993,"chDate":1686149941121,"text":"value.map()"},{"type":"paragraph","crDate":1686149566792,"chDate":1686149728550,"text":"Diese nicht-destruktive Higher-Class-Methode erzeugt ein neues Array. In dieses neue Array werden jeweils die Rückgabewerte der Callback-Funktion eingehängt.\nDie Callback-Funktion wird für jeden Slot des Arrays einmal aufgerufen und kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686149824703,"chDate":1686149832758,"text":"const myArray = [21, 54, 87, 32];\nconst newArray = myArray.map(value => value * 2);\nconsole.log(myArray);\nconsole.log(newArray);"},{"type":"code","crDate":1686149877331,"chDate":1686149896904,"text":"let myArray = [21, 54, 87, 32];\nmyArray = myArray.map(value => String(value));\nconsole.log(myArray);  // -> [ '21', '54', '87', '32' ]"},{"type":"subheader","crDate":1686149968123,"chDate":1686149973787,"text":"value.reduce()"},{"type":"paragraph","crDate":1686149977866,"chDate":1686150050051,"text":"Die reduce()-Methode erlaubt es, aus einem Array einen einzelnen Wert zu erzeugen. Dies kann z.B. die Summe aller Werte sein, "}]}