{"content":[{"type":"paragraph","crDate":1744716483206,"chDate":1744716736728,"text":"In einer Serverumgebung kommt es häufig vor, dass auf einen Datensatz immer wieder zugegriffen werden muss.\nJedes Mal auf die Datenbank zugreifen zu müssen, ist sehr viel zusätzlicher Aufwand und sehr viel zusätzlicher Netzwerkverkehr.\nBesser ist es, wenn die Daten in einer Variablen gespeichert werden, um jederzeit darauf zugreifen zu können."},{"type":"paragraph","crDate":1744716742596,"chDate":1744717068743,"text":"Im Agent-Pattern wird in ein globales Objekt bereitgestellt.\nWenn ein Datensatz aus der Datenbank gelesen wird, wird dieser in das globale Objekt abgelegt. \nInteragiert wird dann ausschließlich mit dieser Instanz. Jede Änderung wird auf die Instanz angewendet, jeder Lesevorgang erfolgt von der Instanz.\nWenn seit einer Weile nicht mehr auf die Instanz zugegriffen wurde, dann kann die Instanz aus dem globalen Objekt entfernt werden, um Speicher zu sparen. \nNatürlich muss die Instanz auch regelmäßig gespeichert werden oder spätestens dann, wenn sie entfernt wird."},{"type":"code","crDate":1744723132765,"chDate":1744723134765,"text":"\nclass AgentDummy {\n    constructor({\n\n    } = {}) {\n\n    }\n\n    static loadPost({\n        dummyID = ''\n    } = {}) {\n        return database.getDummy(dummyID).then(\n            dummy => {\n                settings.agentsDummy[dummyID] = new AgentDummy(dummy);\n                return settings.agentsDummy[dummyID];\n            }\n        )\n    }\n\n    static getAgent({\n        dummyID = null,\n    } = {}) {\n        if (settings.agentsDummy[dummyID]) {\n            return settings.agentsDummy[dummyID]\n        } else {\n            return AgentDummy.loadAgent(dummyID)\n        }\n    }\n\n}\n\nexport default AgentDummy"}]}