{"content":[{"type":"paragraph","crDate":1716464132693,"chDate":1716464242114,"text":"Beim <i>Decorator</i>-Pattern geht es darum, einem Objekt durch einen <i>Wrapper</i> (also ein umschließendes Objekt) zusätzliche Informationen und Fähigkeiten zu geben. Das kann durch zusätzliche Klassen erreicht werden, welche das ursprüngliche Objekt übergeben bekommen. Diese Klassen geben dann ein neues Objekt zurück, das die zusätzlichen Informationen und Methoden enthält."},{"type":"code","crDate":1716464252950,"chDate":1716464494664,"text":"// index.js\n\nimport decorators from './decorators.js'\n\n// Basis Klasse\nclass Coffee {\n get cost() {\n  return 1.0;\n }\n get description() {\n  return \"Coffee\";\n }\n}\n\n// Objekte erzeugen\nlet firstCoffee = new Coffee();\nlet secondCoffee = new Coffee();\n\n// Objekte durch die Decorators erweitern\nfirstCoffee = new decorators.addMilk(firstCoffee);\nsecondCoffee = new decorators.addSugar(secondCoffee);\nsecondCoffee = new decorators.addMilk(secondCoffee);\n\n// Ausgabe\nconsole.log(firstCoffee.description); // Output: Coffee, Milk\nconsole.log(firstCoffee.cost); // Output: 1.5\n\nconsole.log(secondCoffee.description); // Output: Coffee, Sugar, Milk\nconsole.log(secondCoffee.cost); // Output: 1.7\n"},{"type":"code","crDate":1716464368378,"chDate":1716464419922,"text":"// decorators.js\n\nclass MilkDecorator {\n constructor(coffee) {\n  this.coffee = coffee;\n }\n get cost() { return this.coffee.cost + 0.5; }\n get description() { return this.coffee.description + \", Milk\"; }\n}\n\nclass SugarDecorator {\n constructor(coffee) {\n  this.coffee = coffee;\n }\n get cost() { return this.coffee.cost + 0.2; }\n get description() { return this.coffee.description + \", Sugar\"; }\n}\n\nconst decorators = {\n addMilk: MilkDecorator,\n addSugar: SugarDecorator\n}\n\nexport default decorators;"}]}