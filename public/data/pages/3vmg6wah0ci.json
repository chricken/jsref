{"content":[{"type":"paragraph","crDate":1716985485505,"chDate":1716986429648,"text":"Wenn aus einem Objekt ein nicht existierendes Attribut abgefragt wird, dann liefert das Objekt üblicherweise ein <i>undefined</i> zurück. Das ist nicht in allen Fällen gewünscht. \nManchmal soll ein klar definierter Wert zurückgegeben werden. Oder ein abgefragtes Attribut soll mit einem default angelegt werden. Oder das Programm soll abbrechen. Oder irgend etwas anderes.\nIn dem Fall kann ein <i>Proxy()</i> helfen. Dieser erlaubt es, auf das Lesen und Schreiben von Attributen dediziert zu reagieren."},{"type":"paragraph","crDate":1716986431632,"chDate":1716988195005,"text":"Im Beispiel wird eine <i>Klasse</i> gezeigt.\nBeim Anlegen eines Objektes wird die Klasse wie üblich aufgerufen. Allerdings wird aus dem erzeugten Objekt direkt eine Methode aufgerufen, welche ein <i>Proxy</i>-Objekt zurückgibt. Der Proxy ist mit dem erzeugten Objekt verknüpft..\nWenn nun aus dem Objekt (über seinen Proxy) ein Attribut <i>gelesen</i> wird, dann triggert dies die <i>get()</i>-Methode im Proxy. In dieser kann beliebiger Code stehen, im Beispiel wird ein existierendes Attribut inkrementiert und zurückgegeben. Ein nicht-existierendes Attribut wird automatisch mit 0 initialisiert und zurückgegeben.\nWenn ein Attribut <i>beschrieben</i> werden soll, dann wird es nur angelegt, wenn es nicht existiert. Ein existierendes Attribut wird nicht überschrieben. \nÜbrigens muss ein Handler im Proxy einen Wert zurückgegebn, der <i>nicht als false</i> interpretiert wird,"},{"type":"code","crDate":1716986803402,"chDate":1716988241168,"text":"class Counter {\n storage() {\n  return new Proxy(this, {\n   get(target, prop) {\n    if (target[prop] !== undefined) {\n     target[prop]++;\n    } else {\n     target[prop] = 0;\n    }\n    return target[prop];\n   },\n   set(target, prop, val) {\n    if (target[prop]) {\n     return true\n    } else {\n     target[prop] = val;\n     return true;\n    }\n   }\n  })\n }\n}\n\nlet myCounters = new Counter().storage();\n\nconsole.log(myCounters.a);  // -> 0\nconsole.log(myCounters.a);  // -> 1\nconsole.log(myCounters.a);  // -> 2\nconsole.log(myCounters.b);  // -> 0\nconsole.log(myCounters.b);  // -> 1\nconsole.log(myCounters.a);  // -> 3"}]}