{"content":[{"type":"paragraph","crDate":1754399153940,"chDate":1754399418132,"text":"Union Types erlauben es, mehrere Datentypen oder sogar mehrere spezifische Values zuzulassen.\nZugelassene Typen werden mit | voneinander getrennt."},{"type":"code","crDate":1754399385978,"chDate":1754399396194,"text":"const double = (x: number | string): number => {\n if (typeof x == 'string'){\n  return Number(x) * 2\n }\n return x * 2\n}\n\nconsole.log(double(13))"},{"type":"paragraph","crDate":1754399873037,"chDate":1754399937477,"text":"Unter Umständen kann es sinnvol sein, bestimmte Datentypen als Optionen zuzulassen. \nBspw. <i>null</i> kann manchmal Sinn machen. "},{"type":"code","crDate":1754399846890,"chDate":1754399851377,"text":"type Response = {\n data: string | null;  // Kann Daten enthalten oder null sein\n error?: string;       // Kann einen Fehler enthalten oder undefiniert sein\n};\n\nconst successResponse: Response = { data: \"Erfolg!\" };\nconst errorResponse: Response = { data: null, error: \"Etwas ist schiefgelaufen\" };"},{"type":"subheader","crDate":1754399613581,"chDate":1754399624307,"text":"Literal Union Types"},{"type":"paragraph","crDate":1754399429645,"chDate":1754399540479,"text":"Das Erlauben bestimmter Values ist eine wirklich hilfreiche Sache, da so Einschränkungen sehr leicht umgesetzt werden können.\nFunktionen, die nur mit bestimmten Werten arbeiten, können damit vor falschen Werten geschützt werden."},{"type":"code","crDate":1754399548834,"chDate":1754399760833,"text":"// Anlegen eines Type Alias\ntype Direction = \"north\" | \"south\" | \"east\" | \"west\";\n\nconst move = (direction: Direction): void => {\n console.log(`Moving ${direction}`);\n}\n\nmove(\"north\");\n// move(\"up\");  // -> Fehlermeldung"}]}