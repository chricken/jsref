{"content":[{"type":"paragraph","crDate":1686744845415,"chDate":1704891525927,"text":"Eine <i>Ternary</i> ist eine Alternative zu einer simplen <i>if-else-Anweisung</i>.\nEiner Ternary hat einige Vorteile:\n<ul>\n<li>Eine Ternary braucht kein eigenes Scope. Das verringert Speicherverbrauch und Komplexität.</li>\n<li>Sie sind einfacher zu schreiben und verbessern die Lesbarkeit des Codes.</li>\n</ul>"},{"type":"paragraph","crDate":1704891320887,"chDate":1704891477251,"text":"In einem Ternary steuert eine logische Aussage die Rückgabe, welche aus zwei Alternativen gewählt wird.\n(logische Aussage) ? (return bei true) : (return bei false)"},{"type":"code","crDate":1686747496838,"chDate":1704890499367,"text":"const isPrime = number => {\n if (number <= 1) return false;\n for (let i = 2; i <= Math.sqrt(number); i++) {\n  if (!(number % i)) return false;\n }\n return true;\n};\n\nlet num = Math.floor(Math.random() * 100);\n\nconsole.log(isPrime(num) ? `${num} prime` : `${num} not prime`);"},{"type":"paragraph","crDate":1720098647764,"chDate":1720098747002,"text":"Natürlich kann statt eines Wertes auch eine Funktion aufgerufen werden. Dadurch lässt sich der Aufruf der Funktion steuen."},{"type":"code","crDate":1720098644207,"chDate":1720098755881,"text":"const defaultFunction = () => {\n console.log('So etwas machen wir hier nicht!');\n}\n\nlet data = {\n x:12,\n y:13\n}\n\ndata.a??defaultFunction();\n"}]}