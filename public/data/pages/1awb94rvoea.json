{
    "content": [
        {
            "type": "paragraph",
            "crDate": 1692623831591,
            "chDate": 1692626054476,
            "text": "Der Mutation-Observer reagiert auf <i>Änderungen</i> an einem DOM-Element.\nWenn eine Änderung an dem Element vorgenommen wird, wird eine Callback-Funktion aufgerufen, die die Änderung behandelt.\nEs kann auf eine Änderung der Attribute, auf eine Änderung der Kinderliste oder auf eine Änderung der DOM-Struktur reagiert werden.\nDas Zuweisen eines Mutation-Observers erfolgt in fünf Schritten."
        },
        {
            "type": "subheader",
            "crDate": 1692626058620,
            "chDate": 1692626102689,
            "text": "Handler"
        },
        {
            "type": "paragraph",
            "crDate": 1692626077635,
            "chDate": 1692881129457,
            "text": "Zunächst brauchen wir eine Callback-Funktion, die vom Observer aufgerufen werden kann.\nDer Observer übergibt die Liste der Elementen, die sich verändert haben."
        },
        {
            "type": "code",
            "crDate": 1692626079147,
            "chDate": 1692626083437,
            "text": "const handleMutation = entries => {\n entries.forEach(entry => {\n  console.log(entry);\n })\n}"
        },
        {
            "type": "subheader",
            "crDate": 1692881164367,
            "chDate": 1692881170065,
            "text": "Anlegen des Observers"
        },
        {
            "type": "paragraph",
            "crDate": 1692881163174,
            "chDate": 1692881238676,
            "text": "Der Observer wird mit dem <i>MutationObserver</i>-Constructor angelegt.\nDieser bekommt die Callback-Funktion übergeben, die durch den Observer aufgerufen werden soll.\n"
        },
        {
            "type": "code",
            "crDate": 1692881834406,
            "chDate": 1692881842006,
            "text": "const myObserver = new MutationObserver(handleMutation);"
        },
        {
            "type": "subheader",
            "crDate": 1692685262807,
            "chDate": 1692685293916,
            "text": "Zuweisen des Observers"
        },
        {
            "type": "paragraph",
            "crDate": 1692881310716,
            "chDate": 1692882640684,
            "text": "Dem Mutation-Observer werden DOM-Elemente zugewiesen, auf deren Änderung der Observer dann reagiert.\n"
        },
        {
            "type": "paragraph",
            "crDate": 1692685260078,
            "chDate": 1692881812735,
            "text": "Der Mutation-Observer benötigt zwingend ein <i>Options</i>-Objekt, in welchem u.a. gesteuert wird, auf welche Änderungen reagiert werden soll.\nIn dem Options-Objekt muss mindestens eine der folgenden Attribute auf true gesetzt werden: \n<b>childList</b>\nBoolean. Der Observer reagiert auf Änderungen der Kind-Liste. Achtung: gilt nur für direkte Kinder.\n<b>attributes</b>\nBoolean. Der Observer reagiert auf Änderungen eines DOM-Attributes.\n<b>characterData</b>\nBoolean. Der Observer reagiert auf eine Veränderung des HTML-Inhaltes."
        },
        {
            "type": "paragraph",
            "crDate": 1692881802225,
            "chDate": 1692881809833,
            "text": "Das Options-Objekt kann optional die folgenden Attribute enthalten:\n<b>subtree</b>\nBoolean, funktioniert zusammen mit <i>childList</i>. Erweitert das Verhalten von childList auf den gesamten Unterbaum.\n<b>attributeFilter</b>\nArray, funktioniert zusammen mit <i>attributes</i>. Definiert, auf welche Attribute der Observer reagieren soll.\n<b>attributeOldValue</b>\nBoolean. Definiert, ob die alten Werte der veränderten Attribute zwischengespeichert werden sollen.\n<b>characterDataOldValue</b>\nBoolean. Definiert, ob der alte Textinhalt zwischengespeichert werden soll."
        },
        {
            "type": "code",
            "crDate": 1692882788802,
            "chDate": 1692882794241,
            "text": "const options = {\n childList: true,\n subtree: true\n}\n\nelements.forEach(el => myObserver.observe(el, options));"
        }
    ]
}