{"content":[{"type":"paragraph","crDate":1715866206548,"chDate":1715866581319,"text":"In Klassen kann es gelegentlich vorkommen, dass einzelne Methoden umbenannt werden müssen. In dem Fall müssten dann auch die Aufrufe der Methoden umbenannt werden. Das ist insbesondere bei aufwendigen Projekten zeitraubend und schnell ist ein Aufruf übersehen.\nIn dem Fall kann das commander-Pattern helfen. in ihm werden die Methoden nicht direkt aufgerufen. Statt dessen wird eine eigens dafür konzipierte Methode aufgerufen, die commander()-Methode. Diese bekommt übergeben, welche Methode aufgerufen werden soll, dazu Parameter. in der commander()-Methode wird dann in einer switch-case-Anweisung der Eintrag gesucht und die dazugehörige Methode aufgerufen.\nDies hat den Vorteil, dass für jede Methode verschiedene Aufrufe hinterlegt werden können und damit auch die alten Methodennamen weiterverwendet werden können.."},{"type":"code","crDate":1715866081226,"chDate":1715866195987,"text":"class OrderManager {\n constructor() {\n  this.orders = [];\n }\n addOrder(data) {\n  this.orders.push(data);\n  return this.orders.length;\n }\n removeOrder(id) {\n  this.orders.filter(order => order.id != id);\n  return this.orders.length;\n }\n listOrders() {\n  return this.orders.map(order => {\n   return {\n    id: order.id,\n    title: order.title\n   }\n  })\n }\n commander(task, data) {\n  switch (task) {\n   case 'addOrder':\n   case 'placeOrder':\n   case 'newOrder':\n    return this.addOrder(data)\n    break;\n\n   case 'removeOrder':\n   case 'deleteOrder':\n    return this.removeOrder(data)\n    break;\n\n   case 'listOrders':\n   case 'showOrders':\n   case 'allOrders':\n    return this.listOrders()\n    break;\n                        \n   default:\n    break;\n  }\n }\n}\n\nconst myOrderManager = new OrderManager();\n\nmyOrderManager.commander('addOrder', { id: 1, title: \"Currywurst\" });\nmyOrderManager.commander('placeOrder', { id: 1, title: \"Pommes\" });\n\nconsole.log(\n myOrderManager.commander('allOrders')\n);\n"}]}