{"content":[{"type":"paragraph","crDate":1694505688741,"chDate":1694522025096,"text":"Das Type-Attribut <i>file</i> wird verwendet, um ein Eingabefeld für den Dateiupload zu erstellen. Wenn ein Benutzer auf dieses Eingabefeld klickt, wird ein <i>Dateiauswahldialog</i> angezeigt, der es ihm ermöglicht, eine oder mehrere Dateien vom lokalen Dateisystem auszuwählen.\nFile-Input-Felder werden normalerweise in einem Formular verwendet. Wenn der Benutzer eine Datei auswählt und das Formular absendet, wird die ausgewählte Datei als Teil des Formulars an den Server gesendet.\nDer genaue Mechanismus zur Verarbeitung von Dateiuploads hängt von der verwendeten Servertechnologie ab. <a href=\"/?id=ogmmz51w7ow\">Mehr dazu hier.</a>\n"},{"type":"paragraph","crDate":1694522026831,"chDate":1694522037462,"text":"Es sollte beachtet werden, dass das file-Element aus Sicherheitsgründen bestimmte Einschränkungen hat. Der Benutzer kann nur auf Dateien auf seinem eigenen Gerät zugreifen und nicht auf Dateien auf dem Server oder in anderen Verzeichnissen. Darüber hinaus kann der Server bestimmte Dateitypen oder Dateigrößenbeschränkungen festlegen, um die Sicherheit und Leistung zu gewährleisten."},{"type":"code","crDate":1694506656265,"chDate":1723211956599,"text":"// HTML\n&lt;input type=\"file\" name=\"fileToUpload\" />"},{"type":"paragraph","crDate":1723211940938,"chDate":1723211968120,"text":"<input type=\"file\" name=\"fileToUpload\" />"},{"type":"code","crDate":1694508248598,"chDate":1694510665162,"text":"// JS\n// FUNKTIONEN\nconst handleSubmit = evt => {\n evt.preventDefault();\n\n const form = new FormData(evt.target);\n fetch('/upload', {\n  method: 'post',\n  body: form\n }).then(\n  res => res.json()\n ).then(\n  console.log\n ).catch(\n  console.warn\n )\n}\n\nconst init = () => {\n document.querySelector('form')\n  .addEventListener('submit', handleSubmit);\n }\n\n// INIT\ndocument.addEventListener('DOMContentLoaded', init);\n"},{"type":"subheader","crDate":1694506220784,"chDate":1694506228182,"text":"Mehrere Dateien"},{"type":"paragraph","crDate":1694506230799,"chDate":1694510637835,"text":"Normalerweise kann der Benutzer eine einzelne Datei auszuwählen. Mit dem Attribut <i>multiple</i> kann der Benutzer mehrere Dateien gleichzeitig auswählen. Die reine Anwesenheit des multiple-Attributes genügt, kein Wert notwendig."},{"type":"code","crDate":1694510572672,"chDate":1694511954882,"text":"&lt;form>\n &lt;input type=\"file\" name=\"fileToUpload\" multiple />\n &lt;input type=\"submit\" value=\"Hochladen\" />\n&lt;/form>"},{"type":"subheader","crDate":1694511699200,"chDate":1694511711084,"text":"Auswahl anzeigen"},{"type":"paragraph","crDate":1694511714807,"chDate":1694520521155,"text":"Wenn über das Auswahlfeld eine oder mehrere Dateien ausgewählt werden, dann wird die <i>Auswahl</i> im Input-Element angezeigt. Diese Anzeige ist aber nicht immer hilfreich oder ausreichend. Daher kann es manchmal hilfreich sein, selbst die Anzeige zu erstellen.\nDazu wird zunächst die Auswahl an Dateien benötigt. Diese befindet sich im <i>files</i>-Attribut des input-Elementes.\nDas Files-Attribut enthält ein <i>Filelist-Objekt</i>, das in ein Array umgewandelt und dann iteriert werden kann.\nDie Objekte im Filelist-Objekt enthalten u.a. den Dateinamen und die Dateigröße, die in ein neues DOM-Element eingebunden werden können.\nMit dem Code unten wird für jede Datei der Name und die Dateigröße angezeigt."},{"type":"code","crDate":1694519987535,"chDate":1694520022784,"text":"// HTML\n&lt;form>\n &lt;input type=\"file\" name=\"fileToUpload\" multiple />\n &lt;div id=\"preview\">&lt;/div>\n &lt;input type=\"submit\" value=\"Hochladen\" />\n&lt;/form>"},{"type":"code","crDate":1694520013327,"chDate":1694520215209,"text":"// JS\nconst handleChange = evt => {\n const parent = document.querySelector('#preview');\n parent.innerHTML = '';\n\n [...evt.target.files].forEach(file => {\n  let newEl = document.createElement('p');\n  newEl.innerHTML = `${file.name} (${~~(file.size / 1024)} KB)`\n  parent.append(newEl);\n })\n}\n\nconst init = () => {\n document.querySelector('[name=\"fileToUpload\"]')\n  .addEventListener('change', handleChange);\n}\n\n// INIT\ndocument.addEventListener('DOMContentLoaded', init);"},{"type":"subheader","crDate":1694520525216,"chDate":1694520529635,"text":"Bilder anzeigen"},{"type":"paragraph","crDate":1694520533691,"chDate":1694521975782,"text":"Mit dem obigen Code können leider keine Bilder direkt eingebunden werden. Dafür muss etwas mehr Aufwand betrieben werden.\nDer <i>Filereader</i>-Constructor ist in der Lage, die temporären Dateiverknüpfungen aus dem Formular zu laden und zu verarbeiten.\nDer load-Event des Filereaders wird gefeuert, sobald die Datei geladen ist und enthält als <i>result</i> die <i>dataURL</i> des Bildes. Diese kann dem <i>src</i>-Attribut eines belibigen Bildes zugewiesen werden. "},{"type":"code","crDate":1694521435906,"chDate":1694521526955,"text":"const handleChange = evt => {\n const parent = document.querySelector('#preview');\n parent.innerHTML = '';\n\n [...evt.target.files].forEach(file => {\n  const reader = new FileReader();\n  reader.addEventListener('load', evt => {\n   const newImg = document.createElement('img');\n   parent.append(newImg);\n   newImg.src = evt.target.result;\n  });\n  reader.readAsDataURL(file); // Lesen der Datei als Daten-URL\n })\n}\n\nconst init = () => {\n document.querySelector('[name=\"fileToUpload\"]')\n  .addEventListener('change', handleChange);\n}\n\n// INIT\ndocument.addEventListener('DOMContentLoaded', init);"}]}