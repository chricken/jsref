{"content":[{"type":"paragraph","crDate":1715081192207,"chDate":1715081262386,"text":"Ein Array kann auf vielerlei Weise erzeugt werden. Andere Elemente können in Arrays umgewandelt werden.\nHier werden die gängigsten Wege vorgestellt."},{"type":"subheader","crDate":1715081264866,"chDate":1715081334362,"text":"Leeres Array"},{"type":"paragraph","crDate":1715081338390,"chDate":1715081827743,"text":"Der häufigste Weg, ein Array zu erzeugen, ist die Verwendung der <i>eckigen Klammer</i>.\nDiese markiert ein Array, wenn keine Variable davor steht. Die Klammer kann mit beliebigen Werten gefüllt werden, diese werden dann in das Array eingetragen.\nDas Array kann dann mit beliebig vielen Werten gefüllt werden."},{"type":"code","crDate":1715081660172,"chDate":1715081676690,"text":"const arr = [12, 23, 45, 56];\nconsole.log(arr); // ->Array(4) [ 12, 23, 45, 56 ]"},{"type":"subheader","crDate":1715081751316,"chDate":1715081761119,"text":"Array()-Constructor"},{"type":"paragraph","crDate":1715081765844,"chDate":1715082344557,"text":"Eine ältere Syntax wird häufig als veraltet angesehen, bietet aber einige Vorteile.\nDer <i>Array()</i>-Constructor kann einen oder mehrere Werte annehmen. \nBekommt der Constructor einen Wert übergeben, dann wird dieser als gewünschte Länge interpretiert und es wird ein Array mit der gewünschten Anzahl leerer Slots angelegt.\nBekommt der Constructor mehr als ein Argument übergeben, dann werden diese Werte als Attribute in das Array eingetragen.\nBeim Füllen des Arrays mit den gewünschten Werten, würden die noch leeren Slots ignoriert werden. Daher wird das Array zunächst zu einem neuen Array umgewandelt, womit die zuvor leeren Slots zumindest mit <i>undefined</i> gefüllt werden. Somit kann per Map aus diesem Array ein neues erzeugt werden."},{"type":"code","crDate":1715082456020,"chDate":1715082473101,"text":"const arr = [... new Array(10)].map(() => ~~(Math.random()*100));\n\nconsole.log(arr);  // -> Array(10) [ 88, 87, 46, 56, 89, 63, 70, 79, 40, 57 ]"},{"type":"subheader","crDate":1715082753395,"chDate":1715082759667,"text":"Umwandeln"},{"type":"paragraph","crDate":1715082765652,"chDate":1715083934078,"text":"Ein Array-ähnliches Element kann mithilfe der <i>Array.from()</i>-Methode in ein richtiges Array umgewandelt werden, um von den modernen Array-Methoden zu profitieren.\nFolgende Elemente können umgewandelt werden:\n<ul>\n<li>Nodelisten</li>\n<li>Klassenlisten</li>\n<li>Objekte (Wenn es ein length-Attribut enthält. \nEs werden nur die Attribute übertragen, die eine Zahl als key tragen)</li>\n<li>Map (erzeugt ein zweidimensionales Array)</li>\n<li>Set</li>\n<li>String (Buchstaben werden als Slots übertragen)</li>\n<li>Alle Datensammlungen, welche eine length</li>\n</ul>"},{"type":"code","crDate":1715083360955,"chDate":1715084929394,"text":"const arr = Array.from(document.querySelectorAll('p'))\nconsole.log(arr);"},{"type":"paragraph","crDate":1715086209703,"chDate":1715086296220,"text":"Eine kürzere Alternative setzt auf die Spread-Syntax."},{"type":"code","crDate":1715086298123,"chDate":1715086304195,"text":"const arr = [...document.querySelectorAll('p')];\nconsole.log(arr);"},{"type":"subheader","crDate":1715084943746,"chDate":1715084952410,"text":"Array.from()"},{"type":"paragraph","crDate":1715084955543,"chDate":1715086036848,"text":"Aufgrund der Funktionsweise der <i>from()</i>-Methode kann mit ihrer Hilfe auch direkt ein Array erzeugt werden.\nWird der from()-Methode ein Objekt übergeben, dann definiert die <i>length</i>-Eigenschaft die Länge des gewünschten Arrays. Als zweites Argument kann eine <i>Funktion</i> übergeben werden, die für jeden Slot aufgerufen wird. Die Funktion hat zwei Parameter: den Wert aus der Eingangs-Datensammlung sowie den Index aus der Iteration."},{"type":"code","crDate":1715086170703,"chDate":1715086181645,"text":"const arr = Array.from(\n { length: 10 },\n () => ~~(Math.random() * 100)\n)\n\nconsole.log(arr);"},{"type":"subheader","crDate":1715086469001,"chDate":1715086479771,"text":"Liste von Werten"},{"type":"paragraph","crDate":1715086532676,"chDate":1715086837888,"text":"Die <i>Array.of()</i>-Methode kann eine Liste unzusammenhängender Werte zu einem Array umwandeln. Der Unterschied zum Array()-Constructor ist der Umgang mit einem einzelnen Argument,"},{"type":"code","crDate":1715086868202,"chDate":1715086872826,"text":"const arr = Array.of(21, 32, 65, 54, 87);\nconsole.log(arr);"}]}