{"content":[{"type":"subheader","crDate":1706106774285,"chDate":1706106776804,"text":"Strings"},{"type":"paragraph","crDate":1706106771941,"chDate":1706277936579,"text":"Wie jedes andere HTML-Element kann auch eine Web Component nur Strings als Attribute übergeben bekommen.\nDieses Attribut kann über HTML oder JS zugewiesen werden.\nDie Web Component muss vorbereitet werden:\n<ul>\n<li>Die zu beobachteten Attribute werden registriert.</li>\n<li>Der Getter sorgt dafür, dass bei einer Abfrage des Parameters die Daten ausgegeben werden.</li>\n<li>Der Setter sorgt dafür, dass bei einer Änderung der neue Wert eingetragen wird.</li>\n<li>Die Methode attributeChangedCallback() reagiert auf spezifische Änderungen von Parametern.</li>\n</ul>"},{"type":"code","crDate":1706278153506,"chDate":1706278208774,"text":"'use strict';\n\nconst template = document.createElement('div');\ntemplate.innerHTML = 'Dies ist mein eigenes Custom Element';\ntemplate.className = 'myComponent';\n\nclass myWB extends HTMLElement {\n constructor(){\n  super();\n  this.root = this.attachShadow();\n  this.root.append(template.cloneNode(true));\n }\n // Erwartete String-Attribute\n static get observedAttributes() {\n  return ['my-attribute']\n }\n    \n // Getter und Setter für String-Attribute\n get 'my-attribute'() {\n  return this.getAttribute('my-attribute')\n }\n set 'my-attribute'(val) {\n  this.setAttribute('my-attribute', val);\n }\n    \n // Eventlistener für veränderte Attribute\n attributeChangedCallback(attrName, oldVal, currentVal) {\n  if(attrName == 'my-attribute'){\n   // Tu etwas mit dem Value\n   console.log(currentVal);\n  }\n }\n}\n\ncustomElements.define('my-webcomp', myWB);"},{"type":"subheader","crDate":1706706104144,"chDate":1706706107472,"text":"Slots"},{"type":"paragraph","crDate":1706706111176,"chDate":1706797600288,"text":"Manchmal möchte man in eine Komponente den Inhalt des Elementes übertragen. Das kann der Text-Inhalt sein oder ganze Dom-Strukturen.\nIn dem Fall kann die gewünschte DOM-Struktur einfach in den HTML-Code der Webseite (Host) eingebaut werden.\nIn der Web Component kann ein Element vom Typ <i>slot</i> eingefügt werden. Dieser Slot wird dann ersetzt durch die übergebene DOM-Struktur."},{"type":"code","crDate":1706712488441,"chDate":1706712903249,"text":"// Web Component in JS\n'use strict';\n\nconst template = document.createElement('div');\ntemplate.append(style)\n\n// In diesem Element wird der übergebene Inhalt eingetragen\nconst elSlot = document.createElement('slot');\ntemplate.append(elSlot);\n\nclass Random extends HTMLElement {\n constructor() {\n  super();\n  this.root = this.attachShadow({\n   mode: 'closed'\n  })\n  this.root.append(template.cloneNode(true));\n }\n\n // Eventlistener für Mounting\n connectedCallback() {\n  let parent = this.root.querySelector('.container')\n  let elNum = document.createElement('p');\n  elNum.innerHTML = ~~(Math.random() * 100);\n  parent.append(elNum);\n }\n}\n\ncustomElements.define('rnd-number', Random);"},{"type":"code","crDate":1706712922744,"chDate":1706797667305,"text":"&lt;!-- Aufruf im Host -->\n&lt;rnd-number>\n &lt;p>Hallo Welt&lt;/p>\n&lt;/rnd-number>\n\n&lt;rnd-number>\n &lt;div class=\"contents\">\n  &lt;p>ABC&lt;/p>\n  &lt;p>DEF&lt;/p>\n  &lt;p>GHI&lt;/p>\n  &lt;button>Click Here&lt;/button>\n &lt;/div>\n&lt;/rnd-number>"},{"type":"subheader","crDate":1706796993440,"chDate":1706797013458,"text":"Named Slots"},{"type":"paragraph","crDate":1706797017587,"chDate":1706798762776,"text":"Ein Slot wie oben genügt manchmal nicht und man möchte mehrere HTML-Bäume an die Komponente übergeben. \nAuch das ist möglich, indem die übergebenen Slots auf der HTML-Seite (\"Host\") einen Namen bekommen. \nIn der Component wird dazu passend ein Element vom Typ <i>slot</i> anglegt. Dieses Slot-Element bekommt das <i>name</i>-Attribut mit dem Wert, der im Host als <i>slot</i> angegeben wurde. Dadurch wird der Slot durch die übergebene Struktur ersetzt.\nIm Beispiel wird ein Text für die Überschrift und ein weiterer Text für die Beschriftung übergeben.\nDa der Slot komplett ersetzt wird, können beliebige DOM-Strukturen übergeben werden (wie im Beispiel).\nÜbrigens: Im Beispiel wird nach dem Erzeugen der Komponente ein <span>-Tag eingehängt und mit einer zufälligen Zahl gefüllt. Dies ist nur, um einen zusätzlichen Inhalt einzuhängen."},{"type":"code","crDate":1706798819938,"chDate":1706798925419,"text":"'use strict';\n\nconst template = document.createElement('div');\n\nconst container = document.createElement('div');\ncontainer.className = 'container';\ntemplate.append(container)\n\nconst elContent = document.createElement('slot');\nelContent.name = 'content';\ncontainer.append(elContent);\n\nconst header = document.createElement('slot');\nheader.name = 'header';\ncontainer.prepend(header);\n\nclass Random extends HTMLElement {\n constructor() {\n  super();\n  this.root = this.attachShadow({\n   mode: 'closed'\n  })\n  this.root.append(template.cloneNode(true));\n }\n\n // Eventlistener für Mounting\n connectedCallback() {\n  let parent = this.root.querySelector('.container')\n  let elNum = document.createElement('span');\n  elNum.innerHTML = ~~(Math.random() * 100);\n  parent.append(elNum);\n }\n}\n\ncustomElements.define('rnd-number', Random);"},{"type":"code","crDate":1706798766495,"chDate":1706798808516,"text":"&lt;!-- Aufruf im Host -->\n&lt;rnd-number>\n &lt;h2 slot=\"header\">So viele Zahlen&lt;/h2>\n &lt;p slot=\"content\">Zufall&lt;/p>\n&lt;/rnd-number>\n\n&lt;rnd-number>\n &lt;h3 slot=\"header\">Header Content Goes Here&lt;/h3>\n &lt;span slot=\"content\">Random Number is: &lt;/span>\n&lt;/rnd-number>"},{"type":"subheader","crDate":1706106780429,"chDate":1706106789588,"text":"Non-Strings"},{"type":"paragraph","crDate":1706278747774,"chDate":1706279819637,"text":"Eigentlich können Web Componenten keine Parameter annehmen, die keine Strings sind. Daher müssen wir in die Trickkiste greifen, um Funktionen oder Datensammlungen in die Web Componente zu übertragen. \nEs bietet sich eine Funktion an, die aufgerufen werden kann, denn einer Funktion können beliebige Datentypen übergeben werden."},{"type":"code","crDate":1706279824014,"chDate":1706281236827,"text":"// Anlegen der Web Component\n'use strict';\n\nconst template = document.createElement('div');\ntemplate.className = 'myComponent';\n\nclass myWB extends HTMLElement {\n constructor() {\n  super();\n  this.root = this.attachShadow({\n   mode: 'open'\n  });\n  this.root.append(template.cloneNode(true));\n }\n\n setOptions(contents=[]){\n  this.root.innerHTML = '';\n  contents.forEach(val => {\n   const el = document.createElement('p');\n   el.innerHTML = val;\n   this.root.append(el);\n  })\n }   \n}\n\ncustomElements.define('my-webcomp', myWB);"},{"type":"code","crDate":1706281240434,"chDate":1706281310381,"text":"// Aufrufen, Parameterübergabe und Einbindung\n\nconst elContents = document.createElement('my-webcomp');\nelContents.setOptions([\n \"Web Components are reusable HTML elements.\",\n \"They provide a way to package reusable cod.\",\n \"Web Components allow developers to create custom elements.\",\n \"This promotes code reuse, modularity, and maintainability.\",\n \"Web Components are supported by all major web browsers.\",\n])\ndocument.body.append(elContents)"}]}