{"content":[{"type":"paragraph","crDate":1707228461439,"chDate":1707228320097,"text":"Werte in einer beliebigen Programmiersprache werden im Arbeitsspeicher abgelegt und eine Variable dient als Referenz zu diesem Speicherpunkt.\nArrays, Objekte, Maps, Sets, Funktionen und andere Werte werden kopiert, in dem eine <i>neue Variable</i> angelegt wird, die auf exakt dieselbe Stelle im Arbeitsspeicher zeigt, wie die originale Variable. Dieser Prozess wird <i>Copy by Reference</i> genannt.\nDas bedeutet, dass eine Änderung des Wertes über eine Variable auch in den Kopien zu sehen ist. Weil alle Variablen Verknüpfungen zu demselben Wert sind."},{"type":"subheader","crDate":1707228981897,"chDate":1707228367213,"text":"Call by References"},{"type":"paragraph","crDate":1707229010951,"chDate":1707230041426,"text":"Die Übergabe eines Arrays (oder eines Objektes, etc.) an eine Funktion (sog. <i>Call by Reference</i>) ist nichts anderes als eine <i>Kopie</i> des Wertes. D.h., der Wert wird als Referenz zum Original übergeben und jede Änderung des Wertes wird im Original verändert.\nAls Clou behält der Wert seinen Scope. Im Beispiel wird eine Funktion aus einer Funktion aufgerufen und eine weitere Funktion übergeben. Da die übergebene Funktion als Referenz übergeben wurde, behält sie den Scope und kann auf die Werte aus der aufrufenden Funktion zugreifen. Nicht aber auf die Inhalt der Funktion, an die sie übergeben wurde."},{"type":"code","crDate":1707229856575,"chDate":1707229922898,"text":"const fHost = () => {\n let multiplyer = 4;\n\n const callback = value => {\n  return value * multiplyer;\n }\n\n fReceiver(callback);\n}\n\nconst fReceiver = f => {\n let result = f(10);\n console.log(result);\n}\n\nfHost();"},{"type":"subheader","crDate":1707228275820,"chDate":1707228287454,"text":"Yadda Yadda"},{"type":"subheader","crDate":1707227734620,"chDate":1707227767190,"text":"Compare by Reference"},{"type":"paragraph","crDate":1707227772814,"chDate":1707227930953,"text":"Auch bei einem Vergleich zweier Werte werden die Referenzen verglichen. Daher "}]}