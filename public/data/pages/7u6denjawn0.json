{"content":[{"type":"subheader","crDate":1695041799170,"chDate":1695042667278,"text":"Struktur"},{"type":"paragraph","crDate":1695042569626,"chDate":1695042997564,"text":"In einer couchDB-Datenbank sind alle Datensätze als sogenannte <i>Dokumente</i> abgelegt. Jedes Dokument wird als eine <i>JSON</i>-Datei gehandhabt und stellt ein beliebig komplexes Javascript-Objekt mit allen Verschachtelungen dar.\n<b>ID</b>\nJedes Objekt hat eine ID. Diese kann vom Benutzer bestimmt werden, wird aber defaultmäßig automatisch erzeugt. \nDie ID ist in der Datenbank einmalig und erlaubt das eindeutige Ansprechen eines Dokumentes.\n<b>Revision</b>\nDie <i>_rev</i> in einer CouchDB-Datenbank steht für Revision. Eine Revision ist eine eindeutige Kennung für eine Version eines Dokuments in der Datenbank. Jedes Mal, wenn ein Dokument in der Datenbank geändert wird, erhält es eine neue Revision. Sie wird verwendet, um Konflikte bei gleichzeitigen Änderungen zu vermeiden und ermöglicht es, ältere Versionen eines Dokuments wiederherzustellen."},{"type":"subheader","crDate":1695041361057,"chDate":1695041362261,"text":"list()"},{"type":"paragraph","crDate":1695041379309,"chDate":1695041678434,"text":"Liefert ein Array mit allen Dokumenten in der Datenbank.\nDas Rückgabe-Array ist in ein Objekt geschachtelt, das neben den Nutzdaten die Anzahl der Datensätze und einen offset (dazu unten mehr) enthält.\nDie Nutzdaten sind im Attribut <i>rows</i> abgelegt."},{"type":"paragraph","crDate":1695041742326,"chDate":1695129617110,"text":"Um die <i>list()</i>-Methode zu steuern, kann dieser ein Options-Objekt übergeben werden. Dieses kann die folgenden Attribute enthalten:\n<b>include_docs</b> boolean\nBestimmt, ob in den Datensätzen auch die Nutzdaten enthalten sind\n<b>limit</b> number\nDefiniert die Anzahl der zurückgegebenen Datensätze.\n<b>skip</b> number\nÜberspringt die genannte Anzahl an Dokumenten. Zusammen mit <i>limit</i> lässt sich hiermit eine <i>Pagination</i> umsetzen."},{"type":"code","crDate":1695042197814,"chDate":1695042241153,"text":"let myDB = db.use(dbName);\n\nmyDB.list({\n include_docs: true\n}).then(\n res => res.rows.map(row => row.doc)\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695042329204,"chDate":1695042457682,"text":"get()"},{"type":"paragraph","crDate":1695043055048,"chDate":1695043081214,"text":"Falls die ID eines Dokumentes bekannt ist, kann dieses sehr einfach mittels der get()-Methode geladen werden."},{"type":"code","crDate":1695043199246,"chDate":1695043209557,"text":"let myDB = db.use(dbName);\n\nmyDB.get('44f5a761264c703a4c80163a4400b018').then(\n console.log\n).catch(\n console.warn\n)\n"},{"type":"subheader","crDate":1695042450331,"chDate":1695042454955,"text":"fetch()"},{"type":"paragraph","crDate":1695043488970,"chDate":1695043920170,"text":"Die fetch()-Methode kann ein <i>Array</i> an Dokument-IDs übernehmen ud leifert dann die gewünschten Dokumente als Array zurück.\nDas Array für die Abfrage wird in einem Objekt unter dem Attributnamen <i>keys</i> gespeichert. \nIn der Antwort sind die Dokumente als Array in einem Objekt organisiert."},{"type":"code","crDate":1695044042185,"chDate":1695044056688,"text":"let myDB = db.use(dbName);\n\nmyDB.fetch({keys}).then(\n res => res.rows.map(row => row.doc)\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695042459930,"chDate":1695042463434,"text":"find()"},{"type":"paragraph","crDate":1695044137634,"chDate":1695045820078,"text":"Die find()-Methode sucht in der Datenbank nach Dokumenten, die der Anfrage entsprechen. Die Anfrage wird in der Mango-Syntax abgesetzt (<a href=\"/?id=aaiq77dxdds\">Hier klicken für mehr</a>). Das ist eine Abfragesprache, die logische Aussagen per JSON-kompatibler Objekte erlaubt.\nIn der Mango-Syntax kann bspw. mit dem <i>selector</i>-Attribut ein definierter Wert abgefragt werden.\nIm Rückgabewert sind die Nutzdaten im Attribut <i>docs</i> gespeichert."},{"type":"paragraph","crDate":1695047028898,"chDate":1695129688239,"text":"Die Methode versteht die folgenden Attribute:\n<b>selector</b>:\nEin Mango-Objekt, das die Suchkriterien definiert.\n<b>fields</b>: \nEin Array von Feldnamen, die in den zurückgegebenen Dokumenten enthalten sein sollen. Dadurch kann die Datenmenge reduziert werden.\n<b>sort</b>: \nEin Array von Sortierkriterien, um die Reihenfolge der zurückgegebenen Dokumente festzulegen.\n<b>limit</b>: \nEine Zahl, die angibt, wie viele Dokumente maximal zurückgegeben werden sollen.\n<b>skip</b>: \nEine Zahl, die angibt, wie viele Dokumente übersprungen werden sollen. Dies wird oft in Kombination mit <i>limit</i> verwendet, um <i>Paginierung</i> zu implementieren.\n<b>bookmark</b>: \nEin Lesezeichenwert, um die Suche von einem definierten Punkt aus fortzusetzen.\n"},{"type":"code","crDate":1695044841166,"chDate":1695125764236,"text":"let myDB = db.use(dbName);\n\nmyDB.find({\n selector: {\n  bundesland: 'Nordrhein-Westfalen'\n },\n limit: 5\n}).then(\n res => res.docs\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"paragraph","crDate":1695046335101,"chDate":1695046918277,"text":"Die Antworten der find()-Methode werden in Häppchen zurückgeliefert (<a href=\"/?id=5sy9z5u7488\">Klick für mehr</a>).\nDer Wert des <i>bookmark</i>-Attributes in der Rückgabe repräsentiert die Position, an der die Suche gestoppt wurde. Er ermöglicht es, die Suche von diesem Punkt aus fortzusetzen, anstatt von Anfang an zu beginnen."},{"type":"code","crDate":1695125774149,"chDate":1695125889947,"text":"let myDB = db.use(dbName);\n\nmyDB.find({\n selector: {\n  bundesland: 'Nordrhein-Westfalen'\n },\n limit: 5,\n bookmark: 'g2wAAA ... UV1Wpq'\n}).then(\n res => res.docs\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695042486570,"chDate":1695042518990,"text":"insert()"},{"type":"paragraph","crDate":1695126759157,"chDate":1695128049308,"text":"Die <i>insert()</i>-Methode legt einen neuen Datensatz in der Datenbank an. Sie bekommt ein Objekt übergeben, das beliebig komplex verschachtelt sein kann.\nMethoden werden freilich nicht in die Datenbank geschrieben, da die Daten per <i>JSON</i> übertragen werden.\nDas übergebene Objekt kann auch ein eigenes <i>_id</i>-Attribut tragen, das dann die ID des gespeicherten Objektes darstellt."},{"type":"code","crDate":1695126715017,"chDate":1695126749797,"text":"const dataset = {\n name: \"Wiesbaden\",\n bundesland: \"Hessen\",\n einwohnerzahl: 283083,\n fläche: 204\n}\n\nlet myDB = db.use(dbName);\n\nmyDB.insert(dataset).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695042522167,"chDate":1695042527429,"text":"update"},{"type":"paragraph","crDate":1695127316518,"chDate":1695128074923,"text":"Um ein vorhandenes Dokument zu aktualisieren, wird ebenfalls die <i>insert()</i>-Methode verwendet.\nDas übergebene Objekt muss die <i>_id</i> des zu verändernden Dokumentes enthalten. Um zu verhindern, dass eine Anfrage vorherige Veränderungen überschreibt, muss auch die <i>Revision</i> korrekt übergegeben werden.\nWichtig ist zu erwähnen, dass in der Datenbank der komplette Datensatz überschrieben wird. D.h., dass alle Attribute übergeben werden müssen, die später in der Datenbank stehen sollen. Auch diejenigen, die sich nicht verändern."},{"type":"code","crDate":1695127813267,"chDate":1695128003076,"text":"const dataset = {\n _id: 'ebe7d8be9409c98c2c97719c5f004458',\n _rev: '1-707b0973c88e4ae503e5d96f7e0a90c7',\n name: 'Wiesbaden',\n bundesland: 'Hessen',\n einwohnerzahl: 380000,\n fläche: 204\n}\n\nlet myDB = db.use(dbName);\n\nmyDB.insert(dataset).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695042531473,"chDate":1695128099441,"text":"destroy()"},{"type":"paragraph","crDate":1695128116892,"chDate":1695128644247,"text":"Die <i>destroy()</i>-Methode entfernt ein Dokument aus der Datenbank.\nDie Methode bekommt die ID und die Revision als einzelne Strings übergeben."},{"type":"code","crDate":1695128280489,"chDate":1695128294583,"text":"let myDB = db.use(dbName);\n\nmyDB.destroy(\n 'ebe7d8be9409c98c2c97719c5f004458',\n '1-707b0973c88e4ae503e5d96f7e0a90c7'\n).then(\n console.log\n).catch(\n console.warn\n)"}]}