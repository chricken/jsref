{"content":[{"type":"paragraph","crDate":1755261855903,"chDate":1758016726449,"text":"<i>Server Side Rendering (SSR)</i> bedeutet, dass die Webseiten auf einem Webserver gerendert und als fertiger HTML-Code an den Browser ausgeliefert werden.\nDas hat verschiedene Vorteile:<ul><li>Der JS-Code kann vom Client nicht eingesehen werden.</li>\n<li>Auf der Client-Seite werden weniger Ressourcen verwendet, d.h. es läuft auf schwacher Hardware.</li>\n<li>Beim Client werden die Seiten schneller angezeigt.</li>\n<li>Diese Seiten werden in Suchmachinen besser indiziert.</li></ul>\nSSR hat aber auch ein paar Nachteile:<ul><li>Der Webserver wird stärker belastet, da alle Renderings hier stattfinden.</li>\n<li>Längere initiale Ladezeit, wenn der Server die gesamte App rendern muss.</li>\n<li>Der Server muss mit Node laufen.</li></ul>"},{"type":"paragraph","crDate":1755263030633,"chDate":1758015905544,"text":"Dabei ist ein wichtiger Punkt zu beachten:\n<i>Eventlistener</i> können (besser: sollten) nicht im HTML eingetragen werden. Sie müssen per JS an die Elemente angehängt werden.\nDeswegen ist der Render-Vorgang in zwei Schritte unterteilt:<ul>\n<li>Wenn eine Webseite angefragt wurde, dann wird zunächst auf dem Server der HTML-Code generiert und dieser an den Client gesendet.</li>\n<li>Auf dem Client wird nach dem Empfang des HTML-Codes der JS-Code geladen und die Eventlistener angehängt</li>\n</ul>\nDas Anhängen der Eventlistener wird <i>Rehydrating</i> genannt.\nIm Beispiel unten wird mit <i>Vite</i> gearbeitet. Mit anderen Frameworks wie Next ist dies aber ebenso möglich."},{"type":"header","crDate":1758029966803,"chDate":1758029972944,"text":"Vorbereitung"},{"type":"paragraph","crDate":1758029975320,"chDate":1758030091333,"text":"Zunächst wird die Dateistruktur gebracuht, um eine React-App zu bauen. Diese App wird später in der Server verwendet, um den HTML-Code zu generieren.\nEs wird also erst einmal React installiert, in diesem Beispiel mit Hilfe von Vite. Mit anderen Frameworks wie <i>nextJS</i> ist die saber ebenfalls möglich."},{"type":"terminal","crDate":1758030100758,"chDate":1758030156576,"text":"npm create vite@latest example\ncd example\nnpm install"},{"type":"header","crDate":1758027299511,"chDate":1758027325460,"text":"Server"},{"type":"subheader","crDate":1758014797336,"chDate":1758014806466,"text":"Webserver installieren"},{"type":"paragraph","crDate":1755262424229,"chDate":1758030214950,"text":"In den Ordner, in dem die index.html steht, installieren wir dann den <i>Express</i>-Webserver.\nDer Server wird in einem Unterordner installiert, um den Server-Code vom React-Framework zu trennen."},{"type":"terminal","crDate":1755262466041,"chDate":1758014787123,"text":"mkdir server\ncd server\nnpm i express"},{"type":"subheader","crDate":1758015309514,"chDate":1758015314226,"text":"Server-Module"},{"type":"paragraph","crDate":1755262477393,"chDate":1758015951551,"text":"Der Webserver soll später Webseiten mit React generieren und ausliefern. \nDas wird über die <i>createServer()</i>-Methode des <i>vite</i>-Moduls realisiert, die importiert wird. Um die Namen besser auseinderzuhalten, wird die Methode in createViteServer() umbenannt.\nZusätzlich muss auf das Dateisystem zugegriffen werden. Daher wird auch das <i>fs</i>-Modul importiert.\nDa wir viel mit <i>asynchronem Code</i> arbeiten, bietet sich das <i>promises</i>-Objekt aus dem fs-Modul an."},{"type":"subheader","crDate":1758015316700,"chDate":1758015325693,"text":"Server initialisieren"},{"type":"paragraph","crDate":1758015298943,"chDate":1758016468568,"text":"Bei der Initialisierung das Webservers muss zunächst mithilfe der importierten <i>createViteServer()</i>-Methode <i>React</i> eingebunden werden. \nDer Rückgabewert des Promise wird in einer globalen Variablen abgelegt, die wir später noch benötigen.\nDanach wird eine <i>catchAll</i>-Route hinzugefügt, die weiter unten besprochen wird. Diese catchAll-Route wird bei jedem Aufruf durch einen Client angesprochen.\nSchließlich wird die <i>listen()</i>-Methode aufgerufen, um den Server zu starten.\n"},{"type":"subheader","crDate":1758017060252,"chDate":1758017067207,"text":"CatchAll-Route"},{"type":"paragraph","crDate":1758017070333,"chDate":1758026700559,"text":"Als finaler Schritt im Webserver wird die sog. </i>catchAll</i>-Route eingehängt. \nDer Name bedeutet einfach nur, dass diese Route von jeder <i>http</i>-Anfage aufgerufen wird. Egal, welche URL abgefragt wird.\nSeit Express 5 wird <i>kein *</i> als URL mehr akzeptiert. Stattdessen wird das URL-Argument einfach weggelassen.\nIm Eventhandler wird zunächst die HTML-Datei geladen. Über die <i>transformIndexHTML()</i>,Methode wird der HTML-Code in eine Form transferiert, mit der React arbeiten kann. Das Ergebnis wird in eine Variable für später abgelegt.\nDann wird aus dem viteServer die Methode <i>ssrLoadModule()</i> zum Verarbeiten der React-App ausgeführt.\nSchließlich wird im HTML-Code der Kommentar <i><!--ssr-outlet--></i> gesucht und durch den HTML-Code der React-App ersetzt.\nDas Ergebnis wird als HTML an den Client zurück gegeben."},{"type":"code","crDate":1758019766840,"chDate":1758030629531,"text":"'use strict';\n\nimport express from 'express';\nimport {createServer as createViteServer} from 'vite';\nimport {promises as fs} from 'fs';\n\nconst server = express();\nlet viteServer;\n\nconst addCatchAll = () => server.use((req, res) => {\n let template\n fs.readFile('index.html', 'utf-8').then(\n  payload => viteServer.transformIndexHtml(req.originalUrl, payload) \n ).then(\n  (result) => template = result\n ).then(\n  () => viteServer.ssrLoadModule('/src/entry-server.jsx')\n ).then(\n  ({render}) => render(req.originalURL)\n ).then(\n  ({html: appHtml}) => {\n   const html = template.replace('&lt;!--ssr-outlet-->', appHtml);\n   res.status(200).set({'Content-Type': 'text/html'}).end(html);\n  }\n ).catch(\n  console.warn\n )\n})\n\nconst init = () => {\n createViteServer({\n  server: {middlewareMode: true},\n  appType: 'custom',\n }).then(\n  result => {\n   viteServer = result;\n   server.use(viteServer.middlewares)\n  }\n ).then(\n  addCatchAll\n ).then(\n  () => server.listen(8001, err => {\n   if (err) console.log(err);\n   else console.log('Server läuft');\n  })\n ).catch(\n  console.warn\n )\n}\n\ninit();"},{"type":"header","crDate":1758027330187,"chDate":1758027333959,"text":"Client"},{"type":"subheader","crDate":1758027357353,"chDate":1758030259189,"text":"HTML"},{"type":"paragraph","crDate":1758027379366,"chDate":1758030545163,"text":"Der Webserver (s.o.) versucht, den Kommentar <!--ssr-outlet--> zu ersetzen.\nDieser Kommentar ist in der original-HTML-Datei nicht vorhanden. Daher fügen wir diesen hinzu. \nEs spielt übrigens keine Rolle, wie der Kommantar genau lautet. Wichtig ist nur, dass in der HTML-Datei genau der Kommentar zu finden ist, auf den im Server Bezug genommen wird.\nDer gewünschte Kommentar wird also in das Element mit der ID <i>root</i> geschrieben.\n"},{"type":"code","crDate":1758030454726,"chDate":1758030468193,"text":"&lt;body>\n &lt;div id=\"root\">&lt;!--ssr-outlet-->&lt;/div>\n &lt;script type=\"module\" src=\"/src/main.jsx\">&lt;/script>\n&lt;/body>"},{"type":"subheader","crDate":1758030553267,"chDate":1758030557833,"text":"JSX"},{"type":"paragraph","crDate":1758030563079,"chDate":1758030934944,"text":"Um nun React mit dem Server zu verbinden, wird die <i>JSX</i>-Datei benötigt, die vom Server geladen wird.\nDiese befindet sich laut Server-Code im Pfad <i>'/src/entry-server.jsx'</i> und ist grob angelehnt an die main.js, die von Vite angelegt wurde.\nHier wird die React-App gerendert und zurück gegeben, um dann im Express-Server in den HTML-Code geschrieben zu werden."},{"type":"code","crDate":1758030853191,"chDate":1758030957551,"text":"import React, { StrictMode } from 'react';\nimport { renderToString } from 'react-dom/server';\nimport App from './App.jsx';\n\nexport function render(url) {\n const html = renderToString(\n  &lt;StrictMode>\n   &lt;App />\n  &lt;/StrictMode>\n );\n return { html };\n}"},{"type":"subheader","crDate":1758031085861,"chDate":1758031098930,"text":"Probieren"},{"type":"paragraph","crDate":1758031103886,"chDate":1758031141368,"text":"Damit sollte eine einfache App mit SSR lauffähig sein.\nHier fehlt natürlich noch einiges, aber die App kann bereits gestartet werden."},{"type":"terminal","crDate":1758031144640,"chDate":1758191517172,"text":"node server/server.js"}]}