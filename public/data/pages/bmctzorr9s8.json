{"content":[{"type":"subheader","crDate":1726137127756,"chDate":1726137135933,"text":"ID lesen"},{"type":"paragraph","crDate":1726137144141,"chDate":1726137238669,"text":"Am einfachsten kann ein Datensatz gelesen werden, wenn die ID bzw. der <i>Primary Key</i> bekannt ist.\nIm Beispiel soll ein einfaches Formular verwendet werden, das nach der zu lesenden ID fragt."},{"type":"code","crDate":1726137241339,"chDate":1726212912161,"text":"&lt;form id=\"getForm\">\n &lt;p>\n  &lt;input type=\"number\" name=\"getID\" required>&lt;br>\n &lt;/p>&lt;p>\n  &lt;button type=\"submit\">Laden&lt;/button>\n &lt;/p>\n&lt;/form>"},{"type":"paragraph","crDate":1726137269680,"chDate":1726141107518,"text":"Wenn das Formular abgesendet wird, wird der <i>Eventhandler</i> aufgerufen, ähnlich wie beim Schreiben.\nIm Handler wird die <i>transaction()</i>-Methode aufgerufen.\nAus dem Rückgabewert wird die <i>objectStore()</i>-Methode aufgerufen.\nAus dem Rückgabewert wird schließlich die <i>get()</i>-Methode aufgerufen.\nDie get()-Methode bekommt den Schlüssel übergeben. <b>Achtung</b>: Falls der Schlüssel automatisch erzeugt wird (<i>autoIncrement</i>), muss der übergebene Wert vom Datentyp <i>number</i> sein.\nDer Rückgabewert enthält <i>success</i>- und </i>error</i>-Events. Im success-Eventhandler kann schließlich aus das <i>evt.target.result</i>-Attribut ausgelesen werden."},{"type":"code","crDate":1726137381890,"chDate":1726141038143,"text":"const handleSubmitGet = (evt, db) => {\n evt.preventDefault();\n let getID = new FormData(evt.target).get('getID');\n\n const getRequest = db.transaction('myData', 'readonly')\n  .objectStore('myData')\n  .get(+getID);\n\n getRequest.addEventListener('success', evt => {\n  const retrievedData = evt.target.result;\n  console.log('Success', retrievedData);        \n });\n\n getRequest.addEventListener('error', err => {\n  console.log('Error', err);\n })\n}\n\nconst handleReqSuccess = evt => {\n console.log('Verbindung erfolgreich hergestellt.');\n const db = evt.target.result;\n\n const getForm = document.querySelector('#getForm');\n getForm.addEventListener('submit', evt => handleSubmitGet(evt, db));\n}"},{"type":"subheader","crDate":1726143692799,"chDate":1726143703158,"text":"Alle Datensätze lesen"},{"type":"paragraph","crDate":1726143717717,"chDate":1726143868347,"text":"Um alle Datensätze auszulesen, kann die <i>getAll()</i>-Methode verwendet werden.\nDie Herangehensweise ist wie zuvor."},{"type":"code","crDate":1726143805930,"chDate":1726212949328,"text":"const handleSubmitGetAll = (evt, db) => {\n evt.preventDefault();\n\n const myObjectStore = db.transaction('myData', 'readwrite').objectStore('myData');\n const allRequest = myObjectStore.getAll();\n\n allRequest.addEventListener('success', (evt) => {\n  console.log('Daten wurden erfolgreich geschrieben', evt.target.result);\n })\n\n allRequest.addEventListener('error', () => {\n  console.log('Es gab ein Problem');\n })\n}"}]}