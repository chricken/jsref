{"content":[{"type":"paragraph","crDate":1715351360062,"chDate":1715352721145,"text":"Das <i>Observer</i>-Pattern wird gern verwendet, um eine lose Kopplung zwischen Objekten herzustellen. \nEs ermöglicht, Objekte zu abstrahieren und in einem Objekt (a.k.a. <i>Subject</i>) ein anderes Objekt als Beobachter (a.k.a. <i>Observer</i>) zu registrieren. Dadurch können bei Änderugen im Subject Ereignisse im Observer ausgelöst werden, ohne dass die beiden die jeweiligen Strukturen kennen müssen."},{"type":"subheader","crDate":1715351681696,"chDate":1715351685130,"text":"Subject"},{"type":"paragraph","crDate":1715351679504,"chDate":1715351680271,"text":"Das Subject enthält eine Liste registrierter Observer und bietet Methoden an, Observer hinzuzufügen, zu Entfernen sowie zum Benachrichtigen über Änderungen."},{"type":"code","crDate":1715351687710,"chDate":1715351885229,"text":"class Subject {\n constructor() {\n  this.observers = [];\n  this.data = 123;\n }\n changeData(value) {\n  this.data = value;\n  this.notifyObservers();\n }\n addObserver(observer) {\n  this.observers.push(observer);\n }\n removeObserver(observer) {\n  this.observers = this.observers.filter(obs => obs !== observer);\n }\n notifyObservers(data) {\n  this.observers.forEach(observer => observer.update(this.data));\n }\n}"},{"type":"subheader","crDate":1715351901443,"chDate":1715351909959,"text":"Observer"},{"type":"paragraph","crDate":1715351912539,"chDate":1715351934846,"text":"Die Observer sind Objekte, die sich für Änderungen im Subject interessieren. Sie implementieren eine bestimmte Schnittstelle, die es dem Subjekt ermöglicht, sie zu benachrichtigen, wenn Änderungen auftreten."},{"type":"code","crDate":1715351992458,"chDate":1715352445489,"text":"class Observer {\n update(data) {\n  console.log(this, data);\n }\n}"},{"type":"subheader","crDate":1715352081582,"chDate":1715352090668,"text":"Zusammenführen"},{"type":"paragraph","crDate":1715352094273,"chDate":1715352369003,"text":"Hier werden Observer und Subjects zusammengeführt und die Daten einmal verändert.\nDie Veränderung ruft im Subject automatisch die update()-Methode auf."},{"type":"code","crDate":1715352375749,"chDate":1715352399060,"text":"// Verwendung\nconst subject = new Subject();\nconst observer1 = new Observer();\nconst observer2 = new Observer();\n\nsubject.addObserver(observer1);\nsubject.addObserver(observer2);\n\nsubject.changeData(42)"}]}