{"content":[{"type":"subheader","crDate":1758201976817,"chDate":1758201980563,"text":"useMemo"},{"type":"paragraph","crDate":1722952920835,"chDate":1758201966413,"text":"In React wird der Code einer Komponenten bei jeder Aktualisierung neu ausgeführt. Funktionen, die im Code referenziert wurden, werden ebenfalls bei jeder Aktualisierung aufgerufen.\nDas kann dann zum Probleme werden, wenn die aufgerufenen Funktionen lange in der Ausführung brauchen oder viele Ressourcen benötigen.\nIn einem solchen Fall gibt es eine Möglichkeit, das Ergebnis der Funktion zwischenzuspeichern.\nDer <i>useMemo()</i>-Hook bekommt zwei Parameter:\n<ul><li>Die Funktion, die ausgeführt werden soll.</li>\n<li>Ein Array mit Abhängigkeiten</li></ul>\nDie Funktion wird initial einmal ausgeführt. Der Rückgabewert der Funktion wird in der angegebenen Variablen (quasi einem State) gespeichert.\nErst dann, wenn sich eine Variable aus der Liste der Abhängigkeiten ändert, wird die Funktion wieder ausgeführt, um ein neues Zwischenergebnis zu erhalten.\nDadurch wird erreicht, dass die Funktion nur dann ausgeführt wird, wenn sich das Ergebnis geändert haben könnte. Ansonsten wird einfach das vorherige Ergebnis zurückgegeben.\nAuf dem Weg wird erreicht, dass eine Funktion nur so oft wie nötig aufgerufen wird."},{"type":"code","crDate":1758197254870,"chDate":1758197390573,"text":"import {useState, useMemo} from 'react'\nimport './App.css'\n\nconst App = () => {\n const [num, setNum] = useState(1000033);\n\n const checkIfPrime = () => {\n  console.log('Funktion wurde aufgerufen');\n  if (num <= 1) return false;\n  for (let i = 2; i ** 2 <= num; i++) {\n   if (num % i == 0) return false;\n  }\n  return true;\n }\n\n const isPrime = useMemo(\n  () => checkIfPrime(num),\n  [num]\n )\n\n return (\n  <>\n   <p>{num} ist {isPrime ? '' : 'nicht '}prim.</p>\n   <input\n    type=\"number\"\n    onInput={evt => setNum(evt.target.value)}\n    value={num}\n   />\n  </>\n )\n}\n\nexport default App;"},{"type":"subheader","crDate":1758201969799,"chDate":1758201986850,"text":"useCallback"},{"type":"paragraph","crDate":1758201989607,"chDate":1758203338374,"text":"Bei einem Re-Render werden nicht nur die Variablen neu angelegt, sondern auch die Funktionen.\nDas häufige Neu-Anlegen der Funktion kann u.U. Ressourcen verbrauchen oder Abhängigkeiten brechen.\nDaher wurde der Callback-Hook erfunden.\n"}]}