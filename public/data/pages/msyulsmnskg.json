{"content":[{"type":"subheader","crDate":1683292638221,"chDate":1686047106205,"text":"value.includes()"},{"type":"paragraph","crDate":1686047051113,"chDate":1686047224667,"text":"Mit der includes()-Methode kann in einem Array geprüft werden, ob ein bestimmter Wert darin vorkommt.\nEs wird immer der ganze Wert gesucht, Teilstrings werden nicht berücksichtigt."},{"type":"code","crDate":1686047228540,"chDate":1686047548284,"text":"'use strict';\n\nlet myArray = [21, 54, 87, 32, 65, 98];\n\nlet result = myArray.includes(21);\nconsole.log(result);  // -> true\n\nresult = myArray.includes(22);\nconsole.log(result);  // -> false\n\nlet yourArray = ['Meier', 'Müller', 'Schulz', 'Schmidt'];\n\nresult = myArray.includes('Meier');\nconsole.log(result);  // -> false\n\nresult = myArray.includes('Sch');\nconsole.log(result);  // -> false\n\nresult = myArray.includes('meier');\nconsole.log(result);  // -> false"},{"type":"subheader","crDate":1686053962439,"chDate":1686053970348,"text":"value.indexOf()"},{"type":"paragraph","crDate":1686053974148,"chDate":1686055007718,"text":"indexOf() sucht im Array nach einem Wert und gibt dessen Index zurück.\nDer zweite Parameter kann der Start-Index sein, ab dem nach dem Wert gesucht wird.\nWird der Wert nicht gefunden, liefert die Methode <i>-1</i> zurück."},{"type":"code","crDate":1686054965499,"chDate":1686054967679,"text":"const myArray = [21, 54, 87, 65, 54, 32];\n\nlet result = myArray.indexOf(54);\nconsole.log(result);  // -> 1\n\nresult = myArray.indexOf(54, 2);\nconsole.log(result);  // -> 4"},{"type":"subheader","crDate":1683292671439,"chDate":1686055093970,"text":"value.find()"},{"type":"paragraph","crDate":1686055096729,"chDate":1686057710558,"text":"find() ist eine <i>Higher-Class-Methode</i>, die eine Callback-Funktion als Parameter annimmt.\nDie  Callback-Funktion wird für jeden Slot im Array einmal ausgeführt (\"<i>iteriert</i>\"). Der erste Slot, für den die Callback-Funktion ein <i>true</i> zurückgibt, wird als Rückgabewert von find() zurückgeliefert.\nDie find()-Methode kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686057204107,"chDate":1686057253016,"text":"const myArray = [{\n name: 'Max Mustermann',\n age: 17\n},{\n name: 'Miriam Musterfrau',\n age: 18\n},{\n name: 'Erich Exempel',\n age: 32\n},{\n name: 'Birgit Beispiel',\n age: 14\n}];\n\nlet adult = myArray.find(value => value.age >= 18);\n\nconsole.log(adult);  // -> { name: 'Miriam Musterfrau', age: 18 }"},{"type":"subheader","crDate":1686055043407,"chDate":1686055054332,"text":"value.filter()"},{"type":"paragraph","crDate":1686057301157,"chDate":1686148002845,"text":"filter() ist eine <i>Higher-Class-Methode</i>, die eine Callback-Funktion als Parameter annimmt.\nDie  Callback-Funktion wird für jeden Slot im Array einmal ausgeführt (\"<i>iteriert</i>\"). Die Slots, für welche die Callback-Funktion ein <i>true</i> zurückgeben, werden als neues Array zurückgeliefert.\nDie callback-Methode kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686057524949,"chDate":1686057581863,"text":"const myArray = [{\n name: 'Max Mustermann',\n age: 17\n},{\n name: 'Miriam Musterfrau',\n age: 18\n},{\n name: 'Erich Exempel',\n age: 32\n},{\n name: 'Birgit Beispiel',\n age: 14\n}]\n\nlet adult = myArray.filter(value => value.age >= 18);\n\nconsole.log(adult);  // -> [\n                     //  { name: 'Miriam Musterfrau', age: 18 },\n                     //  { name: 'Erich Exempel', age: 32 }\n                     // ]"},{"type":"subheader","crDate":1683292614985,"chDate":1686057858323,"text":"value.some()"},{"type":"paragraph","crDate":1686057849787,"chDate":1686058109727,"text":"some() ist eine <i>Higher-Class-Methode</i>, die eine Callback-Funktion als Parameter annimmt.\nDie  Callback-Funktion wird für jeden Slot im Array einmal ausgeführt (\"<i>iteriert</i>\"). Falls die Callback-Funktion bei <b>mindestens einem</b> Slot ein <i>true</i> zurückliefert, ist auch die Rückgabe der some()-Methode <i<true</i>.\nDie filter()-Methode kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686058270611,"chDate":1686058282673,"text":"const myArray = [{\n name: 'Max Mustermann',\n age: 17\n},{\n name: 'Miriam Musterfrau',\n age: 18\n},{\n name: 'Erich Exempel',\n age: 32\n},{\n name: 'Birgit Beispiel',\n age: 14\n}];\n\nlet adult = myArray.some(value => value.age >= 18);\n\nconsole.log(adult);  // -> true"},{"type":"subheader","crDate":1683292626079,"chDate":1686058349863,"text":"value.every()"},{"type":"paragraph","crDate":1686058075203,"chDate":1686058098831,"text":"every() ist eine <i>Higher-Class-Methode</i>, die eine Callback-Funktion als Parameter annimmt.\nDie  Callback-Funktion wird für jeden Slot im Array einmal ausgeführt (\"<i>iteriert</i>\"). Falls die Callback-Funktion bei <b>allen</b> Slots ein <i>true</i> zurückliefert, ist auch die Rückgabe der some()-Methode <i<true</i>.\nDie filter()-Methode kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686058309312,"chDate":1686058319135,"text":"const myArray = [{\n name: 'Max Mustermann',\n age: 17\n},{\n name: 'Miriam Musterfrau',\n age: 18\n},{\n name: 'Erich Exempel',\n age: 32\n},{\n name: 'Birgit Beispiel',\n age: 14\n}];\n\nlet adult = myArray.every(value => value.age >= 18);\n\nconsole.log(adult);  // -> false"}]}