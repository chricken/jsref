{"content":[{"type":"subheader","crDate":1683296223971,"chDate":1694510987511,"text":"Senden mit Formular"},{"type":"paragraph","crDate":1694510764198,"chDate":1694510873530,"text":"Das Hochladen von Dateien wird üblicherweise über ein Formular mit eingebettetem <i>file</i>-Inputfeld im Frontend erledigt. Der Aufbau eines solchen Formulars wird hier besprochen: <a href=\"/?id=19ngpvaphac\">Klick für mehr</a>"},{"type":"subheader","crDate":1694510963996,"chDate":1694510979969,"text":"Senden ohne Formular"},{"type":"paragraph","crDate":1694510996252,"chDate":1694522894466,"text":"Auch ohne ein Formular im DOM können Daten zusammengetragen und per <i>Formdata</i>-Objekt übertragen werden. Dazu wird ein Formdata-Objekt angelegt und beliebige Informationen per <i>append</i> angehängt. Dabei ist zu beachten, das alle Daten zur Übertragung in String konvertiert werden. Daher können keine Arrays, Objekte oder Funktionen direkt eingehängt werden."},{"type":"code","crDate":1694523125241,"chDate":1694523163118,"text":"const handleClick = () => {\n const myForm = new FormData();\n myForm.append('myText', 'SomeRandomText');\n\n fetch('/upload', {\n  method: 'post',\n  body: myForm\n }).then(\n  res => res.json()\n ).then(\n  console.log\n ).catch(\n  console.warn\n )\n}\n\nconst init = () => {\n document.querySelector('#btn')\n  .addEventListener('click', handleClick);\n}\n\n// INIT\ndocument.addEventListener('DOMContentLoaded', init);"},{"type":"paragraph","crDate":1694523239409,"chDate":1694524810993,"text":"Etwas komplizierter wird es, wenn Dateien hochgeladen werden sollen.\nEin Weg ist, die Dateien per <i>Ajax</i> zu laden, um auf deren Content zugreifen zu können. Dann wird die Datei zu einem <i>blob</i> (Binary Large Object) gewandelt, welches in das <i>Formdata</i>-Objekt angehängt werden kann."},{"type":"code","crDate":1694524859826,"chDate":1694525143841,"text":"const handleClick = () => {\n const imgURL = '/img/sample.pdf';\n const myForm = new FormData();\n myForm.append('myText', 'SomeRandomText');\n\n fetch(imgURL).then(\n  response => response.blob()\n ).then(blob => {\n  // extract Filename\n  let name = imgURL.split('/');\n  name = name[name.length - 1];\n\n  // Element anhängen\n  myForm.append('image', blob, name);\n\n  // Absenden\n  return fetch('/upload', {\n   method: 'post',\n   body: myForm\n  })\n }).then(\n  res => res.json()\n ).then(\n  console.log\n ).catch(\n  console.warn\n )\n}\n\nconst init = () => {\n  document.querySelector('#btn')\n   .addEventListener('click', handleClick);\n}\n\n// INIT\ndocument.addEventListener('DOMContentLoaded', init);"},{"type":"subheader","crDate":1683296235158,"chDate":1683296239877,"text":"Formidable"},{"type":"paragraph","crDate":1694602123470,"chDate":1694605420278,"text":"Formidable ist ein Node-Modul zur Verarbeitung von Formular-Daten, die per Ajax an eine Route gesendet wird.\nEine Stärke von formidable ist die Verarbeitung von Dateien. Diese werden z.B. automatisch umbenannt, um versehentliches Überschrieben zu verhindern.\nZur Verarbeitung muss <i>formidable</i> installiert werden."},{"type":"terminal","crDate":1694602328740,"chDate":1694602333538,"text":"npm i formidable"},{"type":"paragraph","crDate":1694602395391,"chDate":1694602482823,"text":"Um im Server verwendet zu werden, muss formidable in den Server importiert werden."},{"type":"code","crDate":1694602388585,"chDate":1694602500694,"text":"// ES6-Import\nimport formidable from 'formidable';"},{"type":"paragraph","crDate":1694602346225,"chDate":1694604080598,"text":"Schließlich kann die Route aufgebaut werden, in der das Formular verarbeitet wird.\nIn der Route wird dann ein Objekt aus dem <i>formidable()</i>-Constructor erzeugt. Dieser Constructor kann ein Objekt mit Parametern annehmen. Diese sind:\n<ul>\n<li><b>encoding</b> (string, default 'utf-8')\nDefiniert die Kodierung der Formularfelder</li>\n<li><b>uploadDir</b> (string, default Temp-Verzeichnis des OS)\nDas Verzeichnis, in das hochgeladene Dateien gespeichert werden.</li>\n<li><b>keepExtensions</b> (boolean, default false)\nBestimmt, ob die Dateiendung bleiben soll.</li>\n<li><b>allowEmptyFiles</b> (boolean, default false)\nBestimmt, ob leere Dateien hochgeladen werden können</li>\n<li><b>minFileSize</b> (number, default 1)\nKleinste erlaubte Dateigröße in Byte. Für leere Dateien muss auch dieser Wert auf 0 gesetzt werden.</li>\n<li><b>maxFiles</b> (number, default Infinity)\nMaximal erlaubte Anzahl hochgeladener Dateien.</li>\n<li><b>maxFileSize</b> (number,  default 200 * 1024 * 1024)\nMaximal erlaubte Dateigröße einer einzelnen Datei in Byte.</li>\n<li><b>maxTotalFileSize</b> (number, default maxFileSize)\nMaximal erlaubte gesamte Dateigröße.</li>\n<li><b>maxFields</b> (number, default 1000)\nMaximal erlaubte Anzahl an Formularfeldern</li>\n<li><b>maxFieldsSize</b> (number, default 20 * 1024 * 1024)\nMaximal erlaubte Speicher, der durch die Formularfelder belegt werden darf.</li>\n<li><b>hashAlgorithm</b> (string | false, default false)\nBestimmt, ob bzw. welcher Algorithmus zur Bestimmung von Checksummen für hochgeladene Dateien verwendet werden soll.</li>\n<li><b>fileWriteStreamHandler</b> (function, default null)\nPer default wird eine Datei einfach ins Dateisystem geschrieben. Die handler-Funktion sollte eine Instanz eines Writable-Streams zurückgeben, der die hochgeladenen Dateidaten empfängt. Wenn Sie die hochgeladene Datei in andere Arten von Cloud-Speichern (AWS S3, Azure Blob-Speicher, Google Cloud-Speicher) oder private Dateispeicher schreiben möchten, ist dies die richtige Option für Sie.</li>\n<li><b>filename</b> (function, default undefined)\nEine Funktion, die den neuen Dateinamen bestimmt, den die hochgeladene Datei bekommt. Die Funktion muss einen String zurückliefern.</li>\n<li><b>filter</b> (function - default Funktion, die immer true zurückliefert)\nFunktion, um hochgeladene Dateien zu filtern. Muss ein Boolean zurückliefern.</li>\n<li><b>createDirsFromUploads</b> (boolean, default false)\nBestimmt, ob ganze Ordner hochgeladen werden dürfen</li>\n</ul>"},{"type":"code","crDate":1694605242355,"chDate":1694605250882,"text":"server.post('/upload', (req, res) => {\n let form = formidable({\n  uploadDir: 'public/uploads/',\n  keepExtensions: true\n })\n\n})"},{"type":"paragraph","crDate":1694604691635,"chDate":1694605310928,"text":"Wenn das formidable-Objekt angelegt ist, muss noch die Verarbeitung des Formulars vorbereitet werden. \nDie <i>parse()</i>-Methode bekommt zwei Parameter übergeben: \nDer erste ist die Quelle für die Formulardaten, üblicherweise ist dies das <i>Request</i>-Objekt.\nDer zweite Parameter ist die Callback-Funktion, in der nach der Verarbeitung abschließende Arbeitsschritte gemacht werden können.\nDies kann sein, dass die hochgeladenen Dateien umbenannt, verschoben oder sonstwie manipuliert werden. Informationen bzgl. der Dateien können abgelegt werden, die Antwort an den Client kann gesendet werden, etc."},{"type":"code","crDate":1694605171441,"chDate":1694605202854,"text":"server.post('/upload', (req, res) => {\n let form = formidable({\n  uploadDir: 'public/uploads/',\n  keepExtensions: true\n })\n\n form.parse(req, (err, fields, files) => {\n  if (err) {\n   console.log(err);\n   res.json({\n    status: 'err'\n   })\n  } else {\n   console.log(fields);\n   console.log(files);\n   res.json({\n    status: 'ok'\n   })\n  }\n })\n})"},{"type":"links","crDate":1694602180958,"chDate":1694602180958,"links":[{"title":"Formidable auf ","url":"https://www.npmjs.com/package/formidable"}]}]}