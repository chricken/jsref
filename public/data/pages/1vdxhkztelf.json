{"content":[{"type":"paragraph","crDate":1720180138789,"chDate":1720183817174,"text":"Ein Generator ist eine spezielle Funktion, die dem Erzeugen von Iteratoren dient.\nEr kommt immer dann zum EInsatz, wenn ein Iterator nicht auf einer vorhandenen Datensammlung fußt. \nEinfache Beispiele wären ein Zähler, die jeweils nächste Primzahl, jede andere Zahlenfolge oder auch eine eigene Implementation, um ein Array zu iterieren..\nUm die Funktion als Generator zu verwenden muss der <i>function*</i>-Befehl verwendet werden. Der * ist zu beachten, dieser definiert den Generator als solchen.\nDer Generator erzeugt einen <i>Iterator</i>, welcher die <i>next()</i>-Methode zur Verfügung stellt (siehe <a href=\"/?id=eym9psv2uyg\">Iteratoren</a>)."},{"type":"subheader","crDate":1720183207866,"chDate":1720183211103,"text":"yield"},{"type":"paragraph","crDate":1720180952761,"chDate":1720183954078,"text":"Sobald die next()-Methode des Iterators aufgerufen wird, läuft der Code in der Funktion los bis zum ersten <i>yield</i>.\nDieses gibt einen Wert aus der Funktion heraus, ähnlich einem return. Allerdings beendet yield die Funktion nicht, sondern sondern pausiert nur, bis die next()-Methode ein weiteres Mal aufgerufen wird.\nDurch eine (Endlos-)Schleife kann yield beliebig oft aufgerufen werden."},{"type":"code","crDate":1720183968829,"chDate":1720184009766,"text":"function* count(num = 1, inkrement = 1) {\n while (true) {\n  yield num;\n  num += inkrement;\n }\n}\n\nconst iterCount = count(5, 2);\n\nconst btn = document.querySelector('#btnNext');\nbtn.addEventListener('click', () => {\n let next = iterCount.next();\n console.log(next.value);\n})"},{"type":"paragraph","crDate":1720184021714,"chDate":1720185644611,"text":"Der Generator kann natürlich beliebig oft aufgerufen werden und liefert jedes Mal einen neuen, von den anderen Iteratoren unabhängigen Iterator."},{"type":"paragraph","crDate":1720185781247,"chDate":1720185978331,"text":"Natürlich kann der Generator auch komplexer sein.\nHier ein Beispiel, das eine Primzahlen nach der anderen zurückgibt."},{"type":"code","crDate":1720185984414,"chDate":1720186189962,"text":"// Funktion, um eine Zahl auf prim zu prüfen\nconst checkIfPrime = num => {\n for (let i = 2; i ** 2 <= num; i++) {\n  if (!(num % i)) return false;\n }\n return true;\n}\n\nfunction* genPrimes(num = 2) {\n while(true){\n  if(checkIfPrime(num)) yield num;\n  num++;\n }\n}\n\nconst iterPrime = genPrimes(2e9);\n\nconst btn = document.querySelector('#btnNext');\nbtn.addEventListener('click', () => {\n let next = iterPrime.next();\n console.log(next.value);\n})"}]}