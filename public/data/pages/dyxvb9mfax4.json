{"content":[{"type":"paragraph","crDate":1691499388525,"chDate":1691499696711,"text":"Das Erzeugen von DOM-Elementen ist ein essenzieller Teil von Javascript. Damit ist es problemlos möglich, Elemente zur Laufzeit zu erzeugen. Vielleicht, um Content darzustellen, vielleicht um Zusatzinfo zu zeigen.\nGanze Frameworks werden um diese Funktion herum gebaut und ermöglichen es, sehr dynamische Webseiten zu erzeugen. \nTatsächlich funktioniert auch jsreferenz.de auf Basis der <i>createElement()</i>-Methode. Schau mal in den Quelltext."},{"type":"subheader","crDate":1691499716373,"chDate":1691499793640,"text":"createElement()"},{"type":"paragraph","crDate":1691499713408,"chDate":1691501827062,"text":"Die <i>createElement()</i>-Methode gibt ein neues DOM-Element zurück. Als Parameter wird ein String übergeben, der den Typ definiert.\nDieser String muss nicht unbedingt ein vorgegebener HTML-Typ sein. Der Tagname kann auch ausgedacht sein, in dem Falle sind für den neu erfundenen Tagnamen keine CSS-Angaben hinterlegt.\nDas erzeugte Element ist dann nicht automatisch auf der Webseite sichtbar sondern wird üblicherweise in eine Variable gespeichert.\nDann wird das Element mit weiteren Informationen versorgt, z.B. Inhalt, Klassen, ID, Linkziel, etc.\nSchließlich wird das neu erzeugte Element in ein Parent-Element eingebunden."},{"type":"code","crDate":1691502332522,"chDate":1691502346729,"text":"const parent = document.querySelector('#first');\nconst content = 'Hallo Welt.';\n\nconst newEl = document.createElement('div');\nnewEl.innerHTML = content;\nnewEl.className = 'myClass';\n\nparent.append(newEl);"},{"type":"paragraph","crDate":1691502326043,"chDate":1691502502086,"text":"In einem weiteren Beispiel soll ein ganzes Array an Strings in DOM-Elemente geschrieben werden.\nAls Tagname soll ein nicht-Standard-Name verwendet werden."},{"type":"code","crDate":1691503143054,"chDate":1691503992067,"text":"// Eltern-Element auswählen\nconst parent = document.querySelector('#first');\n\n// Array mit Text-Inhalten\nlet contents = [\n    \"JavaScript wird in der Browser-Engine eines Web-Browsers ausgeführt.\",\n    \"JavaScript kann Elemente erstellen, die Benutzerinteraktion ermöglichen.\",\n    \"JavaScript kann Web-Seiten personalisieren und interaktiver machen.\",\n    \"JavaScript ist eine wichtige Sprache für Webentwickler.\"\n]\n\n// Array mit den DOM-Elementen für spätere Verwendung sichern.\nconst elements = contents.map(content => {\n    const newEl = document.createElement('el');\n    newEl.innerHTML = content;\n    newEl.className = 'myClass';\n    \n    parent.append(newEl);\n})"},{"type":"subheader","crDate":1691503188094,"chDate":1691503200540,"text":"HTML-Quellcode"},{"type":"paragraph","crDate":1691503209628,"chDate":1691503530204,"text":"Ein weniger gebräuchlicher Weg zum Erzeugen von DOM-Elementen ist es, den dazugehörigen Quellcode in ein Elternelement zu schreiben.\nDies erscheint wie ein schneller und einfacher Weg, hat aber einige Nachteile gegenüber dem oben gezeigten Weg. \nZum Beispiel endet dieser Weg schnell in unleserlichem Code.\nAußerdem kann mit der createElement()-Methode wesentlich strukturierter auf vorhandene Informationen zurückgegriffen werden."},{"type":"code","crDate":1691503704033,"chDate":1691503718783,"text":"// Eltern-Element auswählen\nconst parent = document.querySelector('#first');\n\n// HTML-Code des neuen Elementes\nlet newContent = '&lt;div>';\nnewContent += 'Hallo Welt';\nnewContent += '&lt;/div>';\n\n// Neues Element einhängen\nparent.innerHTML += newContent;"}]}