{"content":[{"type":"paragraph","crDate":1716383190515,"chDate":1716384054683,"text":"In einem komplexen Projekt müssen viele Komponenten miteinander Daten austauschen. Das können die Elemente alle untereinander tun, was sehr schnell sehr kompliziert werden würde. Daher ist es erstrebenswert, eine zentrale Schnittstelle für die Daten eines Programmes zu erzeugen. Eine sogenannte <i>Single Source of Truth</i>.\nDas sog. <i>Mediator</i>-Pattern stellt genau diese Idee dar. Im einfachsten Fall ist dies ein Modul, das alle Informationen enthält und jedem anderen Modul zur Verfügung stellt."},{"type":"paragraph","crDate":1716386174955,"chDate":1716387602326,"text":"Im Beispiel dient die Datei <i>settings,js</i> als Mediator. Es wird ein Objekt exportiert, das die Daten enthält.\nDieses Objekt wird von den anderen Modulen verwendet, um die Daten zu verändern und darauf zuzugreifen. So hantieren alle Module immer mit den selben Daten."},{"type":"code","crDate":1716387605929,"chDate":1716388152969,"text":"// mediator.js\n\nconst mediator = {\n    fuhrpark:[]\n}\n\nexport default mediator;"},{"type":"code","crDate":1716387669795,"chDate":1716387702405,"text":"// index.js\n\nimport render from './render.js';\nimport creatorCar from './creatorcar.js';\n\ncreatorCar('VW', 'id3')\ncreatorCar('Hyundai', 'i20')\ncreatorCar('Toyota', 'Corolla')\n\nrender.fuhrpark();"},{"type":"code","crDate":1716387825103,"chDate":1716388169097,"text":"// creatorcar.js\n\nimport mediator from './mediator.js';\n\nclass Car {\n constructor(marke, modell) {\n  Object.assign(this, { marke, modell });\n }\n}\n\nexport default (marke, modell) => {\n mediator.fuhrpark.push(new Car(marke, modell));\n}"},{"type":"code","crDate":1716387915765,"chDate":1716388189860,"text":"// render.js\n\nimport mediator from './mediator.js';\n\nconst render = {\n fuhrpark(){\n  mediator.fuhrpark.forEach(car => {\n   console.log(car)\n  })\n }\n}\n\nexport default render;"}]}