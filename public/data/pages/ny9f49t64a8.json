{"content":[{"type":"paragraph","crDate":1715863877231,"chDate":1715864954705,"text":"Das Prototype-Pattern dreht sich um den Wunsch, dass mehrere (oder sehr viele) Objekte desselben Typs eine Information teilen, statt dass jede Instanz des Objektes die Information enthält. Dadurch kann bei großen Datenmengen viel Speicher gespart werden.\nKlassen verhalten sich schon so, dass sie die Methoden im Prototype ablegen. Für einfache Attribute gilt dies nicht.\nHier wird auf die <i>create()</i>-Methode des <i>Object</i>-Constructors zurückgegriffen.\nEin normales Objekt enthält eine Methode, in der per <i>Object.create()</i> ein neues Objekt erzeugt wird. Dieses neue Objekt enthält das Ausgangsobjekt als Prototypen. Das bedeutet, dass jede Information, die im Objekt unbekannt ist, aus dem Prototypen geladen wird.\nDamit liegen diese Informationen nur in einem Prototypen-Objekt und nicht mehr in allen Instanzen.\nAls Nebeneffekt wird auch die Methode zum Erzeugen einer neuen Instanz weitergegeben. Es kann also auch auf Basis der neuen Instanz eine weitere Instanz erzeugt werden, die die vorher erzeugte Instanz als Prototypen enthält."},{"type":"code","crDate":1715864486628,"chDate":1715864633984,"text":"let Orc =  {\n health: 120,\n strength: 50,\n speed: 5,\n imgURL: '/path/to/file.png',\n new(){\n  return Object.create(this);\n }\n}\n\nlet myOrc = Orc.new();\nlet yourOrc = Orc.new();\n\nconsole.log(myOrc);\nconsole.log(myOrc.health);\nconsole.log(yourOrc.health);\n                \nmyOrc.health -= 30;\n                \nconsole.log(myOrc);\nconsole.log(myOrc.health);\nconsole.log(yourOrc.health);\n\nlet thirdOrc = myOrc.new();\n\nconsole.log(thirdOrc);\nconsole.log(thirdOrc.health);"}]}