{"content":[{"type":"paragraph","crDate":1754396733620,"chDate":1754397034816,"text":"Utility Types ermöglichen es, neue Typen aus bestehenden Typen abzuleiten. Dadurch kann man neue Typen bereits erstellte, womöglich komplexe Typen wiederverwenden, ohne sie neu schreiben zu müssen. \nDadurch werden redundante Arbeiten und Übertragungsfehler vermieden.\n<i>Typen</i> sind dabei vor allem jene, die aus <i>Interfaces</i> stammen."},{"type":"subheader","crDate":1754397076624,"chDate":1754397079559,"text":"partial"},{"type":"paragraph","crDate":1754397074170,"chDate":1754397111358,"text":"Macht <i>alle</i> Attribute des Types <i>optional</i>."},{"type":"code","crDate":1754397117934,"chDate":1754397266010,"text":"interface User {\n name: string;\n age: number;\n}\n\ntype PartialUser = Partial<User>;\n\nconst myUser: PartialUser = {\n name: \"Max\",\n}\n\nconsole.log(myUser)"},{"type":"subheader","crDate":1754397288257,"chDate":1754397290624,"text":"Required"},{"type":"paragraph","crDate":1754397293306,"chDate":1754397329741,"text":"Macht alle Eigenschaften eines Typs erforderlich."},{"type":"code","crDate":1754397480965,"chDate":1754397489974,"text":"interface User {\n name: string;\n age?: number;\n}\n\ntype FullUser = Required<User>;\n\nconst myUser: FullUser = {\n name: \"Max\",\n age: 25\n}\n\nconsole.log(myUser)"},{"type":"subheader","crDate":1754397522849,"chDate":1754397532705,"text":"Readonly"},{"type":"paragraph","crDate":1754397535830,"chDate":1754397616274,"text":"Macht alle Eigenschaften eines Typs schreibgeschützt"},{"type":"code","crDate":1754397778132,"chDate":1754398461902,"text":"interface User {\n name: string;\n age: number;\n}\n\ntype ImmutableUser = Readonly<User>;\n\nconst myUser: ImmutableUser = {\n name: \"Max\",\n age: 25\n}\n\nmyUser.name = \"Maxi\";   // -> Fehlermeldung\nconsole.log(myUser)"},{"type":"subheader","crDate":1754397821135,"chDate":1754397826545,"text":"Pick"},{"type":"paragraph","crDate":1754397822894,"chDate":1754398075401,"text":"Erstellt einen Typ, indem bestimmte Eigenschaften aus einem anderen Typen ausgewählt werden.\nDie gewünschten Eigenschaften werden mit <i>|</i> voneinander getrennt."},{"type":"code","crDate":1754397817531,"chDate":1754398433414,"text":"interface User {\n name: string;\n age: number;\n address: string;\n email: string;\n}\n\ntype PartialUser = Pick<User, 'name' | 'age'>;\n\nconst myUser: PartialUser = {\n name: \"Max\",\n age: 25\n}\n\nconsole.log(myUser)"},{"type":"subheader","crDate":1754398128278,"chDate":1754398131914,"text":"Omit"},{"type":"paragraph","crDate":1754398152836,"chDate":1754398506033,"text":"Erstellt einen Typ, indem bestimmte Eigenschaften aus einem anderen Typ ausgeschlossen werden.\nDie gewünschten Eigenschaften werden mit <i>|</i> voneinander getrennt."},{"type":"code","crDate":1754398516011,"chDate":1754398558528,"text":"interface User {\n name: string;\n age: number;\n address: string;\n email: string;\n}\n\ntype PartialUser = Omit<User, 'address' | 'email'>;\n\nconst myUser: PartialUser = {\n name: \"Max\",\n age: 25\n}\n\nconsole.log(myUser)"},{"type":"subheader","crDate":1754398566358,"chDate":1754398566358,"text":""}]}