{"content":[{"type":"paragraph","crDate":1713948901046,"chDate":1713960852553,"text":"Drag and Drop (kurz <i>DnD</i>) ist ursprünglich gedacht als Möglichkeit, um Dateien in den Browser ziehen zu können.\nIn diesem Rahmen wird es darum gehen, DOM-Elemente zu verschieben und dadurch in einem Programm etwas auszulösen.\nDas kann das Verschieben eines Datensatzes sein, das Verbinden von Komponenten oder eine beliebige andere Aktion.\nDer DnD-Vorgang verläuft im Allgemeinen in drei Schritten:\n<ol><li>Anfassen eines Elementes</li>\n<li>Behandeln von Bewegungen</li>\n<li>Loslassen des Objektes</li></ol>"},{"type":"paragraph","crDate":1713961166371,"chDate":1713963448546,"text":"Für das folgende Beispiel wird der HTML-Code verwendet.\nEr enthält den &lt;main>-Container. In diesem befinden sich &lt;section>-Elemente mit der Eigenschaft draggable. Diese können verschoben werden.\nAndere Elemente tragen die Klasse <i>putHere</i>. Hier sollen die Elemente hin kopiert werden können."},{"type":"code","crDate":1713961197508,"chDate":1713968227418,"text":"&lt;main>\n &lt;h3>From here&lt;/h3>\n &lt;section draggable=\"true\"> abc &lt;/section>\n &lt;section draggable=\"true\"> def &lt;/section>\n&lt;/main>\n&lt;div class=\"putHere\">\n &lt;h3>Put Here&lt;/h3>\n&lt;/div>\n&lt;div class=\"putHere\">\n &lt;h3>Put Here&lt;/h3>\n&lt;/div>"},{"type":"subheader","crDate":1713960826018,"chDate":1713960848376,"text":"Anfassen eines Elementes"},{"type":"paragraph","crDate":1713961063880,"chDate":1713967219184,"text":"Durch die Eigenschaft <i>draggable=\"true\"</i> kann ein Element angefasst und bewegt werden. Es kann über dafür vorbereitete Elemente geschoben werden und dann dafür vorbereitete Funktionen auslösen. \nDafür muss das Element zunächst einen Eventlistener bekommen, um bewegt werden zu können.\nIm Beispiel wird in eine globale Variable gespeichert, welches Element verschoben wird.\nBeim Ziehen wird übrigens ein Proxy-Bild des Elementes angezeigt. Dieses kann über das ersetzt werden durch ein benutzerdefiniertes Bild."},{"type":"code","crDate":1713964521199,"chDate":1713967173494,"text":"let dragMe = false;\n\nconst handleStartDrag = evt => {\n let img = document.createElement('img');\n img.src = '/assets/img/dragimg.png';\n\n evt.dataTransfer.setDragImage(img, 0, 0);\n dragMe = evt.target;\n}\n\n[...document.querySelectorAll('[draggable=\"true\"]')].forEach(el => {\n el.addEventListener('dragstart', handleStartDrag);\n el.addEventListener('drag', handleDrag);\n})"},{"type":"subheader","crDate":1713960964457,"chDate":1713960983645,"text":"Behandeln von Bewegungen"},{"type":"paragraph","crDate":1713961095474,"chDate":1713967806316,"text":"Der <i>dragover</i>-Event und der <i>dragleave</i>-Event reagieren darauf, dass ein Element auf ein anderes geschoben oder von einem herunter geschoben wird. Hiermit kann z.B. ein Ablageplatz hervorgehoben werden.\nAußerdem ist die Ausführung von <i>evt.preventDefault()</i> notwendig, um ddas Element fallenlassen zu können."},{"type":"code","crDate":1713967667374,"chDate":1713968178387,"text":"const handleDragEnter = evt => {\n evt.preventDefault();\n evt.currentTarget.classList.add('dragOver');\n}\n\nconst handleDragOut = evt => {\n evt.preventDefault();\n evt.currentTarget.classList.remove('dragOver');\n}\n\ndocument.querySelectorAll('.dropHere').forEach(el => {\n el.addEventListener('dragover', handleDragEnter);\n el.addEventListener('dragleave', handleDragOut);\n})"},{"type":"subheader","crDate":1713961042328,"chDate":1713961052458,"text":"Loslassen des Objektes"},{"type":"paragraph","crDate":1713961098646,"chDate":1713968089944,"text":"Schließlich muss das Element losgelassen werden können. Dazu wird auf dem Ziel der <i>drop</i>-Event ausgeführt. \nDieser führt dann die gewünschte Aktion aus. Im Beispiel wird das Element in das Ziel hinein verschoben."},{"type":"code","crDate":1713968051462,"chDate":1713968207991,"text":"const handleDrop = () => {\n if (dragMe) {\n  evt.currentTarget.append(dragMe);\n  dragMe = false;\n }\n evt.currentTarget.classList.remove('dragOver');\n}\n\ndocument.querySelectorAll('.dropHere').forEach(el => {\n el.addEventListener('dragover', handleDragEnter);\n el.addEventListener('dragleave', handleDragOut);\n el.addEventListener('drop', handleDrop);\n})"}]}