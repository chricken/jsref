{"content":[{"type":"paragraph","crDate":1686058400186,"chDate":1686058599979,"text":"Die <i>sort()</i>-Methode ist eine <i>destruktive</i> Methode, die es ermöglicht, ein Array zu sortieren.\nDas Standard-Verhalten ist, dass das Array alphanummerisch (nach der ASCII-Tabelle) sortiert wird."},{"type":"code","crDate":1686058973128,"chDate":1686059054337,"text":"'use strict';\n\nconst myArray = [\n    'Max Mustermann',\n    'Birgit Beispiel',\n    'Miriam Musterfrau',\n    'Erich Exempel',\n];\n\nmyArray.sort();\n\nconsole.log(myArray);  // -> [\n                       //     'Birgit Beispiel',\n                       //     'Erich Exempel',\n                       //     'Max Mustermann',\n                       //     'Miriam Musterfrau'\n                       //    ] "},{"type":"subheader","crDate":1686059350811,"chDate":1686059357362,"text":"Nicht-Strings sortieren"},{"type":"paragraph","crDate":1686059370380,"chDate":1686059784048,"text":"Während die Sortierung von Strings sehr einfach von der Hand geht, ist das Sortieren von Zahlen oder anderen Elementen eine ganz andere Sache.\n<i<sort()</i> ist eine Higher-Class-Methode, die eine Funktion als Parameter annehmen kann. An diese Callback-Funktion werden Paare von nebeneinander liegenden Slots übergeben.\nWenn die Callback-Funktion eine <i>positive</i> Zahl zurückgibt, dann tauschen die Slots ihre Position. Bei einem <i>negativen</i> Rückgabewert bleiben die Slots in ihrer Reihenfolge. 0 wird wie eine negative Zahl behandelt."},{"type":"code","crDate":1686059361935,"chDate":1686059893706,"text":"const myArray = [21, 54, 87, 98, 65, 32];\nmyArray.sort((a, b) => a - b);\nconsole.log(myArray);  // -> [ 21, 32, 54, 65, 87, 98 ]"},{"type":"paragraph","crDate":1686060086782,"chDate":1686060110529,"text":"Auch Objekte lassen sich nach einem bestimmten Attribut sortieren;"},{"type":"code","crDate":1686060079892,"chDate":1686060303379,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nmyArray.sort((a,b) => a.age - b.age);\n\nconsole.log(myArray); // -> [\n                       //    { name: 'Birgit Beispiel', age: 14 },\n                       //    { name: 'Max Mustermann', age: 17 },\n                       //    { name: 'Miriam Musterfrau', age: 18 },\n                       //    { name: 'Erich Exempel', age: 32 }\n                       //   ]"},{"type":"code","crDate":1686060187709,"chDate":1686060326400,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nmyArray.sort((a,b) => (a.name < b.name) ? -1 : 1);\n\nconsole.log(myArray);  // -> [\n                       //     { name: 'Birgit Beispiel', age: 14 },\n                       //     { name: 'Erich Exempel', age: 32 },\n                       //     { name: 'Max Mustermann', age: 17 },\n                       //     { name: 'Miriam Musterfrau', age: 18 }\n                       //    ]"},{"type":"subheader","crDate":1686060447449,"chDate":1686060453248,"text":"Rückgabe"},{"type":"paragraph","crDate":1686060455808,"chDate":1686060521850,"text":"Die sort()-Methode liefert das Ergebnis auch als Rückgabewert zurück. Das erlaubt es z.B., eine <i>sort()</i>-Methode auch in einem <i>Chaining</i> zu verwenden."},{"type":"code","crDate":1686060569600,"chDate":1686060610964,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nlet result = myArray\n    .sort((a,b) => a.age - b.age)\n    .filter(val => val.age >= 18);\n\nconsole.log(result);  // -> [\n                      //     { name: 'Miriam Musterfrau', age: 18 },\n                      //     { name: 'Erich Exempel', age: 32 }\n                      //    ]"}]}