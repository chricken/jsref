{"content":[{"type":"paragraph","crDate":1754551742837,"chDate":1754552327812,"text":"Auf einer Webseite werden häufig Inhalte aus Datensammlungen erzeugt. Ein effektiver Weg, dies zu erledigen, sind Listen.\n<i>Listen</i> sind vereinfacht gesagt Arrays aus Komponenten, die aus anderen Arrays erzeugt werden.\nDas wird schnell und effektiv über eine Funktion erledigt."},{"type":"code","crDate":1754552418441,"chDate":1754557761166,"text":"const App = () => {\n let [contents] = useState(['Merkur', 'Venus', 'Erde', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptun']);\n\n const createElements = () => \n  contents.map((text, index) => &lt;Content text={text} key={index}/>);\n \n return (\n  &lt;div className=\"App\">{createElements()}&lt;/div>\n );\n}\n\nconst Content = ({text}) => {\n return (\n  &lt;div className=\"content\">\n   &lt;p>{text}&lt;/p>\n  &lt;/div>\n )\n}"},{"type":"subheader","crDate":1754552543380,"chDate":1754552551714,"text":"key-Attribut"},{"type":"paragraph","crDate":1754553532285,"chDate":1754557735683,"text":"Dabei ist das key-Attribut hervorzuheben.\nIn Listen muss es immer angegeben werden und bei jeder Änderung sollte auch das key-Attribut aktualisiert werden. \nDamit ist die Lösung oben nicht optimal und sollte nur als letzter Ausweg gesehen werden. Der Index kann verwendet werden, wenn die Daten sich ohnehin nicht ändern. \nDie Verwendung des Array-Index als Key führt zu Problemen, wenn:\n<ul>\n<li><b>Elemente hinzugefügt oder entfernt werden: </b>Bei Änderungen in der Reihenfolge stimmen die Indizes nicht mehr mit den ursprünglichen Elementen überein</li>\n<li><b>Elemente umsortiert werden: </b>Beim Sortieren ändern sich die Indizes, aber die Elemente bleiben dieselben</li>\n<li><b>Statusverwaltung in Komponenten: </b>Komponenten mit State können unerwartetes Verhalten zeigen, wenn ihre Keys sich ändern</li>\n</ul>\nFalls sich die Daten ändern, ist eine bessere Lösung angebracht. \nHier kann z.B. eine ID aus den Nutzdaten verwendet werden. Dadurch ist sichergestellt, dass das Element, das einen Datensatz darstellt, sich auch auf diesen Datensatz bezieht. Egal, wie die Liste umsortiert, erweitert oder verkürzt wird.\n"},{"type":"code","crDate":1754553691291,"chDate":1754557756528,"text":"const App = () => {\n const [contents] = useState([\n  {id: 'jq89rj734rv7', name: 'Merkur'},\n  {id: 'fr92hd847ch3', name: 'Venus'},\n  {id: 'kl56po234qz8', name: 'Erde'},\n  {id: 'mn67rt125sv9', name: 'Mars'}\n ]);\n\n const createElements = () =>\n  contents.map(planet => &lt;Content planet={planet} key={planet.id}/>);\n \n return (\n  &lt;div className=\"App\">{createElements()}&lt;/div>\n );\n}\n\nconst Content = ({planet}) => {\n return (\n  &lt;div className=\"content\">\n   &lt;p>Name: {planet.name}&lt;/p>\n  &lt;/div>\n )\n}"}]}