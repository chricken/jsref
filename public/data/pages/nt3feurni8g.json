{"content":[{"type":"subheader","crDate":1714053094792,"chDate":1714053096079,"text":"Scrollposition ändern"},{"type":"paragraph","crDate":1714053112826,"chDate":1714053113760,"text":"Die Eigenschaften <i>scrollTop</i> und <i>scrollLeft</i> können auch überschrieben werden.\nDas ermöglicht eine sehr direkte Änderung der Scrollposition. \nIm Beispiel unten scrollt die Webseite bei jedem Klick an eine zufällige Position."},{"type":"code","crDate":1714053136719,"chDate":1714053137662,"text":"const handleClick = () => {\n let doc = document.documentElement;\n let max = doc.scrollHeight - doc.clientHeight;\n let rand = Math.round(Math.random() * max);\n doc.scrollTop = rand;\n}\ndocument.querySelector('#btnScroll').addEventListener('click', handleClick);"},{"type":"subheader","crDate":1714053165860,"chDate":1714053610010,"text":"Um Pixel-Wert scrollen"},{"type":"paragraph","crDate":1714053174897,"chDate":1714053177657,"text":"Die Methode <i>scrollBy()</i> scrollt <i>um</i> einen gegebenen Wert.\nDiese Methode kann entweder zwei Zahlen entgegennehmen, welche die X/Y-Koordinaten darstellen.\nOder die Methode bekommt ein Objekt übergeben, womit das Verhalten gesteuert wird. Das Objekt kann die folgenden Attribute enthalten:\n<ul>\n<li><b>top</b>\nGewünschte vertikale Scrollposition \n</li>\n<li><b>left</b>\nGewünschte horizontale Scrollposition \n</li>\n<li><b>behavior</b>\n<i>smooth</i> lässt den Bildschirm sanft scrollen\n<i>instant</i> lasst den Bildschirm an die Position springen\n<i>auto</i> steuert das Verhalten über CSS-Eigenschaft 'scroll-behavior'\nHinweis: Diese Angaben funktionieren nur unzuverlässig.\n</li>\n</ul>"},{"type":"code","crDate":1714053322961,"chDate":1714053392044,"text":"const handleClick = () => {\n let doc = document.documentElement;\n document.documentElement.scrollBy({\n  top: 100,  \n  behavior: 'smooth'\n });\n}\n\ndocument.querySelector('#btnScroll')\n .addEventListener('click', handleClick);"},{"type":"subheader","crDate":1714053401994,"chDate":1714053617049,"text":"Zu Pixel-Wert scrollen"},{"type":"paragraph","crDate":1714053453350,"chDate":1714053454370,"text":"Neben dem direkten Beschreiben der Scrollposition kann auch die <i>scrollTo()</i>-Methode verwendet werden. \nDiese Methode kann entweder zwei Zahlen entgegennehmen, welche die X/Y-Koordinaten darstellen.\nOder die Methode bekommt ein Objekt übergeben, womit das Verhalten gesteuert wird. Das Objekt kann die folgenden Attribute enthalten:\n<ul>\n<li><b>top</b>\nGewünschte vertikale Scrollposition \n</li>\n<li><b>left</b>\nGewünschte horizontale Scrollposition \n</li>\n<li><b>behavior</b>\n<i>smooth</i> lässt den Bildschirm sanft scrollen\n<i>instant</i> lasst den Bildschirm an die Position springen\n<i>auto</i> steuert das Verhalten über CSS-Eigenschaft 'scroll-behavior'\nHinweis: Diese Angaben funktionieren nur unzuverlässig.\n</li>\n</ul>"},{"type":"code","crDate":1714053221319,"chDate":1714053224018,"text":"const handleClick = () => {\n let doc = document.documentElement;\n let max = doc.scrollHeight - doc.clientHeight;\n let rand = Math.round(Math.random() * max);\n\n document.documentElement.scrollTo({\n  top: rand,\n  behavior: 'smooth'\n });\n}\n\ndocument.querySelector('#btnScroll')\n .addEventListener('click', handleClick);"},{"type":"subheader","crDate":1714053479776,"chDate":1714053482095,"text":"Zu Element scrollen"},{"type":"paragraph","crDate":1714053498089,"chDate":1714053645172,"text":"Neben der reinen Manipulation der Scrollposition kann auch direkt zu einem bestimmten DOM-Element gescrollt werden.\nDazu wird zunächst das DOM-Element benötigt. Schließlich kann die <i>scrollIntoView()</i>-Methode aufgerufen werden.\nDie Methode versteht ein Options-Objekt, um das Verhalten zu steuern. Die möglichen Settings sind:\n<ul>\n<li><b>behavior</b>\n<i>smooth</i> lässt den Bildschirm sanft scrollen\n<i>instant</i> lasst den Bildschirm an die Position springen\n<i>auto</i> steuert das Verhalten über CSS-Eigenschaft 'scroll-behavior'\nHinweis: Diese Angaben funktionieren nur unzuverlässig.\n</li>\n<li><b>block</b>\nSteuert die vertikale Positionierung des Elementes.\n<i>start</i> Oberkante des Elementes scrollt an die Oberkante des Viewport.\n<i>center</i> Mitte des Elementes scrollt an die Mitte des Viewport.\n<i>end</i> Unterkante des Elementes scrollt an die Unterkante des Viewport.\n<i>nearest</i> Wählt automatisch den Wert von oben, der am dichtesten ist.\nHinweis: Diese Angaben funktionieren nur unzuverlässig.\n</li>\n<li><b>inline</b>\nSteuert die horizontale Positionierung des Elementes.\nDie Optionen sind dieselben wie bei block.\n</li>\n</ul>"},{"type":"code","crDate":1714053511640,"chDate":1714053513369,"text":"const handleClick = () => {\n const el = document.querySelector('#scrollHere');\n el.scrollIntoView({\n  behavior: 'smooth'\n });\n}\n\ndocument.querySelector('#btnScroll')\n .addEventListener('click', handleClick);"}]}