{"content":[{"type":"paragraph","crDate":1684933306439,"chDate":1685446967610,"text":"Hier ist eine Übersicht über die verschiedenen Datentypen zu finden.\nDie meisten Datentypen bieten auch Methoden, die auf die Werte angewendet werden können. Hier werden nur die relevanten Möglichkeiten vorgestellt, die auch in der Praxis eine große Relevanz haben. Eine vollständige Zusammenfassung findet sich auf Quellen wie <a href=\"https://developer.mozilla.org/en-US/?retiredLocale=de\">MDN</a>\nDatentypen sind in zwei grundlegende Arten von Werten aufgegliedert. "},{"type":"subheader","crDate":1684936285347,"chDate":1684936289348,"text":"Primitives"},{"type":"paragraph","crDate":1684936291189,"chDate":1684936675910,"text":"Ein Primitive ist eine Variable, in der nur eine einzelne Information abgelegt werden kann. \nBeim Kopieren eines Primitives wird immer der Wert an eine andere Stelle im Arbeitsspeicher kopiert und die Variable (Kopie) mit dieser Adresse im Speicher verknüpft (Copy-by-Value)."},{"type":"subheader","crDate":1685020228953,"chDate":1685020233792,"text":"Collections"},{"type":"paragraph","crDate":1685020281198,"chDate":1685021012782,"text":"Ein Collection-Datentyp kann mehrere Werte enthalten. Da Javascript keine strenge Typisierung fordert, kann in jeden Slot ein Wert eines beliebigen Datentyps gespeichert werden.\nAußerdem werden alle Collection-Datentypen per Copy-by-Reference kopiert."},{"type":"subheader","crDate":1685021827122,"chDate":1685021831157,"text":"Function"},{"type":"paragraph","crDate":1685021834513,"chDate":1685021983860,"text":"Funktionen werden in JS als sog. First-Class-Citizens behandelt. D.h., sie können ebenso wie alle anderen Datentypen kopiert, als Parameter übertragen und von anderen Funktionen zurückgegeben werden. Funktionen werden als Referenz kopiert."}]}