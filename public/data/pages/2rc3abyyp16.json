{"content":[{"type":"paragraph","crDate":1684933306439,"chDate":1684933726945,"text":"Um klar definieren zu können, was mit den im Programm gespeicherten Informationen gemacht werden kann, sind mehrere sog. Datentypen definiert worden.\nDa Javascript leicht zu erlernen sein soll, sind in JS nicht alle Datentypen abgebildet, die in anderen Sprachen verfügbar sind."},{"type":"header","crDate":1684936285347,"chDate":1684936289348,"text":"Primitives"},{"type":"paragraph","crDate":1684936291189,"chDate":1684936675910,"text":"Ein Primitive ist eine Variable, in der nur eine einzelne Information abgelegt werden kann. \nBeim Kopieren eines Primitives wird immer der Wert an eine andere Stelle im Arbeitsspeicher kopiert und die Variable (Kopie) mit dieser Adresse im Speicher verknüpft (Copy-by-Value)."},{"type":"subheader","crDate":1684936322776,"chDate":1684936326663,"text":"String"},{"type":"paragraph","crDate":1684936341711,"chDate":1684936983970,"text":"Eine Zeichenkette, d.h. eine Reihe hintereinanderliegender Zeichen, wird auch String genannt.\nSie dient dem Speichern von Texten oder codierten Informationen.\nFür mehr Informationen siehe Menü."},{"type":"subheader","crDate":1684936406610,"chDate":1684936410161,"text":"Number"},{"type":"paragraph","crDate":1684936411802,"chDate":1684936989296,"text":"In Javascript gibt es zum Speichern von Zahlen nur den Datentyp \"Number\". Dahinter verbirgt sich eine 16-stellige Fließkommazahl.\nFür mehr Informationen siehe Menü."},{"type":"subheader","crDate":1684936491740,"chDate":1684936496187,"text":"Boolean"},{"type":"paragraph","crDate":1684936498283,"chDate":1684936992111,"text":"Boolean kann nur eine von zwei möglichen Werten annehmen: True oder False. Damit lassen sich Logik, bedingte Anweisungen und Schleifen umsetzen.\nFür mehr Informationen siehe Menü."},{"type":"subheader","crDate":1684936552855,"chDate":1684936560534,"text":"Undefined"},{"type":"paragraph","crDate":1685018544975,"chDate":1685019784546,"text":"Undefined ist kein wirklicher Datentyp, kann aber als solcher behandelt werden.\nVielmehr wird der Wert undefined zurückgegeben, wenn eine Variable keinen Wert enthält. \nEin nicht vorhandener Wert kan auch keinen Datentyp haben. Dieser wird damit also als undefined angezeigt."},{"type":"subheader","crDate":1684936567555,"chDate":1684936573221,"text":"Null"},{"type":"paragraph","crDate":1685019388288,"chDate":1685019754972,"text":"Null steht für ein absichtliches Fehlen eines Wertes, im Gegensatz zu undefined, was meist unbeabsichtigt ist. Der Wert null wird bspw. zurückgegeben, wenn eine <i>document.querySelector()</i>-Operation nichts gefunden hat.\nLeider wird der Datentyp von null als <i>object</i> angezeigt, was mindestens irritierend ist. Manche Entwickler:innen halten das für einen Bug in Javascript."},{"type":"subheader","crDate":1684936585581,"chDate":1684936589404,"text":"Symbol"},{"type":"paragraph","crDate":1685019788546,"chDate":1685020207907,"text":"Ein Wert vom Datentyp Symbol hat keinen echten Inhalt. Es ist nur ein leerer Container.\nDas besondere daran ist, dass Symbols einmalig sind. Sie werden also anhand ihrer Identität miteinander verglichen.\nEiner der häufigsten Anwendungsfälle ist die Benutzung als Schlüssel für Objekte, um eine Art <i>Encapsulation</i> zu erzeugen."},{"type":"header","crDate":1685020228953,"chDate":1685020233792,"text":"Collections"},{"type":"paragraph","crDate":1685020281198,"chDate":1685021012782,"text":"Ein Collection-Datentyp kann mehrere Werte enthalten. Da Javascript keine strenge Typisierung fordert, kann in jeden Slot ein Wert eines beliebigen Datentyps gespeichert werden.\nAußerdem werden alle Collection-Datentypen per Copy-by-Reference kopiert."},{"type":"subheader","crDate":1685020236073,"chDate":1685020239112,"text":"Array"},{"type":"paragraph","crDate":1685020435385,"chDate":1685020721049,"text":"In einem Array sind alle Slots (quasi die im Array organisierten Variablen) in einer nummerierten Liste abgelegt.\nJeder Slot kann mittels eines eindeutigen Index angesprochen werden."},{"type":"subheader","crDate":1685020240977,"chDate":1685020244551,"text":"Object"},{"type":"paragraph","crDate":1685020735459,"chDate":1685020932988,"text":"In einem Objekt werden die Slots mit eindeutigen Strings bezeichnet.\nAls Besonderheit kann ein Objekt auch Funktionen enthalten, die einfach aufgerufen werden können.\nEin Objekt kann nicht iteriert werden, da die Reihenfolge der Slots nicht definiert ist."},{"type":"subheader","crDate":1685020248951,"chDate":1685020261375,"text":"Map"},{"type":"paragraph","crDate":1685021034642,"chDate":1685021410385,"text":"Eine Map ist ein neuerer Datentyp, der eine sehr einfache Verknüpfung zweier Informationen erlaubt.\nAls Schlüssel kann ein Wert eines beliebigen Datentypes verwendet werden."},{"type":"subheader","crDate":1685020263950,"chDate":1685020267014,"text":"Set"},{"type":"paragraph","crDate":1685021414666,"chDate":1685021821450,"text":"Ein Set arbeitet vollständig ohne Schlüssel. Es ist vor allem erfunden worden, um Iterationen zu vereinfachen.\nAls Besonderheit erlaubt ein Set keine Dupletten."},{"type":"header","crDate":1685021827122,"chDate":1685021831157,"text":"Function"},{"type":"paragraph","crDate":1685021834513,"chDate":1685021983860,"text":"Funktionen werden in JS als sog. First-Class-Citizens behandelt. D.h., sie können ebenso wie alle anderen Datentypen kopiert, als Parameter übertragen und von anderen Funktionen zurückgegeben werden. Funktionen werden als Referenz kopiert."}]}