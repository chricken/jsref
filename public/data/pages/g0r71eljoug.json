{"content":[{"type":"paragraph","crDate":1691662165792,"chDate":1691666769003,"text":"Eventlistener sind eine Art von JS-Code, der auf bestimmte Ereignisse (<i>Events</i>) reagiert. Wenn ein Event auftritt, wird die zugeh√∂rige Funktion ausgef√ºhrt. Die dem Eventlistener zugewiesene Funktion wird <i>Eventhandler</i> genannt. \nEventlistener werden h√§ufig verwendet, um auf Benutzereingaben zu reagieren, z. B. Mausklicks, Tastatureingaben oder Scroll-Events.\nEin Eventlistener kann verschiedenen Arten von Zielen zugewiesen werden:\n<ul>\n<li>DOM-Element</li>\n<li>Eingabe-Elemente</li>\n<li>Document</li>\n<li>Window</li>\n<li>HTTP-Request-Object</li>\n<li>Und mehr ...</li>\n</ul>"},{"type":"subheader","crDate":1691662502279,"chDate":1691662507623,"text":"addEventlistener()"},{"type":"paragraph","crDate":1691662510151,"chDate":1691663803010,"text":"Diese Methode weist einem Element einen Eventhandler f√ºr einen bestimmten Event zu.\nDiese Methode nimmt drei Argumente entgegen:\n<ul>\n<li>Name des Events, f√ºr das der Listener definiert werden soll. Dieser Name ist ein String, der bekannt sein muss.</li>\n<li>Die Funktion, die aufgerufen werden soll, wenn das Event auftritt. Diese Funktion wird <i>Eventhandler</i> oder <i>Callback-Funktion</i> genannt.</li>\n<li>Das dritte Argument ist ein optionales Argument, das die Art der Ereignisbehandlung angibt.</li>\n</ul>\nDie <i>addEventListener()</i>-Methode kann einem Element mehrfach zugewiesen werden. Die zugewiesenen Eventhandler werden dann in der Reihenfolge aufgerufen, wie sie zugewiesen wurden.\n"},{"type":"code","crDate":1691664382732,"chDate":1691664473691,"text":"let myElement = document.querySelector('#second');\n\nmyElement.addEventListener('click', () => \n console.log('Element wurde angeklickt.')\n)\n\nmyElement.addEventListener('click', () => \n console.log('Zweiter Eventhandler aufgerufen.')\n)"},{"type":"paragraph","crDate":1691667341926,"chDate":1691668136733,"text":"Es ist eine gute Praxis, als Eventhandler eine benannte Funktion zu √ºbergeben.\nDadurch kann der Code wesentlich aufger√§umter aufgebaut werden. Au√üerdem sparen wir eine Ebene an Komplexit√§t, die Funktion kann auch von anderer Stelle (anderen Eventlistenern) aufgerufen werden und es k√∂nnen zus√§tzliche Argumente √ºbergeben werden, falls n√∂tig."},{"type":"code","crDate":1691668351430,"chDate":1691668361213,"text":"let myElement = document.querySelector('#second');\nconst myHandler = () => console.log('Element wurde angeklickt.');\nmyElement.addEventListener('click', myHandler);"},{"type":"paragraph","crDate":1691668376397,"chDate":1691669251709,"text":"Manchmal ist es notwendig, dem Eventhandler Argumente zu √ºbergeben, die im Scope des Eventlisteners liegen. In dem Falle ist es gute Praxis, den Eventhandler durch eine anonyme Funktion aufzurufen."},{"type":"code","crDate":1691670317473,"chDate":1691670341176,"text":"const data = [... new Array(10)].map(() => ~~(Math.random() * 100));\n\nconst myHandler = value => alert(value);\n\ndata.forEach(val => {\n const container = document.createElement('div');\n container.innerHTML = `Neues Element: ${val}`;\n document.body.append(container);\n container.addEventListener('click', () => myHandler(val));\n})"},{"type":"paragraph","crDate":1691671470957,"chDate":1692196581206,"text":"Mit dem dritten Parameter kann das Verhalten des Eventlisteners gesteuert werden.\nEs wird ein Objekt √ºbergeben, in dem die Einstellungen eingetragen werden k√∂nnen. Die m√∂glichen Optionen sind:\n<ul>\n<li>capture: Bestimmt, dass dieser Event im Capture-Modus aufgerufen wird. Siehe <a href=\"/?id=4unslwcgjgu\">Bubbling</a></li>\n<li>once: Bestimmt, dass der Listener nach einer Ausf√ºhrung automatisch entfernt wird.</li>\n<li>passive: Unterdr√ºckt den Aufruf von preventDefault(). Das kann hilfreich sein, um Scrollen, Zoomen und Touch zu optimieren.</li>\n<li>signal: Erlaubt das Abbrechen des Handlers mittels eines abortControllers.</li>\n</ul>\nPS: Ich habe in meiner Praxis diese Optionen nie gebraucht ü§∑‚Äç‚ôÇÔ∏è"},{"type":"subheader","crDate":1691663828613,"chDate":1691663834824,"text":"removeEventListener()"},{"type":"paragraph","crDate":1691670358591,"chDate":1691671013575,"text":"Mit der <i>removeEventListener()</i>-Methode kann ein Eventlistener entfernt werden.\nDies funktioniert allerdings nur dann, wenn dem Eventlistener eine benannte Fuinktion √ºbergeben wurde.\nDie removeEventListener()-Methode bekommt <i>dieselben Argumente</i> wie die addEventListener()-Methode, durch die der zu entfernende Eventlistener angeh√§ngt wurde.\nIm Beispiel unten kann ein Element nur einmal angeklickt werden. Das wird erreicht, indem aus dem Element der Eventlistener entfernt wird."},{"type":"code","crDate":1691671023675,"chDate":1691671032374,"text":"let myElement = document.querySelector('#second');\n\nconst myHandler = () => {\n alert('Element wurde angeklickt');\n myElement.removeEventListener('click', myHandler);\n}\n\nmyElement.addEventListener('click', myHandler);"},{"type":"subheader","crDate":1691662535134,"chDate":1691662584630,"text":"onevent()"},{"type":"paragraph","crDate":1691675179542,"chDate":1691675420572,"text":"Es gibt mehrere alte Methoden, mit denen die meisten Events eingeh√§ngt werden k√∂nnen. Die beginnen alle mit \"on\", gefolgt von dem Namen des Events. Zum Beispiel:\n<ul>\n<li>onclick</li>\n<li>onload</li>\n<li>onmouseover</li>\n</ul>\nDiese Methoden erlauben es, genau einen Eventhandler zuzuweisen. Wird die Methode ein weiteres Mal aufgerufen, so √ºberschreibt der neue Handler den bisherigen."},{"type":"code","crDate":1691675640739,"chDate":1691675659666,"text":"let myElement = document.querySelector('#second');\n\nconst myHandler = () =>  alert('Element wurde angeklickt');\n\nmyElement.onclick = myHandler;"}]}