{"content":[{"type":"paragraph","crDate":1716560512184,"chDate":1716561085800,"text":"Beim <i>Flyweight</i>-Pattern geht es um das Sparen von Speicher. Manche Objekte sind sich sehr ähnlich und es müssen nicht immer alle Informationen über das Objekt in jeder Instanz gespeichert sein.\nBspw. kann es in einem Fuhrpark mehrere Autos desselben Types geben. Diese haben alle dieselbe Marke, denselben Typen, dieselbe Motorisierung, etc.\nAber sie haben alle unterschiedliche Farbe, gelaufene Kilometer, Inspektionen, etc.\nIm Flyweight Pattern wird ein Objekt für jeden Fahrzeug-Typen angelegt. Und für jede Instanz eines Fahrzeuges wird dann das Typ-Objekt zusammen mit den individuellen Attributen in die Instanz eingehängt. Auf diese Weise teilen sich alle Fahrzeuge eines Types einige Informationen, was viel Speicher sparen kann."},{"type":"code","crDate":1716561091040,"chDate":1716561447192,"text":"const carTypes = new Map();\nconst fuhrpark = [];\n\n// Klasse für Fahrzeugtypen\nclass CarType {\n constructor(marke, modell, leistungKW, typNr) {\n  Object.assign(this, { marke, modell, leistungKW, typNr });\n }\n}\n\n// Klasse für individuelle Fahrzeuge\nclass Car {\n constructor(carType, farbe, km) {\n  Object.assign(this, { carType, farbe, km });\n }\n}\n\n// Flyweight-Funktion, um ein Objekt anzulegen\nconst createCar = (marke, modell, typNr, farbe, leistungKW, km) => {\n // Fahrzeugtyp ggf neu anlegen\n if (!carTypes.has(typNr)) {\n  carTypes.set(typNr, new CarType(marke, modell, leistungKW, typNr));\n }\n\n // Instanz anlegen und Fahrzeugtyp einhängen\n const myCar = new Car(\n  carTypes.get(typNr),\n  farbe,\n  km\n )\n\n // Instanz im Array speichern\n fuhrpark.push(myCar);\n}\n\ncreateCar('Hyundai', 'i20', 10, 'Gelb', 60, 15000);\ncreateCar('Hyundai', 'i20', 10, 'Red', 60, 31000);\ncreateCar('VW', 'id3', 17, 'Black', 105, 8500);\ncreateCar('VW', 'id3', 17, 'White', 105, 6700);\n\nconsole.log(fuhrpark);\nconsole.log(fuhrpark[0].carType == fuhrpark[1].carType);"}]}