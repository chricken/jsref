{"content":[{"type":"subheader","crDate":1715092006682,"chDate":1715092009597,"text":"typeof"},{"type":"paragraph","crDate":1715091728125,"chDate":1715091951549,"text":"Gelegentlich kommt es vor, dass der Datentyp eines Wertes abgefragt werden muss. \nFür primitive Datentypen kann dies mit dem Befehl <i>typeof</i> erledigt werden. Der Befehl liefert den Datentypen als String zurück.\nDieser Befehl ist schon sehr alt und fühlt sich in moderner Programmierung etwas \"angestaubt\" an, erfüllt aber seine Aufgabe."},{"type":"code","crDate":1715092166183,"chDate":1715092196412,"text":"let myVar = 12;\nconsole.log(typeof myVar);  // -> number\n            \nmyVar = 'Hallo';\nconsole.log(typeof myVar);  // -> string"},{"type":"subheader","crDate":1715092203887,"chDate":1715092215307,"text":"instanceof"},{"type":"paragraph","crDate":1715092218722,"chDate":1715093900404,"text":"Im Falle einer Collection sieht die Situation anders aus. der Befehl typeof liefert hier immer \"object\", was nicht hilfreich ist. Hier kann ein alternativer Befehl helfen. \n<i>instanceof</i> prüft, ob ein Datensatz aus einem bestimmten Constructor erzeugt wurde.. \nDer Befehl liefert einen Boolean zurück.\nNeben den Standard-Constructors können auch gegen eigene Constructors geprüft werden.\nÜbrigens liefert der instanceof-Befehl schon ein <i>true</i> zurück, wenn sich der geprüfte Constructor irgendwo in der Vererbungskette befindet."},{"type":"code","crDate":1715093719413,"chDate":1715094343906,"text":"class Dummy {\n constructor() { }\n}\n\nclass Auto {\n constructor(marke, modell) {\n  Object.assign(this, { marke, modell });\n }\n}\n\nclass Bus extends Auto {\n constructor(marke, modell, sitze) {\n  super(marke, modell);\n  Object.assign(this, { sitze });\n }\n}\n\nlet myVar = [21, 54, 87];\nlet myBus = new Bus('Setra', 'S 415', 50);\n\nconsole.log(myVar instanceof Object);  // -> true\nconsole.log(myVar instanceof Array);   // -> true\n\nconsole.log(myBus instanceof Bus);     // -> true\nconsole.log(myBus instanceof Auto);    // -> true\nconsole.log(myBus instanceof Object);  // -> true\n        \nconsole.log(myBus instanceof Dummy);   // -> false"}]}