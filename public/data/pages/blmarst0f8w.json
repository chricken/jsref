{"content":[{"type":"paragraph","crDate":1686146193740,"chDate":1686147112463,"text":"Iterieren bedeutet, dass alle Slots in definierter Reihenfolge nacheinander angesprochen werden.\nDazu gibt es verschiedene Möglichkeiten, einige einfacher, andere komplexer, wieder andere ganz anders."},{"type":"subheader","crDate":1686146264759,"chDate":1686146270983,"text":"for-Schleife"},{"type":"paragraph","crDate":1686146274126,"chDate":1686146588719,"text":"Die for-Schleife ist die direkteste Möglichkeit. Es ist sogenannter <i>imperativer Code</i>, also eine genaue Angabe dessen, was geschehen soll.\nDieser Weg ist besonders schnell, was sehr hilfreich ist bei sehr großen Datenmengen oder wenn die Schleife sehr häufig ausgeführt wird."},{"type":"code","crDate":1686146466737,"chDate":1686146534028,"text":"const myArray = [21, 54, 87, 32];\n\nfor (let i = 0; i < myArray.length; i++) {\n console.log(myArray[i]);  // -> 21  // -> 54  // -> 87  // -> 32\n // Alle Slots verdoppeln\n myArray[i] *= 2;\n}\n\nconsole.log(myArray);  // -> [ 42, 108, 174, 64 ]"},{"type":"subheader","crDate":1686147122181,"chDate":1686147128438,"text":"for-of-Schleife"},{"type":"paragraph","crDate":1686147131614,"chDate":1686147323189,"text":"for-of ist eine vereinfachte Variante der <i>for-Schleife</i>. Diese kopiert in jedem Durchlauf den jeweils nächsten Wert (value) in die Variable, welche in der Schleifendefinition angelegt wird.\nAls sog. deskiptiver Code ist die Ausführung nicht so schnell wie die normale for-Schleife.\nDie for-of-Schleife erlaubt keinen Zugriff auf den Index."},{"type":"code","crDate":1686147392807,"chDate":1686147410139,"text":"const myArray = [21, 54, 87, 32];\n\nfor (const value of myArray) {\n console.log(value);  // -> 21  // -> 54  // -> 87  // -> 32\n}"},{"type":"subheader","crDate":1686147439520,"chDate":1686147445303,"text":"for-in-Schleife"},{"type":"paragraph","crDate":1686147448665,"chDate":1686147517642,"text":"Diese funktioniert genau so wie die for-of-Schleife, allerdings wird in die Variable nicht der Wert sondern der Index übertragen."},{"type":"code","crDate":1686147519618,"chDate":1686147637080,"text":"const myArray = [21, 54, 87, 32];\n\nfor (const key in myArray) {\n let value = myArray[key];\n console.log(key, value);  // -> 0, 21  // -> 1, 54  // -> 2, 87  // -> 3, 32\n}"},{"type":"subheader","crDate":1686147660535,"chDate":1686149960339,"text":"value.forEach()"},{"type":"paragraph","crDate":1686147683758,"chDate":1686148188696,"text":"Diese nicht-destruktive Higher-Class-Methode bekommt eine Callback-Funktion übergeben, die für jeden Slot des Array einmal aufgerufen wird.\nDie Callback-Methode kann bis zu drei Parameter annehmen:\n<i>index</i> - eine laufende Nummer, die beginnend mit 0 für jede Iteration um 1 hochgezählt wird\n<i>value</i> - der Wert aus dem Slot\n<i>array</i> - das Array, das iteriert wird. Vor allem beim Chaining hilfreich."},{"type":"code","crDate":1686148118214,"chDate":1686148290919,"text":"const myArray = [21, 54, 87, 32];\n\nmyArray.forEach((value, key, arr) => {\n console.log(key, value, arr);  // -> Probier es einfach mal aus\n value = 100;                   // -> hat im Array keine Wirkung\n arr[index] = 100;              // -> hat im Array durchaus Wirkung\n})"},{"type":"subheader","crDate":1686148325638,"chDate":1686148330997,"text":"Iteratoren"},{"type":"paragraph","crDate":1686148333285,"chDate":1686148733071,"text":"Iteratoren sind Programmstrukturen, die es erlauben, ohne Schleife durch einen Datensatz zu iterieren.\nEin Array bringt von Haus aus drei Methoden mit, um Iteratoren zu erzeugen.\nDie <i>value.keys()</i>-Methode liefert die Schlüssel zurück.\nDie <i>value.values()</i>-Methode liefert die Werte zurück.\nDie <i>value.entries()</i>-Methode liefert jeweils ein Array mit dem Schlüssel und dem Wert zurück.\nFür mehr zum Thema <i>Iteratoren</i> siehe das entsprechende Kapitel."},{"type":"code","crDate":1686148739615,"chDate":1686148891962,"text":"const myArray = [21, 54, 87, 32];\n\nconst myIterator = myArray.keys();\n\n// FUNKTIONEN\nconst handleClick = () => {\n let item = myIterator.next();\n console.log(item);    // -> { value: 0, done: false }\n                       // -> { value: 1, done: false }\n                       // -> { value: 2, done: false } \n                       // -> { value: 3, done: false } \n                       // -> { value: undefined, done: true }\n}\n\ndocument.querySelector('#btn').addEventListener('click', handleClick);"},{"type":"code","crDate":1686148921995,"chDate":1686148949758,"text":"const myArray = [21, 54, 87, 32];\n\nconst myIterator = myArray.values();\n\n// FUNKTIONEN\nconst handleClick = () => {\n let item = myIterator.next();\n console.log(item);    // -> { value: 21, done: false }\n                       // -> { value: 54, done: false }\n                       // -> { value: 87, done: false } \n                       // -> { value: 32, done: false } \n                       // -> { value: undefined, done: true }\n}\n\ndocument.querySelector('#btn').addEventListener('click', handleClick);"},{"type":"code","crDate":1686148957321,"chDate":1686149031056,"text":"const myArray = [21, 54, 87, 32];\n\nconst myIterator = myArray.keys();\n\n// FUNKTIONEN\nconst handleClick = () => {\n let item = myIterator.entries();\n console.log(item);    // -> { value: [0,21], done: false }\n                       // -> { value: [1,54], done: false }\n                       // -> { value: [2,87], done: false } \n                       // -> { value: [3,32], done: false } \n                       // -> { value: undefined, done: true }\n}\n\ndocument.querySelector('#btn').addEventListener('click', handleClick);"}]}