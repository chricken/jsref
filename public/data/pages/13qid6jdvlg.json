{"content":[{"type":"subheader","crDate":1684228816793,"chDate":1684228820153,"text":"Problem"},{"type":"paragraph","crDate":1684228822614,"chDate":1684232705227,"text":"Soll im laufenden Programm auf Webseiten-Inhalt zugegriffen werden, dann kann es zu einem Problem kommen:\nWenn der JS-Code ausgeführt werden soll, bevor der HTML-Code geladen ist, dann kann auf den HTML-Code nicht zugegriffen werden.\nDieses Problem kann mit einer der folgenden Möglichkeiten behoben werden."},{"type":"code","crDate":1684316390751,"chDate":1684316413394,"text":"<!-- HTML-Code -->\n<head>\n <script src=\"path/to/my/script.js\"></script>\n<head>\n<body>\n <div id=\"myContainer\">\n  Hallo Welt\n </div>\n</body>\n\n// JS-Code\nconst el = document.querySelector('#myContainer');\nconsole.log(el.innerText);  // -> el ist null"},{"type":"subheader","crDate":1684232711408,"chDate":1684232718436,"text":"JS nach HTML"},{"type":"paragraph","crDate":1684232709858,"chDate":1684232787677,"text":"In der Praxis eine der beliebtesten Lösungen ist es, das Javascript erst nach dem HTML einzubinden.\nDadurch ist das HTML sicher geladen und kann verwendet werden, wenn das JS geladen wurde."},{"type":"code","crDate":1684232791163,"chDate":1684232927156,"text":"<html>\n <head>\n </head>\n\n <body>\n  <main>\n   Hier steht mein Inhalt\n  </main>\n\n  <script>\n   let elMain = document.querySelector('main');\n   console.log(elMain.innerText);  // -> \"Hier steht mein Inhalt\"\n  </script>\n\n </body>\n</html>"},{"type":"subheader","crDate":1684233050605,"chDate":1684233798630,"text":"Auf DOM warten"},{"type":"paragraph","crDate":1684233075289,"chDate":1684233350155,"text":"Es kann sein, dass das JS im Header stehen soll. Mglw. weil die Seite aus einem CMS geladen wird, das es nicht anders ermöglicht. Oder der JS-Code soll immer an einer definierten Stelle stehen.\nIn dem Fall kann auf einen <i>Eventlistener</i> zurückgegriffen werden. Dieser trägt den Namen <i>DOMContentLoaded</i> und wartet darauf, dass das DOM vollständig im Speicher liegt. Erst dann wird die Callback-Funktion gestartet."},{"type":"code","crDate":1684233219524,"chDate":1684233302831,"text":"<html>\n <head>\n\n  <script>\n\n   const init = () => {\n    let elMain = document.querySelector('main');\n    console.log(elMain.innerText);  // -> \"Hier steht mein Inhalt\"\n   });\n   \n   document.addEventListener('DOMContentLoaded', init);\n\n  </script>\n </head>\n\n <body>\n  <main>\n   Hier steht mein Inhalt\n  </main>\n\n </body>\n</html>"},{"type":"subheader","crDate":1684233373804,"chDate":1684233380679,"text":"Auf Bilddaten warten"},{"type":"paragraph","crDate":1684233383106,"chDate":1684233827617,"text":"Die Technik oben wartet nur auf den HTML-Code. Die Bildinhalte werden nicht abgewartet. D.h., dass die Bilder nach Aufruf des DOMContentLoaded-Eventlisteners noch nicht im Speicher liegen. Es kann also nicht das Bild in einen Canvas gezeichnet werden, es können nicht die realen Dimensionen ausgelesen werden, etc.\nFalls das notwendog sein sollte, bietet Javascript den <i>load</i>-Event an. Dieser kann dem gesamten Fenster oder auch einzelnen Elementen (insbesondere <img> zugewiesen werden."},{"type":"code","crDate":1684233610687,"chDate":1684233771178,"text":"<html>\n <head>\n\n  <script>\n\n   const init = () => {\n    let elMain = document.querySelector('main');\n    console.log(elMain.innerText);  // -> \"Hier steht mein Inhalt\"\n\n    let elImg = document.querySelector('img');\n    console.log(elImg.naturalWidth, elImg.naturalHeight)\n   });\n   \n   window.addEventListener('load', init);\n\n  </script>\n </head>\n\n <body>\n  <main>\n   Hier steht mein Inhalt\n   <img src=\"link/to/image\" />\n  </main>\n\n </body>\n</html>"},{"type":"subheader","crDate":1684233837186,"chDate":1684315960222,"text":"defer-Attribut"},{"type":"paragraph","crDate":1684233849471,"chDate":1684316177543,"text":"Das <i>defer</i>-Attribut wird in das <i>script</i>-Tag hinzugefügt. Es sorgt dafür, dass die Ausführung des Javascript verzögert wird, bis das DOM vollständig geladen wurde.\nDas defer-Attribut hat nur dann eine Wirkung, wenn ein <i>src</i>-Attribut vorhanden ist. D.h., es funktioniert nur in Zusammenhang mit einer eingebundenen Datei."},{"type":"code","crDate":1684316231068,"chDate":1684316375525,"text":"<!-- HTML-Code -->\n<head>\n <script src=\"path/to/my/script.js\" defer></script>\n<head>\n<body>\n <div id=\"myContainer\">\n  Hallo Welt\n </div>\n</body>\n\n// JS-Code\nconst el = document.querySelector('#myContainer');\nconsole.log(el.innerText);  // -> Hallo Welt"}]}