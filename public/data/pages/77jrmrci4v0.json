{"content":[{"type":"paragraph","crDate":1722952858448,"chDate":1755082009955,"text":"Mithilfe des <i>useRef()</i>-Hooks kann eine Referenz angelegt werden. \nDarunter versteht sich eine Variable, welche sich in ein paar Punkten von einem State unterscheidet.<ul>\n<li>Der Wert kann direkt verändert werden</li>\n<li>Eine Veränderung löst kein Re-Render aus</li>\n</ul>\nDas klingt, als wäre eine Referenz das gleiche wie eine normale Variable. Aber auch hier gibt es einige Unterschiede:<ul>\n<li>Der Wert einer Referenz bleibt über Re-Renderings erhalten, wogegen eine Variable bei jedem Re-Rendering neu geschrieben wird</li>\n<li>Eine Referenz kann sehr einfach auf DOM-Elemente zugreifen</li>\n</ul>"},{"type":"paragraph","crDate":1755085584484,"chDate":1755085774017,"text":"Im Beispiel unten ist zu sehen, dass bei einem Klick auf den Button die Referenz hochgezählt wird.\nDer Wert ist im DOM nicht zu sehen, da eine Änderung des Wertes kein Re-Render auslöst. Die Änderung ist in der Konsole zu sehen."},{"type":"code","crDate":1755085539740,"chDate":1755085801415,"text":"import {useRef} from 'react';\n\nconst App = () => {\n let counter = useRef(0);\n\n const increment = () => {\n  counter.current++;\n  console.log(counter.current);\n }\n\n return (\n  &lt;div>\n   &lt;h1>Todo&lt;/h1>\n   &lt;p>{counter.current}&lt;/p>\n   &lt;button onClick={increment}>Increment&lt;/button>\n  &lt;/div>\n );\n}\n\nexport default App;\n"},{"type":"subheader","crDate":1755085955299,"chDate":1755085961946,"text":"Zugriff aufs DOM"},{"type":"paragraph","crDate":1755085964714,"chDate":1755086833294,"text":"Eine spezielle Möglichkeit der Referenz ist der Zugriff auf DOM-Elemente. Dazu wird einem Element das Attribut <i>ref</i> zugewiesen. Als Wert wird die Referenz übergeben.\nDamit kann dann auf das DOM-Element zugegriffen werden."},{"type":"code","crDate":1755086712580,"chDate":1758195522806,"text":"import React, {useRef, useEffect} from 'react';\n\nconst App = () => {\n const canvasRef = useRef(null);\n\n useEffect(() => {\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n  context.fillStyle = 'red';\n  context.strokeStyle = 'blue';\n  context.lineWidth = 2;\n  context.fillRect(30, 30, 100, 100);\n }, []);\n \n return (\n  <canvas\n   ref={canvasRef}\n   width={300}\n   height={200}\n   style={{border: '1px solid black'}}\n  />\n )\n}\nexport default App;"}]}