{"content":[{"type":"paragraph","crDate":1687868321819,"chDate":1688647429522,"text":"Neben der Möglichkeit, mit Modulen den Funktionsumfang zu erweitern, dienen sie auch der Organisation und Strukturierung von Code in einem Projekt. Durch die Verwendung von Modulen können Funktionen und Variablen in separate Dateien aufgeteilt werden, wodurch die Wiederverwendbarkeit erhöht und die Code-Wartung erleichtert wird. Module können auch in andere Module importiert und exportiert werden, um den Code in unterschiedlichen Teilen einer Anwendung zu nutzen.\nDazu ist es natürlich notwendig, eigene Module zu schreiben.\nEin eigenes Modul kann im selben Ordner liegen wie die Hauptdatei oder in einem beliebigen Unterordner. In dem Fall muss beim Import der genaue Dateipfad angegeben werden.\nAlternativ kann das eigene Modul auch in einem Unterordner des <i>node_modules</i>-Ordners gespeichert werden. In dem Fall genügt es, den Namen des Ordners beim Import anzugeben. Die Haupt-JS-Datei muss dann <i>index.js</i> heißen."},{"type":"subheader","crDate":1688647512661,"chDate":1688647521275,"text":"commonJS-Module"},{"type":"paragraph","crDate":1688647523893,"chDate":1688648573975,"text":"commonJS-Module sind die längste Zeit der Standard-Weg gewesen, um Module zu entwickeln. \nSie funktionieren so, dass in dem Modul automatisch ein Objekt namens <i>exports</i> erzeugt wird. Dieses wird dann mit Attributen, Methoden, Klassen, etc gefüllt."},{"type":"code","crDate":1688648580111,"chDate":1688648596893,"text":"'use strict';\n\nexports.x = 0;\n\nexports.double = val => val * 2;\nexports.triple = val => val * 3;"},{"type":"paragraph","crDate":1688648570757,"chDate":1688648577915,"text":"Mit dem Befehl <i>require</i> wird dann das Modul eingebunden. \nAls Rückgabe der require-Funktion wird dann das exports-Objekt geliefert."},{"type":"code","crDate":1688648603523,"chDate":1688648620801,"text":"const geo = require('./geo');\n\nconsole.log(geo.x);\nconsole.log(geo.double(12));"},{"type":"subheader","crDate":1688648695851,"chDate":1688648701331,"text":"ES6-Module"},{"type":"paragraph","crDate":1688648703491,"chDate":1688649100236,"text":"Nach und nach werden die commonJS-Module durch ES6-Module ersetzt. \nViele Module auf npmjs.com setzen bereits darauf und ein großer Schritt wurde getan, als mit Node v12 die Möglichkeit eingeführt wurde, auch commenJS-Module mit der moderneren Syntax zu importieren. Nun können also alle Module als ES6-Module installiert werden.\nIn einem ES6-Modul werden die gewünschten Daten mithilfe des export-Befehls nach außen zur Verfügung gestellt.\nHierbei kann die default-Syntax ebenso verwendet werden wie <i>Named Exports</i>."},{"type":"code","crDate":1688649276691,"chDate":1688649303494,"text":"const geo = {\n    x: 0,\n    double(val) { return val * 2 },\n    tripple(val) { return val * 3 }\n}\n\nexport default geo;\nexport let double = geo.double;\nexport let tripple = geo.tripple;"},{"type":"paragraph","crDate":1688649327003,"chDate":1688649712861,"text":"Der import geschieht dann mit dem <i>import</i>-Befehl.\nDazu muss in der <i>package.json</i>-Datei der Eintrag <i>\"type\":\"module\"</i> gemacht werden.\nModule im <i>node_modules</i>-Ordner werden ohne den Suffix <i>.js</i> angegeben. "},{"type":"code","crDate":1688649383849,"chDate":1688649493189,"text":"import geo, {double, tripple} from './geo.js';\n\nconsole.log(geo.x);           // -> 0\nconsole.log(geo.double(12));  // -> 24\nconsole.log(double(12));      // -> 24"}]}