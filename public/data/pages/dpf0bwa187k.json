{"content":[{"type":"paragraph","crDate":1695300819623,"chDate":1695301552565,"text":"Das Scrolling ist in der Frontend-Entwicklung ausgesprochen wichtig.\nDas Beherrschen des Scrolling ermöglicht viele Techniken und Layout-Ideen:\n<ul>\n<li><b>Parallax Scrolling</b>\nVordergrund- und Hintergrundinhalte werden mit unterschiedlichen Geschwindigkeiten gescrollt. Dadurch entsteht die Illusion von Tiefe und verleiht der Website eine lebendige Wirkung.\n</li>\n<li><b>Endless Scrolling</b>\nEndless Scrolling, auch bekannt als Infinite Scrolling bedeutet, dass Inhalte automatisch nachgeladen werden, während der Benutzer nach unten scrollt.\n</li>\n<li><b>Scroll Animation</b>\nAnimationen auf der Webseite, die durch das Scrolling gesteuert werden. Dies ist ein wichtiger Bestandteit einer Storytelling-Webseite.\n</li>\n<li><b>Scroll-Tracking</b>\nErmöglicht es Webseitenbetreibern, das Scroll-Verhalten der Benutzer zu messen. Dadurch kann analysiert werden, wieviele und welche Inhalte vom Benutzer gesehen werden.\n</li>\n<li><b>Mehr</b>\nWie immer steht es jedem offen, eigene Techniken zu implementieren, indem die Möglichkeiten genutzt werden.\n</li>\n</ul>"},{"type":"subheader","crDate":1695301560236,"chDate":1695301587483,"text":"Auf Scrolling reagieren"},{"type":"paragraph","crDate":1695301582652,"chDate":1695301979254,"text":"Das scroll-Event reagiert auf das Scrollen des Benutzers. Der Event wird auch ausgelöst, wenn die Seite beim Laden automatisch an die vorherige Position springt.\n"},{"type":"code","crDate":1695301952960,"chDate":1695302001197,"text":"const handleScroll = () => {\n console.log('scrolling');\n}\n\nwindow.addEventListener('scroll', handleScroll);"},{"type":"subheader","crDate":1695302008893,"chDate":1695302016348,"text":"Scrollposition"},{"type":"paragraph","crDate":1695301705697,"chDate":1695302328829,"text":"Die Scrollposition kann auf verschiedene Weisen ausgelesen werden. In der Praxis ist es eine gute Idee, immer auf die gleiche Weise auf Informationen zuzugreifen. Daher hat sich die Verwendung von <i>document.documentElement.scrollTop</i> anstelle von window.scrollY durchgesetzt, auch wenn es mehr zu schreiben ist. Der Grund ist, dass die Eigenschaft scrollTop (und scrollLeft) auch in DOM-Elementen zu finden ist. So kann auch die Scrollposition von DOM-Elementen ausgelesen und verändert werden."},{"type":"code","crDate":1695302378706,"chDate":1695302386209,"text":"const handleScroll = () => {\n console.clear();\n console.log(document.documentElement.scrollTop);\n}\n\nwindow.addEventListener('scroll', handleScroll);"},{"type":"paragraph","crDate":1695302396521,"chDate":1695302660439,"text":"Wie oben beschrieben, kann diese Eigenschaft auch auf DOM-Elementen verwendet werden."},{"type":"code","crDate":1695302610007,"chDate":1695302712770,"text":"const handleScrollElement = evt => {\n console.clear();\n console.log(evt.target.scrollTop);\n}\n\ndocument.querySelector('.scrollable').addEventListener('scroll', handleScrollElement);\n            "},{"type":"subheader","crDate":1695302747656,"chDate":1695302754134,"text":"Relative Scrollposition"},{"type":"paragraph","crDate":1695302757886,"chDate":1695303242316,"text":"Damit ist gemeint, dass statt der Position in Pixel ein <i>Wert zwischen 0 und 1</i> ausgegeben wird. Dazu muss lediglich die aktuelle Scrollposition durch die gesamte Scrollhöhe dividiert werden.\nUm die maximale Scrollhöhe zu errechnen, wird einfach die Höhe des Viewports von der Höhe des Dokuemntes abgezogen."},{"type":"code","crDate":1695303278745,"chDate":1695303505234,"text":"const handleScroll = () => {\n console.clear();\n\n let scrollPos = document.documentElement.scrollTop;\n let scrollPosMax = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n\n console.log(scrollPos / scrollPosMax);\n}\nwindow.addEventListener('scroll', handleScroll);"},{"type":"paragraph","crDate":1695303455485,"chDate":1695303472255,"text":"Wie zuvor kann auch diese Technik auf einzelne DOM-Elemente angewendet werden."},{"type":"code","crDate":1695303476451,"chDate":1695303499258,"text":"const handleScrollElement = evt => {\n console.clear();\n let scrollPos = evt.target.scrollTop;\n let scrollPosMax = evt.target.scrollHeight - evt.target.clientHeight;\n\n console.log(scrollPos / scrollPosMax);\n}\n\ndocument.querySelector('.scrollable').addEventListener('scroll', handleScrollElement);\n           "}]}