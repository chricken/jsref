{"content":[{"type":"paragraph","crDate":1725977905860,"chDate":1726062959938,"text":"IndexedDB ist ein im Browser verankertes Objekt-orientiertes relationales Datenbanksystem. Sie wurde entwickelt, um eine leistungsstarke Alternative zu Cookies und Webstorage zu bieten, die mit großen Datenmengen und komplexen Operationen umgehen kann.\nAlle Operationen einer IndexedDB sind asynchron.\nIndexedDB kann mehrere Datenbanken speichern. Datenbanken aus verschiedenen Domains werden klar auseinandergehalten."},{"type":"subheader","crDate":1726062666014,"chDate":1726062671195,"text":"Öffnen"},{"type":"paragraph","crDate":1726062634187,"chDate":1726063031744,"text":"Um mit einer Datenbank zu kommunizieren, muss diese zunächst mit der <i>open()</i>-Methode geöffnet werden. Die Methode übergibt den gewünschten Namen der Datenbank sowie optional die Version.\nFalls die Datenbank noch nicht existiert, wird automatisch Version 1 angelegt.\nDiese Methode ist ein Kind von <i>window.indexedDB</i>.\nDie Methode gibt ein sog. request-Objekt zurück, das mehrere Events kennt."},{"type":"code","crDate":1726063444042,"chDate":1726063445719,"text":"let request = window.indexedDB.open('AutoDB', 1);"},{"type":"subheader","crDate":1726062802252,"chDate":1726062815822,"text":"upgradeneeded-Event"},{"type":"paragraph","crDate":1726062818024,"chDate":1726063393630,"text":"Wenn die Datenbank noch nicht oder in einer niedrigeren als der gewünschten Version existiert, wird dieser Event aufgerufen.\nDies ist der richtige Event, um die Datenspeicher vorzubereiten, in die dann die Daten abgelegt werden."},{"type":"code","crDate":1726063450028,"chDate":1726063476898,"text":"request.addEventListener('upgradeneeded', (event) => {\n const db = event.target.result;\n if (!db.objectStoreNames.contains('autos')) {\n  db.createObjectStore('autos', { keyPath: 'id', autoIncrement: true });\n }\n});"},{"type":"subheader","crDate":1726063591118,"chDate":1726063596337,"text":"success-Event"},{"type":"paragraph","crDate":1726063599907,"chDate":1726063799528,"text":"Falls das Öffnen der Datenbank erfolgreich war, wird der success-Event gefeuert.\nIn diesem können dann Daten gespeichert und gelesen werden.\nTipp: Wenn innerhalb dieses Eventhandlers weitere Eventhandler angelegt werden, haben dieses Zugriff auf das Datenbank-Objekt."},{"type":"code","crDate":1726063841463,"chDate":1726063854333,"text":"request.addEventListener('success', (event) => {\n});"},{"type":"subheader","crDate":1726063898367,"chDate":1726063905365,"text":"Error-Event"},{"type":"paragraph","crDate":1726063907577,"chDate":1726063937049,"text":"Falls das Öffnen der Datenbank nicht funktioniert hat, wird dieser Event gefeuert."},{"type":"paragraph","crDate":1725977556654,"chDate":1725977560243,"text":"Wie funktioniert IndexedDB in JavaScript?\nIndexedDB ist eine leistungsstarke, clientseitige Datenbanktechnologie, die es Webanwendungen ermöglicht, große Mengen strukturierter Daten im Browser zu speichern und zu verwalten. Im Folgenden wird erklärt, wie IndexedDB funktioniert und welche Vorteile sie bietet.\nGrundlegende Konzepte und Funktionen\nIndexedDB ist eine NoSQL-Datenbank, die als Alternative zu WebSQL entwickelt wurde und eine größere Speicherkapazität bietet\n. Sie ist eine JavaScript-basierte, objektorientierte Datenbank, die es ermöglicht, Daten strukturiert zu speichern, abzurufen und zu manipulieren\n. Im Gegensatz zu Cookies oder Local Storage kann IndexedDB große Datenmengen speichern und mithilfe von Indizes abgefragt werden\n.\nDatenbankerstellung und -verwaltung\nUm IndexedDB zu verwenden, muss zunächst eine Datenbank erstellt und gegebenenfalls aktualisiert werden. Dies erfolgt mithilfe von Methoden wie openDB und createObjectStore, wobei letztere die Speicherung der Daten ermöglicht\n. IndexedDB ermöglicht es Entwicklern auch, die Datenbankversion zu inkrementieren, indem sie beim Öffnen der Datenbank die gewünschte Versionsnummer angeben\n.\nTransaktionen und Datenoperationen\nIndexedDB ist ein transaktionales Datenbanksystem, ähnlich wie ein SQL-basiertes relationales Datenbankmanagementsystem (RDBMS)\n. Alle Datenoperationen in IndexedDB werden innerhalb von Transaktionen durchgeführt, was bedeutet, dass entweder alle Operationen erfolgreich abgeschlossen werden oder keine\n. Dies stellt sicher, dass die Datenintegrität gewahrt bleibt.\nAsynchrone Operationen\nEine der wichtigsten Eigenschaften von IndexedDB ist, dass alle Operationen asynchron durchgeführt werden. Dies bedeutet, dass die Anwendung während der Verarbeitung von IndexedDB-Operationen weiterhin andere Aufgaben ausführen kann, was zu einer reibungsloseren und reaktionsschnelleren Benutzererfahrung führt\n.\nUnterstützung und Kompatibilität\nIndexedDB wird von allen modernen Webbrowsern unterstützt, was sie zu einer hervorragenden Wahl für den Aufbau von Offline-Webanwendungen macht\n. Die Speicherkapazität von IndexedDB kann je nach Browser mehrere hundert Megabyte oder sogar einige Gigabyte erreichen\n.\nVerwendung von Bibliotheken\nUm die Produktivität zu steigern und den Code lesbarer zu machen, wird die Verwendung von Bibliotheken wie idb empfohlen. Diese Bibliothek bietet eine promise-basierte Abstraktionsschicht um IndexedDB und ermöglicht die Verwendung von async/await-Funktionen\n.\nAnwendungsfälle und Vorteile\nIndexedDB kann in verschiedenen Szenarien verwendet werden, wie z.B. Caching, Progressive Web Apps (PWAs) und Gaming. Sie unterstützt auch komplexe Abfragen und Indizes, was eine effiziente Datenmanipulation ermöglicht\n. IndexedDB ist besonders nützlich für die Erstellung von Offline-fähigen Webanwendungen und das Handling großer Datenmengen auf der Client-Seite\n.\nEinschränkungen\nTrotz ihrer vielen Vorteile hat IndexedDB auch einige Einschränkungen. Sie bietet keine eingebauten Mechanismen zur Synchronisation von Daten zwischen verschiedenen Clients oder zur Handhabung von Konflikten in verteilten Umgebungen\n. Für größere Anwendungen oder Anwendungen, die von mehreren Benutzern genutzt werden, sind serverseitige Datenbanken oder cloudbasierte Speicherlösungen effizienter\n.\nFazit\nIndexedDB ist eine flexible und leistungsstarke Lösung für die clientseitige Datenspeicherung in Webanwendungen. Sie bietet eine Vielzahl von Funktionen, die es Entwicklern ermöglichen, große Mengen strukturierter Daten effizient zu speichern und zu verwalten. Trotz einiger Einschränkungen bleibt IndexedDB ein wertvolles Werkzeug für die Entwicklung moderner Webanwendungen, insbesondere für Offline-fähige und datenintensive Anwendungen."},{"type":"links","crDate":1725977444849,"chDate":1725977444849,"links":[{"title":"Tutorial","url":"https://www.telerik.com/blogs/beginners-guide-indexeddb#:~:text=IndexedDB%20is%20a%20way%20to%20store%20more%20significant%20amounts%20of%20data%20securely%20and%20reliably%20in%20the%20user%E2%80%99s%20browser"}]}]}