{"content":[{"type":"paragraph","crDate":1725977905860,"chDate":1726123776067,"text":"IndexedDB ist ein im Browser verankertes Objekt-orientiertes relationales Datenbanksystem. Sie wurde entwickelt, um eine leistungsstarke Alternative zu Cookies und Webstorage zu bieten, die mit großen Datenmengen und komplexen Operationen umgehen kann.\nAlle Operationen einer IndexedDB sind asynchron.\nIndexedDB kann beliebig viele Datenbanken speichern. Datenbanken aus verschiedenen Domains werden strikt auseinandergehalten."},{"type":"subheader","crDate":1726062666014,"chDate":1726062671195,"text":"Öffnen"},{"type":"paragraph","crDate":1726062634187,"chDate":1726063031744,"text":"Um mit einer Datenbank zu kommunizieren, muss diese zunächst mit der <i>open()</i>-Methode geöffnet werden. Die Methode übergibt den gewünschten Namen der Datenbank sowie optional die Version.\nFalls die Datenbank noch nicht existiert, wird automatisch Version 1 angelegt.\nDiese Methode ist ein Kind von <i>window.indexedDB</i>.\nDie Methode gibt ein sog. request-Objekt zurück, das mehrere Events kennt."},{"type":"code","crDate":1726063444042,"chDate":1726121178585,"text":"let dbName = 'myDB';\nlet requestDB;\n\nconst init = () => {\n requestDB = window.indexedDB.open(dbName, 1);\n}\n\ninit();"},{"type":"subheader","crDate":1726062802252,"chDate":1726062815822,"text":"upgradeneeded-Event"},{"type":"paragraph","crDate":1726062818024,"chDate":1726063393630,"text":"Wenn die Datenbank noch nicht oder in einer niedrigeren als der gewünschten Version existiert, wird dieser Event aufgerufen.\nDies ist der richtige Event, um die Datenspeicher vorzubereiten, in die dann die Daten abgelegt werden."},{"type":"code","crDate":1726063450028,"chDate":1726121174131,"text":"let dbName = 'myDB';\nlet requestDB;\n\nconst handleReqUpgradeNeeded = evt => {\n console.log('upgrade');\n}\n\nconst init = () => {\n requestDB = window.indexedDB.open(dbName, 1);\n requestDB.addEventListener('upgradeneeded', handleReqUpgradeNeeded)\n}\n\ninit();"},{"type":"subheader","crDate":1726063591118,"chDate":1726063596337,"text":"success-Event"},{"type":"paragraph","crDate":1726063599907,"chDate":1726063799528,"text":"Falls das Öffnen der Datenbank erfolgreich war, wird der success-Event gefeuert.\nIn diesem können dann Daten gespeichert und gelesen werden.\nTipp: Wenn innerhalb dieses Eventhandlers weitere Eventhandler angelegt werden, haben dieses Zugriff auf das Datenbank-Objekt."},{"type":"code","crDate":1726063841463,"chDate":1726121170710,"text":"let dbName = 'myDB';\nlet requestDB;\n\nconst handleReqUpgradeNeeded = evt => {\n console.log('upgrade');\n}\n\nconst handleReqSuccess = evt => {\n console.log('Verbindung erfolgreich hergestellt.');\n}\n\nconst init = () => {\n requestDB = window.indexedDB.open(dbName, 1);\n requestDB.addEventListener('upgradeneeded', handleReqUpgradeNeeded)\n requestDB.addEventListener('success', handleReqSuccess)\n}\n\ninit();"},{"type":"subheader","crDate":1726063898367,"chDate":1726063905365,"text":"Error-Event"},{"type":"paragraph","crDate":1726063907577,"chDate":1726063937049,"text":"Falls das Öffnen der Datenbank nicht funktioniert hat, wird dieser Event gefeuert."},{"type":"code","crDate":1726121124459,"chDate":1726121163404,"text":"let dbName = 'myDB';\nlet requestDB;\n\nconst handleReqUpgradeNeeded = evt => {\n console.log('upgrade');\n}\n\nconst handleReqSuccess = evt => {\n console.log('Verbindung erfolgreich hergestellt.');\n}\n\nconst handleReqError = evt => {\n console.log('Fehler bei der Verbindung.');\n}\n\nconst init = () => {\n requestDB = window.indexedDB.open(dbName, 1);\n requestDB.addEventListener('upgradeneeded', handleReqUpgradeNeeded)\n requestDB.addEventListener('success', handleReqSuccess)\n requestDB.addEventListener('error', handleReqError)\n}\n\ninit();"},{"type":"subheader","crDate":1726121892580,"chDate":1726123707684,"text":"Datenbank vorbereiten"},{"type":"paragraph","crDate":1726121915647,"chDate":1726123751238,"text":"In einer indexedDB werden Daten als Objekte in einen sogenannten <i>ObjectStore</i> geschrieben. Diese müssen natürlich existieren, um verwendet werden zu können.\nDas wird am besten im <i>upgradeneeded</i>-Eventhandler erledigt, da dieser aufgerufen wird, falls die Datenbank angelegt oder aktualisiert wird.\nZunächst wird die Verknüpfung zur Datenbank benötigt, die im Event-Objekt an den Handler übergeben wird.\nDieses Objekt enthält u.a. ein Array namens <i>objectStoreNames</i>, das die Namen aller ObjectStores enhält.\nWenn der Name des gewünschten ObjectStores nicht vorliegt, dann wird er mit der <i>createObjectStore()</i>-Methode angelegt.\nIm Settings-Parameter muss definiert sein, welches Attribut als eindeutiger Schlüssel (a.k.a. <i>primary key</i>) verwendet wird.\nDie Angabe von <i>autoIncrement</i> sorgt dafür, dass die ID automatisch hochgezählt wird, also nicht jedesmal übergeben werden muss.\nAuf diesem Wege können beliebig viele objectStores parallel angelegt werden.\n"},{"type":"code","crDate":1726122210692,"chDate":1726122341133,"text":"const handleReqUpgradeNeeded = evt => {\n const db = evt.target.result;\n if (!db.objectStoreNames.contains('myData')) {\n  db.createObjectStore(\n   'myData',\n   { keyPath: 'id', autoIncrement: true }\n  );\n }\n}"},{"type":"links","crDate":1726134850267,"chDate":1726134850267,"links":[{"title":"MDN - Using IndexedDB","url":"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB"}]}]}