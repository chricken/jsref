{"content":[{"type":"paragraph","crDate":1686924124830,"chDate":1716365039843,"text":"Eine Factory ist eigentlich nur eine Funktion, die ein Objekt zurückgibt.\nDas ist eigentlich nichts besonderes, kann aber als Alternative für eine Klasse verwendet werden. \nAn die Funktion können die Werte gegeben werden, die in das Objekt geschrieben werden sollen.\nÜbrigens: Eigentlich kann für eine Factory nicht die <i>Kurzsyntax</i> der Arrow-Funktion verwendet werden, da die geschweifte Klammer als Codeblock interpretiert würde. Hier hilft eine einfach runde Klammer, um die geschweifte Klammer als zurückzugebendes Objekt zu definieren."},{"type":"code","crDate":1686925164928,"chDate":1716364579998,"text":"const Auto = (marke, modell) => ({ \n  marke, \n  modell,\n  get bezeichner(){\n   return `${this.marke} ${this.modell}`;\n  }\n }\n})\n\nlet firstCar = Auto('Hyundai', 'i20');\nlet secondCar = Auto('VW', 'iq3');\n\nconsole.log(firstCar);\nconsole.log(secondCar.bezeichner);"},{"type":"subheader","crDate":1716364857999,"chDate":1716364863061,"text":"Private Attribute"},{"type":"paragraph","crDate":1716364209447,"chDate":1716364986021,"text":"Aufgrund des Scope-Verhaltens von Javascript kann eine Variable innerhalb der Factory von außen nicht gelesen werden. Sie ist gewissermaßen privat innerhalb der Factory.\nIn dem zurückgegebenen Objekt können dann <i>Getter</i> und <i>Setter</i> den Zugriff auf diese Variable steuern."},{"type":"code","crDate":1716364494072,"chDate":1716364824204,"text":"const myFactory = (marke, modell) => {\n let keyNo = (Math.random() * 1e17).toString(36);\n return {\n  marke, modell,\n  get keyNo() {\n   return keyNo\n  }\n }\n}\n\nconst myAuto = myFactory('Hyundai', 'i20');\nconsole.log(myAuto);\nconsole.log(myAuto.keyNo);"}]}