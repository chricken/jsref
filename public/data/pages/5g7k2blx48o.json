{"content":[{"type":"paragraph","crDate":1695888607340,"chDate":1695890512515,"text":"Ein HTML Canvas ist ein zweidimensionales Grafikobjekt, das in HTML-Dokumenten verwendet werden kann. Es kann für viele Zwecke eingesetzt werden, zum Beispiel: \n<ul>\n<li>Datenvisualisierung: Das Canvas-Element kann verwendet werden, um Daten in Diagrammen, Grafiken und interaktiven Visualisierungen darzustellen. Zum Beispiel können Sie mit dem Canvas-Element ein Balkendiagramm erstellen, um statistische Daten zu präsentieren.</li>\n<li>Spieleentwicklung: Das Canvas-Element ist ideal für die Entwicklung von HTML5-Spielen. Es bietet Grafiken, Animationen und Benutzerinteraktionen, um ein unterhaltsames Spielerlebnis zu schaffen.</li>\n<li>Bildbearbeitung: Das Canvas-Element ermöglicht es Benutzern, Bilder zu bearbeiten. Verschiedene Blendmodi, Zeichenoperationen, Stempel, Transformationen und vieles mehr lässt sich im Canvas umsetzen.</li>\n<li>Benutzerinteraktion: Auch auf einem Canvas können Benutzerinteraktionen wie Drag & Drop, Klicken und Auswählen implementiert werden. So lassen sich beispielsweise interaktive Diagramme oder Datenübersichten erstellen.</li>\n<li>Animationen: Das Canvas-Element ermöglicht die Erstellung von datenbasierten und interaktiven Animationen durch die kontinuierliche Aktualisierung der Grafiken auf dem Canvas.</li>\n</ul>"},{"type":"paragraph","crDate":1695889933589,"chDate":1695889969530,"text":"Wenn der Browser das Canvas-Element nicht unterstützt (alle modernen Browser unterstützen es schon lange), dann wird der Inhalt des Tags gezeigt."},{"type":"code","crDate":1695889905714,"chDate":1695890599516,"text":"&lt;canvas id=\"myCanvas\">\n Your browser does not support the HTML5 canvas element.\n&lt;/canvas>"},{"type":"subheader","crDate":1695889564335,"chDate":1695889568407,"text":"Größe"},{"type":"paragraph","crDate":1695889544729,"chDate":1695889879153,"text":"Ein Canvas verhält sich grundsätzlich wie ein Bild.\nDas gilt auch für die Größe. Ein Canvas hat als default eine relativ geringe Auflösung (300px*150px im Firefox). Die Auflösung stellt auch die real zur Verfügung stehenden Pixel dar.\nDie Darstellung per CSS anzupassen hat keine Auswirkung auf die realen Pixel, das das Canvas (wie ein Bild) in die Größe gestreckt wird.\nDer richtige Weg, die Größe des Canvas anzupassen, ist die Änderung der width- und height-Attribute.\nDies kann im HTML oder im Javascript stattfinden."},{"type":"code","crDate":1695889976252,"chDate":1695890670080,"text":"<!-- HTML -->\n&lt;canvas id=\"myCanvas\" width=\"200\" height=\"200\">\n&lt;/canvas>"},{"type":"code","crDate":1695890065652,"chDate":1695890376126,"text":"// JS\nconst c = document.querySelector('#myCanvas');\nc.width = 500;\nc.height = 500;"},{"type":"subheader","crDate":1695890771481,"chDate":1695890777189,"text":"Context"},{"type":"paragraph","crDate":1695890781873,"chDate":1695901044355,"text":"Um mit dem Bildinhalt des Canvas zu interagieren, muss zunächst bestimmt werden, in welchem <i>Context</i> das Canvas verwendet werden soll. Im Rahmen dieser Dokumentation beschränken wir uns auf den Context <i>2d</i>.\nDie vom Canvas angebotenen Contexte sind:\n<ul>\n<li><b>2d</b>\nFunktioniert wie ein normales Bild: Das Canvas hat eine gewisse Anzahl an Pixeln horizontal und vertikal. Diese können direkt oder indirekt verändert werden.\n</li>\n<li><b>webgl, webgl2, webgpu</b>\nDie 3D-Contexte wird zum Zeichnen von dreidimensionalen Grafiken verwendet. \n</li>\n<li><b>bitmaprenderer</b>\nDient nur dazu, den Bildinhalt mit einem anderen Bildinhalt auszutauschen.\n</li>\n</ul>\nUm den Context zu bestimmen, dient die <i>getContext()</i>-Methode."},{"type":"code","crDate":1695901088173,"chDate":1695901111051,"text":"const c = document.querySelector('#myCanvas');\nconst ctx = c.getContext('2d');\nconsole.log(ctx);  // -> CanvasRenderingContext2D "}]}