{"content":[{"type":"paragraph","crDate":1697803143854,"chDate":1710766693266,"text":"Socket.io ist eine Library, um den Umgang mit Websocket zu erleichtern.\nEs muss dazu sowohl im Server als auch im Client eingebunden werden."},{"type":"subheader","crDate":1697807428535,"chDate":1697807432585,"text":"Server"},{"type":"paragraph","crDate":1697806705147,"chDate":1710766755104,"text":"Ein pragmatischer Weg, um socket.io einzubinden erfolgt in drei Schritten:\n<ol>\n<li>Express: Zunächst wird ein Express-Server eingerichtet. Dieser erleichtert den Zugriff auf die statischen Dateien erheblich.</li>\n<li>Http: Der http-Server ist notwendig, damit socket.io die Route zur Frontend-Library anlegen kann. Dem http-Server wird mit dem Parameter der Express-Server übergeben</li>\n<li>socket.io: Der Websocket-Server wird mit dem http-Server verbunden, um die Frontend-Library einzubinden.</li>\n</ol>"},{"type":"code","crDate":1692977283898,"chDate":1692977294569,"text":"// Express\nimport express from 'express';\nconst expressServer = express();\nexpressServer.use(express.static('public'));\n\n// http\nimport http from 'http';\nconst httpServer = http.Server(expressServer);\n\n// Websocket\nimport {Server} from 'socket.io';\nconst io = new Server(httpServer);\n\n// FUNKTIONEN\nconst init = () => {\n httpServer.listen(80, err => console.log(err || 'Server läuft'));\n}\n\nio.on('connect', socket => {\n console.log(socket.id);\n})\n\n// INIT\ninit();"}]}