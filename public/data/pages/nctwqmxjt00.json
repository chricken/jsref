{"content":[{"type":"paragraph","crDate":1686318632735,"chDate":1686319741811,"text":"<i>Iteration</i> bedeutet, dass die Slots in einer definierten Reihenfolge nacheinander angesprochen werden. \nDa die Attribute eines Objektes keine solche Reihenfolge aufweisen, kann ein Objekt eigentlich nicht iteriert werden.\nEs gibt allerdings Möglichkeiten."},{"type":"subheader","crDate":1686318760845,"chDate":1686318772261,"text":"For-in-Schleife"},{"type":"paragraph","crDate":1686318775900,"chDate":1686319499312,"text":"for-in ist eine vereinfachte Variante der <i>for-Schleife</i>. Diese kopiert in jedem Durchlauf den jeweils nächsten Attributnamen (<i>key</i>) in die Variable, welche in der Schleifendefinition angelegt wird.\nDer Key kann dann verwendet werden, um aus dem Objekt den gewünschten Value zu entnehmen. Damit ist das Problem gelöst, dass die Reihenfolge unklar ist, da der Key bekannt ist.\n"},{"type":"code","crDate":1686319576200,"chDate":1686319707342,"text":"const meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    farbe: 'braun',\n    leasing: false\n}\n\nfor ( let key in meinAuto){\n    let value = meinAuto[key];\n    console.log(`${key}: ${value}`);  // -> marke: Hyundai\n                                      // -> modell: i20   \n                                      // -> leistungKW: 62\n                                      // -> farbe: braun\n                                      // -> leasing: false\n}"},{"type":"subheader","crDate":1686319781712,"chDate":1686319792048,"text":"Zum Array wandeln"},{"type":"paragraph","crDate":1686319799615,"chDate":1686323364204,"text":"Es gibt drei verschiedene Methoden, um ein Objekt zu einem Array umzuwandeln.\n<i>Object.keys(value)</i> - überträgt nur die Schlüssel als Array\n<i>Object.value(value)</i> - überträgt nur die Werte als Array\n<i>Object.entries(value)</i> - überträgt Schlüssel und Werte in Form eines Arrays als zweidimensionales Array\nDas Array kann dann problemlos mit allen für Arrays zur Verfügung stehenden Methoden iteriert werden."},{"type":"code","crDate":1686323409728,"chDate":1686323564876,"text":"const meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    leasing: false\n}\n\nObject.keys(meinAuto).forEach(value => {\n    console.log(value);  // -> marke\n                         // -> modell\n                         // -> leistungKW\n                         // -> leasing\n})"},{"type":"code","crDate":1686323599370,"chDate":1686323635007,"text":"'use strict';\n\nconst meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    leasing: false\n}\n\nObject.values(meinAuto).forEach(value => {\n    console.log(value);  // -> Hyundai\n                         // -> i20\n                         // -> 62\n                         // -> false\n})"},{"type":"code","crDate":1686323667591,"chDate":1686323704882,"text":"'use strict';\n\nconst meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    leasing: false\n}\n\nObject.entries(meinAuto).forEach(value => {\n    console.log(value);  // -> [ 'marke', 'Hyundai' ]\n                         // -> [ 'modell', 'i20' ]\n                         // -> [ 'leistungKW', 62 ]\n                         // -> [ 'leasing', false ]\n})"},{"type":"paragraph","crDate":1686323745911,"chDate":1686324140633,"text":"Das Array kann auch problemlos mit allen für Arrays zur Verfügung stehenden Methoden verarbeitet werden.\nDer Code unten macht nicht wirklich Sinn, soll nur die Möglichkeiten zeigen."},{"type":"code","crDate":1686324142712,"chDate":1686324166432,"text":"const meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    leasing: false\n}\n\nconst result = Object.entries(meinAuto)\n    .filter(value => (typeof value[1]) == 'string')\n    .map(value => value[1])\n    .map(value => value.toUpperCase())\n    .forEach(value => console.log(value))  // -> HYUNDAI\n                                           // -> I20"}]}