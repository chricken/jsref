{"content":[{"type":"paragraph","crDate":1693314148515,"chDate":1693559677665,"text":"React bietet eine Komponentenarchitektur, die es Entwicklern ermöglicht, <i>wiederverwendbare</i> und <i>modulare</i> UI-Komponenten zu erstellen. In React sind Komponenten wie Bausteine, aus denen die Benutzeroberfläche zusammengesetzt ist. Jede Komponente kann ihren eigenen Zustand verwalten und auf Änderungen reagieren.\nEs gibt zwei grundlegende Weisen, Komponenten zu erzeugen: \n<ul>\n<li>Die Functional Components, die seit der Einführung der <i>Hooks</i> breite Verwendung finden</li>\n<li>Die Klassen-Syntax, die mittlerweile als veraltet angesehen werden kann</li>\n</ul>"},{"type":"subheader","crDate":1683294495214,"chDate":1693314461268,"text":"Functional Component"},{"type":"paragraph","crDate":1693559824294,"chDate":1693561798761,"text":"Eine Functional Component ist eine Funktion, die JSX-Code zurückgibt. Sie ist eine Alternative zu Klassenkomponenten und wird seit der Einführung von <i>Hooks</i> (React 16.8) bevorzugt.\nFunctional Components sind einfacher zu schreiben und zu verstehen als Klassenkomponenten, weil viele Notwendigkeiten (this-Element, binding, etc.) wegfallen. Sie sind auch performanter, da sie nicht dieselben Lebenszyklus-Hooks wie Klassenkomponenten haben.\nDer Name der Komponenten muss immer mit einem Großbuchstaben beginnen.\nWenn die Komponente aus mehr als einem DOM-Element besteht, kann sie in einem <i>Fragment</i> zusammengefasst sein. Dies ist einfach eine <i>leere spitze Klammer</i>."},{"type":"code","crDate":1693561170116,"chDate":1693562514662,"text":"const App = () => {\n return (\n  &lt;>\n   &lt;h1>Meine App&lt;/h1>\n   &lt;p>Ich bin ein Absatz&lt;/p>\n  &lt;/>\n )\n}"},{"type":"subheader","crDate":1693561501014,"chDate":1693561507532,"text":"Einbinden der Komponente"},{"type":"paragraph","crDate":1693561511884,"chDate":1693561955996,"text":"Für komplexere Apps müssen Komponenten in andere Komponenten verschachtelt werden. Dies geschieht mit den spitzen Klammern, wie bei jedem anderen DOM-Element auch.\nDie Komponente kann beliebig oft eingebunden werden und sie kann beliebig komplex sein. Die eingebundene Komponente kann selbst auch andere Komponenten einbinden.\nRekursionen werden als Fehler ausgegeben."},{"type":"code","crDate":1693562330922,"chDate":1693562498702,"text":"const App = () => {\n return (\n  &lt;>\n   &lt;h1>Meine App&lt;/h1>\n   &lt;Text />\n  &lt;/>\n )\n}\n\nconst Text = () => {\n return (\n  &lt;>\n   &lt;div>\n    &lt;Ueberschrift />\n    &lt;Absatz />\n    &lt;Absatz />\n    &lt;Absatz />\n   &lt;/div>\n  &lt;/>\n )\n}\n\nconst Ueberschrift = () => &lt;h2>Ich bin die Überschrift&lt;/h2>\n\nconst Absatz = () => &lt;p>Hier ist ein Absatz&lt;/p>"},{"type":"subheader","crDate":1693314532031,"chDate":1693314535534,"text":"Parameter"},{"type":"paragraph","crDate":1693562676161,"chDate":1693562937117,"text":"Häufig muss eine oder mehrere Informationen an eine Komponente übergeben werden. Dies kann der anzuzeigende Inhalt sein, eine Callback-Funktion oder etwas anderes.\nParameter werden einfach in den Komponenten-Aufruf geschrieben wie DOM-Attribute. Alle Attribute werden in ein Objekt zusammengefasst und dieses Objekt wird an die Komponente übergeben."},{"type":"code","crDate":1693563424595,"chDate":1693563540517,"text":"const App = () => {\n return (\n  &lt;>\n   &lt;h1>Meine App&lt;/h1>\n   &lt;Text />\n  &lt;/>\n )\n}\n\nconst Text = () => {\n return (\n  &lt;>\n   &lt;div>\n    &lt;Absatz content=\"Der Himmel ist blau.\" />\n    &lt;Absatz content=\"Blau wird stärker gestreut als Rot.\" />\n    &lt;Absatz content=\"Ohne den Effekt wäre der Himmel schwarz.\" />\n   &lt;/div>\n  &lt;/>\n )\n}\n\nconst Absatz = props => &lt;p>{props.content}&lt;/p>"},{"type":"code","crDate":1693563908576,"chDate":1693564053960,"text":"const App = () => {\n const myFunction = () => {\n  alert('Ich bin die Callback-Funktion');\n }\n return (\n  &lt;>\n   &lt;h1>Meine App&lt;/h1>\n   &lt;Btn callback={myFunction} content=\"Click Me\" />\n  &lt;/>\n )\n}\n\nconst Btn = props => {\n return (\n  &lt;>\n   &lt;p>\n    &lt;button onClick={props.callback}>\n     {props.content}\n    &lt;/button>\n   &lt;/p>\n  &lt;/>\n )\n}"},{"type":"subheader","crDate":1693314464165,"chDate":1693314470489,"text":"Component-Class"},{"type":"paragraph","crDate":1693314472859,"chDate":1693564080709,"text":"Diese Syntax kann als veraltet angesehen werden und wird hier nicht mehr besprochen."}]}