{"content":[{"type":"paragraph","crDate":1707395600891,"chDate":1707396785331,"text":"In JS sind alle Zahlen eigentlich vom Datentyp Number, also <i>double precision float</i>. Es gibt aber die Möglichkeit, Arrays mit anderen, dedizierten Datentypen zu verwenden. Diese Arrays verhalten sich, als würden sie tatsächlich mit den genannten Datentypen arbeiten. Das kann hilfreich sein, um bestimmte Fehler zu vermeiden oder um ohne großen Aufwand sicherzugehen, dass die Zahlen in einem definierten Bereich sind.\nDie Arrays kennen dieselben Methoden, die auch von normalen Arrays verwendet werden."},{"type":"subheader","crDate":1707396659419,"chDate":1707396794410,"text":"Signed Integer"},{"type":"paragraph","crDate":1707396666027,"chDate":1707400393773,"text":"Die Constructors <i>Int8Array()</i>, <i>Int16Array()</i> und <i>Int32Array()</i> erzeugen je ein Array mit Ganzzahlen von der genannten Bittiefe. Nachkommastellen werden weggekürzt.\n<i>Signed</i> bedeutet, dass die Vorzeichen berücksichtigt werden. Das hat zur Folge, dass in einem solchen Array nur Zahlen von -128 bis +127 gespeichert werden. Alle Zahlen darüber oder darunter werden am anderen Ande des Spektrums weitergezählt.\nAm Beispiel von Int8Array:\n<ul>\n<li>127 -> 127</li>\n<li>128 -> -128</li>\n<li>129 -> -127</li>\n<li>-129 -> 127</li>\n<li>-128 -> -128</li>\n<li>Math.PI -> 3</li>\n</ul>"},{"type":"code","crDate":1707400588929,"chDate":1707400702851,"text":"const arr = [127, 128, 129, Math.PI]  \n// -> [ 127, 128, 129, 3.141592653589793 ]\n\nconst ta = new Int8Array(arr); \n// -> Int8Array(4) [ 127, -128, -127, 3 ]\n\nconsole.log(arr);\nconsole.log(ta);"},{"type":"subheader","crDate":1707403841392,"chDate":1707403846153,"text":"Unsigned Integer"},{"type":"paragraph","crDate":1707403851194,"chDate":1707404358647,"text":"Die Konstruktoren <i>Uint8Array</i>, <i>Uint16Array</i> und <i>Uint32Array</i> erzeugen je ein Array mit ganzen Zahlen von der genannten Bittiefe. Da kein Vorzeichen enthalten ist, reicht der Zahlenbereich von 0 bis 255.\nAlle Zahlen darüber oder darunter werden am anderen Ande des Spektrums weitergezählt."},{"type":"code","crDate":1707403850185,"chDate":1707404998330,"text":"const arr = [-1, 0, 255, 256, 257]  \n\nconst ta = new Uint8Array(arr); \n\nconsole.log(arr);\n// -> [-1, 0, 255, 256, 257] \n\nconsole.log(ta);\n// -> Uint8Array(5) [ 255, 0, 255, 0, 1 ]"},{"type":"subheader","crDate":1707404379897,"chDate":1707404391864,"text":"Unsigned Clamped Array"},{"type":"paragraph","crDate":1707404394688,"chDate":1707404877132,"text":"Dieses typisierte Array ist mglw. die interessanteste Variante und eignet sich hervorragend für den Umgang mit Farben. \nDas Array ist mit Ganzzahlen von 0 bis 255 gefüllt. Zahlen darüber und darunter werden auf 0 bzw. 255 begrenzt."},{"type":"code","crDate":1707404889618,"chDate":1707404955757,"text":"const arr = [-1, 0, 255, 256, 257]; \nconst ta = new Uint8ClampedArray(arr);\n\nconsole.log(arr);\n// -> [ -1, 0, 255, 256, 257 ]\n\nconsole.log(ta);\n// -> Uint8ClampedArray(5) [ 0, 0, 255, 255, 255 ]"}]}