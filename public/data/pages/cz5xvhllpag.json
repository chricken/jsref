{"content":[{"type":"paragraph","crDate":1722254675917,"chDate":1722257057316,"text":"Manchmal kommt es vor, dass ein Import nur unter gewissen Umständen ausgeführt werden soll. Oder das importierte Modul soll nur in einem bestimmten Scope sichtbar sein. In dem Fall ist eine Import-Funktion, auch bekannt als Dynamic Import, hilfreich.\n"},{"type":"paragraph","crDate":1722256029681,"chDate":1722257416688,"text":"Die <i>import()</i>-Funktion bekommt den Pfad zu dem zu ladenden Modul übergeben. Sie gibt einen Promise zurück, der als Parameter das geladene Modul enthält. Dieses Modul enthält alle exportierten Variablen, auch einen exportierten default.\nIm Beispiel unten exportiert das Modul ein Objekt, das in die <i>Callback</i>-Funktion der <i>then()</I>-Methode übergeben wird.."},{"type":"code","crDate":1722257445556,"chDate":1722257487649,"text":"// myModule.js\n\nlet radius = Math.random() * 100;\n\nconst circle = {\n get circumference(){ \n  return radius * 2 * Math.PI;\n },\n get area(){\n  return radius ** 2 * Math.PI;\n }\n}\n\nexport default circle;\nexport let circ = circle.circumference;\nexport let area = circle.area;"},{"type":"code","crDate":1722257524037,"chDate":1722257607712,"text":"import('./mymodule.js').then(\n module => {\n  console.log(module);\n }\n).catch(\n console.warn\n)"},{"type":"paragraph","crDate":1722257733776,"chDate":1722955545448,"text":"Durch Destructuring können die imports aus dem Objekt gelöst werden."},{"type":"code","crDate":1722258109588,"chDate":1722258121568,"text":"import('./mymodule.js').then(\n ({area}) => {\n  console.log(area);\n }\n).catch(\n console.warn\n)"}]}