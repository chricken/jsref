{"content":[{"type":"paragraph","crDate":1685626494009,"chDate":1686824710050,"text":"Der Datentyp <i>bigInt</i> oder <i>big integer</i> wurde erdacht, um mit Zahlen arbeiten zu können, die für Number zu groß sind (Number.MAX_SAFE_INTEGER - 9007199254740991).\nBigInt unterstützt keine Nachkommastellen, kann dafür angeblich beliebig groß sein.\nBigInt ist sein eigener Datentyp.\nBei der Initialisierung kann entweder die Bigint-Funktion verwendet werden oder der Wert wird durch ein <i>n</i> markiert."},{"type":"code","crDate":1685627139430,"chDate":1686824789277,"text":"// Markierung mit \"n\"\nlet x = 123n;\nconsole.log(x);  // -> 123n\nconsole.log(typeof x);  // -> bigint\n\n// Mit einer BigInt-Funktion\nx = BigInt(123456);\nconsole.log(x);  // -> 123456n"},{"type":"paragraph","crDate":1685627523442,"chDate":1685628113641,"text":"Mit BigInt können alle Rechen-Operatoren eingesetzt werden.\nAllerdings können bigInts nur mit anderen bigInts verrechnet werden. \nAlle Operatoren geben Ganzzahlen zurück. Kommazahlen werden abgerundet."},{"type":"code","crDate":1685627708508,"chDate":1686824860599,"text":"let y = 101n;\ny /= 3n;\nconsole.log(y);  // -> 33n\n\nlet x = 123n;\n\nx **= 2n;\nconsole.log(x); // -> 15241383936n\n\nx **= 2n;\nconsole.log(x); // -> 232299784284558852096n\n\nx **= 2n;\nconsole.log(x);  // -> 53963189778652575835351234834193203593216n\n\nx **= 2n;\nconsole.log(x);  // -> 2912025851086873836579616988509308779992545 ...\n                 // ... 841373182590290740178200719573601222656n"}]}