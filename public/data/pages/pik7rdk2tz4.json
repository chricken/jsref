{"content":[{"type":"paragraph","crDate":1689254136399,"chDate":1689257031381,"text":"Der Begriff Ajax stand ursprünglich für \"Asynchronous JavaScript and XML\". Diese Abkürzung geriet allerdings schnell in die Kritik und wird heute eher als Eigenbegriff verwendet. Deswegen wird Ajax auch nicht mehr in Großbuchstaben geschrieben. \nAjax ermöglicht es, Daten asynchron zwischen dem Browser und dem Server auszutauschen, ohne die gesamte Webseite neu zu laden. Es ermöglicht eine reibungslosere und interaktivere Benutzererfahrung, da Inhalte dynamisch aktualisiert werden können, ohne dass der Benutzer die Seite verlassen oder neu laden muss.\nEinige Anwendungen für Ajax sind:\n<ul>\n<li>Dynamisches Aktualisieren von Inhalten</li>\n<li>Laden und Speichern von Daten, ohne die Webseite neu laden zu müssen</li>\n<li>Serverseitige Validation von Formulardaten</li>\n<li>Reduzierung des Datenverkehrs und der Serverbelastung.</li>\n<li>Schnelle und dynamische Benutzeroberflächen sofortige Rückmeldungen erhalten</li>\n<li>Integration von APIs und Datenquellen</li>\n</ul>\nAjax basiert auf dem HTTP-Protokoll. Daher sollten ein paar Grundlagen über HTTP bekannt sein."},{"type":"subheader","crDate":1689256053860,"chDate":1689256064754,"text":"HTTP"},{"type":"paragraph","crDate":1689256067841,"chDate":1689257128593,"text":"Das <i>Hypertext Transfer Protocol</i> (HTTP) ist ein Netzwerkprotokoll, das für die Kommunikation zwischen Webbrowsern und Webservern verwendet wird. Es legt Regeln und Verfahren fest, wie Daten zwischen einem Client (z. B. einem Webbrowser) und einem Server ausgetauscht werden.\nDie wichtigsten Merkmale HTTP-Protokolls:\n<ul>\n<li><b>Anfragen und Antworten</b>: HTTP basiert auf dem Client-Server-Modell, bei dem der Client eine Anfrage sendet und der Server eine Antwort zurückgibt. Der Client sendet eine HTTP-Anfrage an den Server, die eine bestimmte Aktion anfordert, wie das Abrufen einer Webseite oder das Übermitteln von Daten. Der Server antwortet mit einer HTTP-Antwort, die die angeforderten Daten oder den Status der Anfrage enthält.</li>\n<li><b>Zustandslosigkeit</b>: HTTP ist zustandslos, was bedeutet, dass der Server keine Informationen über vorherige Anfragen des Clients speichert. Jede Anfrage wird unabhängig behandelt, und der Server kennt den Kontext der vorherigen Anfragen nicht. Dies ermöglicht eine skalierbare und einfache Kommunikation zwischen Client und Server, erfordert jedoch zusätzliche Mechanismen wie Cookies oder Sitzungsverfolgung, um den Zustand zwischen den Anfragen zu speichern.</li>\n<li><b>URL und Ressourcen</b>: HTTP verwendet Uniform Resource Locators (URLs) zur Identifizierung von Ressourcen, die vom Server bereitgestellt werden. Eine URL besteht aus dem Protokoll (z. B. \"http://\" oder \"https://\"), dem Domainnamen, dem Pfad und optionalen Query-Parametern. Durch Angabe einer URL in der HTTP-Anfrage kann der Client eine bestimmte Ressource anfordern.</li>\n<li><b>Header</b>: HTTP verwendet Header, um zusätzliche Informationen in einer Anfrage oder Antwort zu übermitteln. Header können Informationen wie den Content-Type, die Länge der Daten, Cookies, Authentifizierungsdetails und andere Metadaten enthalten.</li>\n</ul>\nDas HTTP-Protokoll bildet die Grundlage für den Austausch von Informationen im World Wide Web. Es ermöglicht die Abfrage und Übermittlung von HTML-Dokumenten, Bildern, Videos, APIs und mehr. HTTP wird von Webbrowsern, mobilen Apps und anderen HTTP-fähigen Clients verwendet, um mit Webservern zu kommunizieren und Inhalte im Internet abzurufen."},{"type":"paragraph","crDate":1689256502554,"chDate":1689257349825,"text":"Für Webentwickler sind vor allem die möglichen Methoden wichtig, über die per HTTP kommuniziert werden kann.\n<ul>\n<li><b>GET</b>: Die GET-Methode wird verwendet, um Daten vom Server abzurufen. Der Client sendet eine GET-Anfrage an den Server und erhält eine Antwort, die die angeforderten Daten enthält. GET-Anfragen sollten idempotent sein, was bedeutet, dass sie keinen Einfluss auf den Zustand des Servers haben sollten. GET wird normalerweise verwendet, um Webseiten, Bilder, Dateien und andere statische oder dynamische Inhalte abzurufen.</li>\n<li><b>POST</b>: Die POST-Methode wird verwendet, um Daten an den Server zu senden. Mit POST können Clients Daten, wie beispielsweise Formulardaten, an den Server übermitteln. Der Server kann die übermittelten Daten verarbeiten und eine entsprechende Antwort zurückgeben. Im Gegensatz zu GET-Anfragen sollten POST-Anfragen nicht idempotent sein, da sie den Zustand des Servers ändern können, beispielsweise indem sie Daten in einer Datenbank speichern.</li>\n<li><b>PUT</b>: Die PUT-Methode wird verwendet, um eine Ressource auf dem Server zu aktualisieren. Der Client sendet eine PUT-Anfrage mit den aktualisierten Daten an den Server. Wenn die Ressource bereits vorhanden ist, wird sie aktualisiert. Andernfalls kann der Server eine neue Ressource erstellen. PUT-Anfragen sollten idempotent sein, dh das wiederholte Senden derselben PUT-Anfrage sollte immer das gleiche Ergebnis haben.</li>\n<li><b>DELETE</b>: Die DELETE-Methode wird verwendet, um eine Ressource auf dem Server zu löschen. Der Client sendet eine DELETE-Anfrage, um den Server aufzufordern, die angegebene Ressource zu entfernen. DELETE-Anfragen sollten idempotent sein, dh das wiederholte Senden derselben DELETE-Anfrage sollte immer dasselbe Ergebnis haben.</li>\n<li><b>PATCH</b>: Die PATCH-Methode wird verwendet, um eine Teilmenge einer Ressource zu aktualisieren. Im Gegensatz zu PUT, bei dem die gesamte Ressource ersetzt wird, ermöglicht PATCH die Aktualisierung nur der geänderten Teile einer Ressource. Der Client sendet eine PATCH-Anfrage mit den zu aktualisierenden Daten an den Server.</li>\n<li><b>OPTIONS</b>: Die OPTIONS-Methode wird verwendet, um Informationen über die unterstützten HTTP-Methoden und Optionen für eine bestimmte Ressource abzurufen. Der Server antwortet mit einer Liste der unterstützten Methoden und anderen relevanten Informationen.</li>\n</ul>\nEs gibt auch weitere seltener verwendete HTTP-Methoden wie HEAD, TRACE, CONNECT und mehr, die aber in der Praxis keine Rolle spielen. Jede Methode hat ihre eigene Verwendung und spezifische Bedeutung im Kontext der Interaktion zwischen Client und Server.\nGrundsätzlich kann aber gesagt werden, dass alle Methoden bis auf GET auf die gleiche Weise angewendet werden."},{"type":"subheader","crDate":1683293743024,"chDate":1683293746703,"text":"Fetch"},{"type":"subheader","crDate":1683293704006,"chDate":1683293732649,"text":"HTTP-Request"},{"type":"paragraph","crDate":1689255169813,"chDate":1689256047323,"text":"Der ursprüngliche Weg, mit dem Server zu kommunizieren, läuft über das <i>XMLHttpRequest</i>-Objekt. Dieses wird über den gleichnamigen Constructor erzeugt.\nDieses Objekt stellt alle notwendigen Informationen und Methoden zur Kommunikation mit dem Server bereit.\n"}]}