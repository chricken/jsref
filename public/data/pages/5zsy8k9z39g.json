{"content":[{"type":"paragraph","crDate":1754056690443,"chDate":1754387788529,"text":"Interfaces sind eine fortgeschrittene Möglichkeit, um die Struktur von Objekten vorzudefinieren.\nEin Interface ist in TS eine Typescript-eigene Struktur, die es in Javascript (noch) nicht gibt. Beim Kompilieren verschwindet diese Struktur. Sie prüft die Struktur also nur im Entwicklungsprozess."},{"type":"paragraph","crDate":1754056903428,"chDate":1754292782730,"text":"Um ein Interface anzulegen, wird das Schlüsselwort <i>interface</i> verwendet. \nIn ihm werden die Attributnamen mit den Datentypen deklariert.\nFalls nun ein Objekt mit anderen Attributen angelegt werden soll, führt dies zu einer Fehlermeldung im Editor. Dieser markiert die Unstimmigkeit. \nIm Browser dagegen wird zur Laufzeit kein Fehler generiert."},{"type":"code","crDate":1754057136750,"chDate":1754292036365,"text":"interface Person {\n nName: string,\n vName: string,\n yearOfBirth: number\n}\n\nlet myObj: Person = {\n vName: 'Max',\n nName: 'Mustermann',\n yearOfBirth: 1990,\n location: 'Musterstadt'  // -> Fehlermeldung im Editor aber nicht zur Laufzeit\n}\n\nconsole.log(myObj);"},{"type":"subheader","crDate":1754293025090,"chDate":1754293030345,"text":"Vererbung"},{"type":"paragraph","crDate":1754293032951,"chDate":1754293419300,"text":"Interfaces können, ähnlich wie Klassen, vererbt werden. Dadurch lassen sich komplexe modulare Strukturen aufbauen."},{"type":"code","crDate":1754293134178,"chDate":1754293160581,"text":"interface Person {\n nName: string,\n vName: string,\n yearOfBirth: number\n}\n\ninterface Employee extends Person {\n maNumber: string,\n location: string,\n}\n\nlet myObj: Employee = {\n vName: 'Max',\n nName: 'Mustermann',\n yearOfBirth: 1990,\n location: 'Musterhausen',\n maNumber: '123456789'\n}\n\nconsole.log(myObj);"},{"type":"subheader","crDate":1754293570081,"chDate":1754293575191,"text":"readonly"},{"type":"paragraph","crDate":1754293579013,"chDate":1754293852529,"text":"Attribute können mit dem <i>readonly</i>-Attribut schreibgeschützt werden.\nFalls im Code versucht wird, das Attribut zu überschreiben, wird dies als Fehler markiert."},{"type":"code","crDate":1754293870327,"chDate":1754293904210,"text":"interface Employee {\n readonly maNumber: string,\n nName: string,\n vName: string,\n}\n\nlet ma: Employee = {\n maNumber: '123456789',\n vName: 'Max',\n nName: 'Mustermann',\n}\n\nma.maNumber = '987654321';  // -> Fehlermeldung\n\nconsole.log(ma);"},{"type":"subheader","crDate":1754386369403,"chDate":1754386375185,"text":"Optionale Parameter"},{"type":"paragraph","crDate":1754386378553,"chDate":1754387619768,"text":"In einem Interface oder einer Klasse ist es üblich, optionale Attribute mit Fragezeichen zu markieren.\nIn einer Klasse allerdings enthält das Attribut dann den Value <i>undefined</i>. In dem Fall muss dann mit einer bedingten Anweisung das Einhängen eingeschränkt oder mit einem Default-Value gefüllt werden."},{"type":"code","crDate":1754386554097,"chDate":1754387336208,"text":"interface Person {\n nName: string,\n vName: string,\n location?: string\n}\n\nlet myObj: Person = {\n vName: 'Max',\n nName: 'Mustermann',\n location: 'Musterstadt'\n}\n\nconsole.log(myObj);"},{"type":"code","crDate":1754387415701,"chDate":1754387430132,"text":"class Person {\n nName: string;\n vName: string;\n location?: string;\n\n constructor(nName: string, vName: string, location?: string) {\n  this.nName = nName;\n  this.vName = vName;\n  this.location = location;\n }\n}\n\nlet myObj = new Person('Mustermann', 'Max', 'Musterstadt');\n\nconsole.log(myObj);"}]}