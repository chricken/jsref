{"content":[{"type":"paragraph","crDate":1692793788490,"chDate":1692794408998,"text":"Die <i>fetch()</i>-Methode ruft Ressourcen von einem Server ab. Diese Ressourcen können u.a. HTML-, CSS-, JS-, JSON-, XML-, Bild- oder irgendwelche anderen Dateien sein. \nFetch() ist eine asynchrone Methode, die einen Promise zurückgibt, der die Antwort auf die Anfrage repräsentiert. Der Promise kann verwendet werden, um die Antwort zu verarbeiten, sobald sie verfügbar ist.\nJe nach verwendeter Methode werden unterschiedliche Argumente übergeben."},{"type":"subheader","crDate":1692794416398,"chDate":1692794423469,"text":"get-Methode"},{"type":"paragraph","crDate":1692794429365,"chDate":1692795333836,"text":"Get ist die Standard-Methode, mit der <i>fetch()</i> verwendet wird. Daher müssen bei der Verwendung der get-Methode neben der URL keine weiteren Argumente übergeben werden. Als einziger Parameter wird die URL übergeben. "},{"type":"code","crDate":1692795465524,"chDate":1692795544686,"text":"fetch('/url/to/ressource')"},{"type":"subheader","crDate":1692795555701,"chDate":1692795589954,"text":"Andere Methoden"},{"type":"paragraph","crDate":1692795602920,"chDate":1692796861289,"text":"Die POST-, PUT-, DELETE-, HEAD- OPTIONS- und TRACE-Methoden funktionieren alle auf die gleiche Weise. Daher werden wir uns hier stellvertretend nur mit POST auseinandersetzen.\nWeitere Informationen zur Abfrage werden in einem zusätzlichen Objekt neben der URL angegeben. Dieses Objekt kann die folgenden Attribute enthalten:\n<b>method</b>\nDie verwendete Methode. Dies ist einfach der Name der HTTP-Methode. Groß- / Kleinschreibung spielt dabei keine Rolle.\n<b>headers</b>\nIn den Headers können zusätzliche Informationen an den Server übertragen werden. Zum Beispiel die Art, wie die Daten kodiert sind. Die Headers werden auf der Seite Ajax->Headers behandelt\n<b>body</b>\nDies enthält die Nutzdaten, auch Payload genannt.\n<b>credentials</b>\nDie Authentifizierungsinformationen für die Anfrage.\n<b>mode</b>\nDer Modus der Anfrage. Der Standardwert ist <i<cors</i>.\n<b>redirect</b>\nDie Art und Weise, wie die Anfrage bei einer Umleitung behandelt wird. Der Standardwert ist follow."},{"type":"code","crDate":1692796598929,"chDate":1692796603477,"text":"fetch('/url/to/ressource', {\n    method: 'post',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({ a: 1, b: 2 })\n})"},{"type":"subheader","crDate":1692798728021,"chDate":1692798731627,"text":"Antwort"},{"type":"paragraph","crDate":1692798725013,"chDate":1692799973882,"text":"Die <i>fetch()</i>-Funktion liefert einen <i>Promise</i> zurück. \nEine Antwort des Servers wird in Form eines <i>Request</i>-Objektes zurückgegeben. Dieses Objekt wird in der <i>then()</i>-Methode verarbeitet.\nDieses Objekt enthält einige Informationen wie:\n<b>status</b>\nDer HTTP-Statuscode der Anfrage\n<b>url</b>\nURL der Abfrage\n<b>ok</b>\nBoolean, ob die Anfrage erfolgreich war\n\nDas einzige, was hier nicht gefunden werden kann, sind die Nutzdaten.\nUm diese Nutzdaten auszulesen, enthält das Request-Objekt Methoden, die den Payload in die gewünschte Form bringen.\n<b>json()</b>\nSetzt einen JSON-String voraus und wandelt diesen in ein Objekt um.\n<b>text()</b>\nGibt den Payload als einfachen String aus.\n<b>arrayBuffer()</b>\nDatentyp, der eine Sammlung von Bytes darstellt. ArrayBuffers können verwendet werden, um beliebige binäre Daten zu speichern, z. B. Bilder, Audiodateien und Videodateien.\n<b>formData()</b>\nObjekt, das Daten speichert, die in einem Formular gesendet werden. FormData kann zum Senden von Text, Dateien und anderen Daten verwendet werden."}]}