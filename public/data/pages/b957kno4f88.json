{"content":[{"type":"paragraph","crDate":1696505733838,"chDate":1696506778823,"text":"Einzelne Pixel zu manipulieren lässt sich zwar mit 1*1px großen Rechtecken gut erledigen. Es gibt aber viele Gründe, auch die Pixel direkt verändern zu wollen. Dies sind einerseits Performance, andererseits Berechnungen, die so am einfachsten durchzuführen sind.\nDas Manipulieren der Pixel funktioniert üblicherweise in drei Schritten:\n<ul>\n<li>Exportieren des Canvas-Inhaltes in ein <i>imgData</i>-Objekt.</li>\n<li>Verändern des imgData-Objekte.</li>\n<li>Übertragen der Daten in den Canvas</li>\n</ul>"},{"type":"subheader","crDate":1696506091586,"chDate":1696506757227,"text":"imgData exportieren"},{"type":"paragraph","crDate":1696506759923,"chDate":1696507592900,"text":"Die <i>getImageData()</i>-Methode legt ein neues Objekt an, in dem neben der Breite und der Höhe der kopierten Bilddaten auch ein Array mit den Bilddaten liegt. Dieses Array ist ein sog. <i>Unsigned Integer 8Bit Clamped Array</i>. \nIn diesem Array sind für jeden Pixel vier Slots angelegt: Rot, Grün, Blau und Alpha (Transparenz). Jeder Kanal enthält eine Zahl von 0 bis 255."},{"type":"code","crDate":1696507618796,"chDate":1696507757121,"text":"const c = document.querySelector('#myCanvas');\nconst ctx = c.getContext('2d');\n\nconst myImgData = ctx.getImageData(0, 0, c.width, c.height);\nconsole.log(myImgData);  \n// -> { width: 300, height: 150, data: [0, 0, 0, 0, ... ] }"},{"type":"subheader","crDate":1696507819904,"chDate":1696507825990,"text":"Daten verändern"},{"type":"paragraph","crDate":1696507836502,"chDate":1696509024480,"text":"Das Array kann nun iteriert werden und die Farbkanäle können direkt beschrieben werden.\nDa das Array sehr groß sein kann, empfiehlt sich eine klassische Schleife, da diese viel schneller ausgeführt wird als zum Beispiel eine forEach()-Mathode. Außerdem kann die for-Schleife in Vierer-Schritten ausgeführt werden und damit immer den Rot-Kanal sowie durch einfache Inkrementierung auch die anderen Kanäle ansprechen."},{"type":"code","crDate":1696509480666,"chDate":1696509519277,"text":"const myImgData = ctx.getImageData(0, 0, c.width, c.height);\nlet data = myImgData.data;\n\nfor (let i = 0; i < data.length; i += 4) {\n let index = i / 4;\n let x = index % myImgData.width;\n let y = Math.floor(index / myImgData.width);\n\n x = 255 / myImgData.width * x;\n y = 255 / myImgData.height * y;\n\n myImgData.data[i] = x;\n myImgData.data[i + 1] = y;\n myImgData.data[i + 2] = 128;\n myImgData.data[i + 3] = 255;\n}"},{"type":"subheader","crDate":1696509526410,"chDate":1696509535686,"text":"Bilddaten zurückschreiben"},{"type":"paragraph","crDate":1696509538717,"chDate":1696509631652,"text":"Als letzter Schritt müssen noch die veränderten Bilddaten in das Canvas übertragen werden. Das kann das Canvas sein, aus dem die Daten stammen, aber auch ein anderes. Die Daten können auch an einen andere Stelle desselben Canvas geschrieben werden."},{"type":"code","crDate":1696510688322,"chDate":1696510716256,"text":"const c = document.querySelector('#myCanvas');\nconst ctx = c.getContext('2d');\n\nconst myImgData = ctx.getImageData(0, 0, c.width, c.height);\nlet data = myImgData.data;\n\nfor (let i = 0; i < data.length; i += 4) {\n let index = i / 4;\n let x = index % myImgData.width;\n let y = Math.floor(index / myImgData.width);\n\n x = 255 / myImgData.width * x;\n y = 255 / myImgData.height * y;\n\n myImgData.data[i] = x;\n myImgData.data[i + 1] = y;\n myImgData.data[i + 2] = 128;\n myImgData.data[i + 3] = 255;\n}\n\nctx.putImageData(myImgData, 0, 0);"},{"type":"image","crDate":1696510737766,"chDate":1696510737766,"filename":"99640a5d3547b6f9845e3a30c.png"}]}