{"content":[{"type":"paragraph","crDate":1722947746968,"chDate":1753785753023,"text":"Ein Effect ist jede Änderung der Daten in einer Komponenten.\nReact bietet mit <i>useEffekt()</i> eine Funktion, die auf solche Effekte reagieren kann. \nDie useEffect()-Funktion wird aus dem <i>react</i>-Modul importiert.\nJede Änderung der Variablen führt dazu, dass die Callback-Funktion ausgeführt wird.\nBeim Einbinden der Komponenten sowie bei jeder Änderung eines State wird die Callback-Funktion einmal ausgeführt. "},{"type":"code","crDate":1722949354925,"chDate":1722949536757,"text":"import { useState, useEffect } from 'react';\n\nconst App = () => {\n let [data, setData] = useState(100);\n\n const changeData = () => {\n  let num = ~~(Math.random() * 100);\n  setData(num);\n }\n\n useEffect(() => {\n  console.log('Data wurde geändert', data);\n })\n\n return (\n  &lt;>\n   &lt;p> {data} &lt;/p>\n   &lt;p> &lt;button onClick={changeData}>Change&lt;/button> &lt;/p>\n  &lt;/>\n )\n}"},{"type":"subheader","crDate":1722950222347,"chDate":1722950231379,"text":"Abhängigkeitsliste"},{"type":"paragraph","crDate":1722950234197,"chDate":1753785769383,"text":"Ein zweiter Parameter der <i>useEffect()</i>-Funktion erlaubt es, Abhängigkeiten zu definieren.\nDer Parameter bekommt ein Array übergeben mit den Namen der States, auf welche die useEffect()-Funktion reagieren soll;\nAuf diese Weise können mehrere useEffect()-Funktionen verwendet, um auf mehrere States in unterchiedlicher Weise zu reagieren."},{"type":"code","crDate":1722951490684,"chDate":1722952713700,"text":"import { useState, useEffect } from 'react';\n\nconst App = () => {\n\n let [data, setData] = useState(100);\n let [count, setCount] = useState(0);\n\n const changeData = () => {\n  let num = ~~(Math.random() * 100);\n  setData(num);\n }\n\n const inkrement = () => {\n  setCount(count+1);\n }\n\n useEffect(() => {\n  console.log('Data wurde geändert', data);\n }, [data]);\n\n return (\n  &lt;>\n   &lt;p> {data} &lt;/p>\n   &lt;p> {count} &lt;/p>\n   &lt;p> &lt;button onClick={changeData}>Change&lt;/button> &lt;/p>\n   &lt;p> &lt;button onClick={inkrement}>Inkrement&lt;/button> &lt;/p>\n  &lt;/>\n )\n}"},{"type":"subheader","crDate":1722949881239,"chDate":1753785810119,"text":"Mount-Eventhandler"},{"type":"paragraph","crDate":1722949877543,"chDate":1753785828615,"text":"Wenn die Abhängigkeiten-Liste leer bleibt, dann reagiert die <i>useEffect()</i>-Funktion ausschließlich auf das Mounten des Elementes. \nDadurch lässt sich das Verhalten eines Eventlisteners simulieren. Dies kann hilfreich sein, um z.B. beim Starten der App Daten per Ajax zu laden oder andere Initialisierungen zu realisieren."},{"type":"code","crDate":1722952567583,"chDate":1722952680903,"text":"import { useState, useEffect } from 'react';\n\nconst App = () => {\n let [data, setData] = useState([]);\n\n const createElements = () => {\n  return data.map(planet => &lt;p>{planet.Name}&lt;/p>)\n }\n\n useEffect(() => {\n  console.log('Komponente wurde initialisiert', data);\n\n  fetch('./planeten.json').then(\n   res => res.json()\n  ).then(\n   res => setData(res)\n  ).catch(\n   console.warn\n  )\n }, []);\n\n return (\n  &lt;>\n   &lt;p> {createElements()} &lt;/p>\n  &lt;/>\n )\n}"}]}