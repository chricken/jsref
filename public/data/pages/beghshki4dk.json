{"content":[{"type":"paragraph","crDate":1686733700513,"chDate":1686734350016,"text":"Eine Funktion ist ein abgeschlossener Codeabschnitt, der eine bestimmte Aufgabe ausführt, sobald er aufgerufen wird. \nFunktionen werden verwendet, um den Code zu strukturieren, die Wiederverwendbarkeit zu erhöhen und komplexe Abläufe in einfachere Schritte zu zerlegen."},{"type":"subheader","crDate":1686734352649,"chDate":1686734360495,"text":"Arrow-Funktion"},{"type":"paragraph","crDate":1686734365960,"chDate":1686742219412,"text":"Der moderne Weg, eine Funktion zu schreiben, ist die sog. <i>Arrow-Funktion</i>. \nDie Syntax besteht aus einer runden Klammer, einem Arrow und einer geschweiften Klammer für den Codeblock. Der Codeblock wird auch <i>Funktionsrumpf</i>, <i>Funktionskörper</i> oder <i>Funktionsblock</i> genannt.\nDie Funktion kann in einer Variable oder Konstante gespeichert werden.\nUm sie aufzurufen, wird einfach der Name der Funktion mit einer Klammer geschrieben."},{"type":"code","crDate":1686735087834,"chDate":1686735328968,"text":"const myFunction = () => {\n    console.log('Ich bin eine Funktion.');  // -> Ich bin eine Funktion.\n}\nmyFunction();"},{"type":"subheader","crDate":1686736180826,"chDate":1686736186843,"text":"Parameter"},{"type":"paragraph","crDate":1686736224558,"chDate":1686737357281,"text":"Parameter sind Variablen, die beim Aufruf der Funktion mit Werten befüllt werden können.\nDie Parameter müssen nicht initialisiert werden, sondern werden einfach in die Klammer geschrieben. \nWird ein Parameter nicht übergeben, so enthält er <i>undefined</i>.\nFalls es nur einen Parameter gibt, kann die Klammer weggelassen werden. "},{"type":"code","crDate":1686737639388,"chDate":1686738532017,"text":"const myFunction = content => {\n    console.log(content);\n}\nmyFunction('Hallo Welt');             // -> Hallo Welt\nmyFunction('Sonne Mond und Sterne');  // -> Sonne Mond und Sterne"},{"type":"paragraph","crDate":1686737789982,"chDate":1686738166282,"text":"Ein Parameter kann beim Anlegen mit einem sogenannten <i>Default-Wert</i> belegt werden. \nFalls dieser Parameter nicht durch ein Argument beim Aufruf überschrieben wird, dann behält er den Standardwert."},{"type":"code","crDate":1686738342731,"chDate":1686738534311,"text":"const myFunction = (content = 'Keine Ausgabe') => {\n    console.log(content);\n}\nmyFunction('Hallo Welt');  // -> Hallo Welt\nmyFunction();              // -> Keine Ausgabe"},{"type":"subheader","crDate":1686738645503,"chDate":1686738651365,"text":"Rückgabewert"},{"type":"paragraph","crDate":1686738655398,"chDate":1686738880041,"text":"Ein Rückgabewert ist das Ergebnis, das von einer Funktion an den Aufrufer zurückgegeben wird. \nWenn eine Funktion keinen Rückgabewert hat, gibt sie ein <i>undefined</i> zurück. \nDer Rückgabewert wird durch das Schlüsselwort <i>return</i> angegeben."},{"type":"code","crDate":1686739090662,"chDate":1686739335705,"text":"const myFunction = (x, y) => {\n    return x * y;\n}\n\nlet result = myFunction(12, 23);\nconsole.log(result);  // -> 276\n\nlet summe = myFunction(2,3) + myFunction(4,5) + myFunction(6,7);\nconsole.log(summe);  // -> 68"},{"type":"subheader","crDate":1686739373735,"chDate":1686739380223,"text":"Kurzsyntax"},{"type":"paragraph","crDate":1686739384912,"chDate":1686825612542,"text":"Falls der Funktionskörper aus einem einzelnen Befehl besteht, kann auf die geschweifte Klammer verzichtet werden.\nIn dem Fall ist der Rückgabewert der Operation automatisch der Rückgabewert der Funktion."},{"type":"code","crDate":1686825568339,"chDate":1686828218475,"text":"const bogenmass = winkel => winkel / 180 * Math.PI;\n\nlet rechterWinkel = bogenmass(90);\nconsole.log(rechterWinkel);  // -> 1.5707963267948966\n\nlet andererWinkel = bogenmass(45);\nconsole.log(andererWinkel);  // -> 0.7853981633974483"}]}