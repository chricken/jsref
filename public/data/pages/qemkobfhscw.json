{"content":[{"type":"paragraph","crDate":1701443048335,"chDate":1706104348964,"text":"<i>Web Components</i> ist der native Weg, mit Komponenten zu arbeiten.\nEine Web Component wird in der Render-Engine des Browsers registriert und kann, wenn sie erstmal angelegt ist, mit HTML oder Javascript erzeugt werden.\nDie Entwicklung von Web Components begann bereits 2011, es gibt sie also schon eine ganze Weile. Da das Konzept in HTML5 integriert und 100%ig rückwärtskompatibel sein muss, gestaltet sich die Entwicklung schwierig und dauert länger als andere auf Komponenten basierende Technologien wie <i>React</i>, <i>Angular</i> oder <i>Vue</i>. \nAußerdem wirkt die Programmierung etwas angestaubt, da nur auf Standard-Techniken zurückgegriffen werden darf. Wogegen die Konkurrenz mit JSX, Decorators und anderem lockt.\nMit etwas Mühe ist es dennoch möglich, sich mit Web Components eine gute Infrastruktur zu erstellen. Und diese Mühe kann sich lohnen, denn die Vorteile sind recht überzeugend:\n<ul>\n<li>Web Components sind eine Standard-Technologie, die ohne weitere Software oder Transpiler funktioniert.</li>\n<li>Web Components bleiben für immer Bestandteil von HTML5</li>\n<li>Web Components werden beständig weiterentwicklet. Dazu gehört auch, dass der JS- und der HTML-Befehlssatz zunehmend an Web Components orientiert.</li>\n<li>Da Web Components unabhängig von Frameworks sind, können sie leicht in andere Projekte integriert werden.</li>\n<li>Da Web Components eine Standard-Technologie sindm, lassen sie sich auch in anderen Frameworks und Libraries einsetzen</li>\n</ul>\nWebcomponents basieren auf vier grundlegenden Spezifikationen: Custom Elements, Shadow DOM, ES Modules und HTML Template.\n"},{"type":"subheader","crDate":1701960134962,"chDate":1701960151734,"text":"Custom Elements"},{"type":"paragraph","crDate":1701960083298,"chDate":1706105436442,"text":"Ein Custom Element ist eine Syntax, die es erlaubt, ein neues DOM-Tag im Browser zu verwenden.\nNatürlich konnte man schon immer beliebige Tagnamen verwenden, um eigene Tags zu erfinden. Mit Custom Elements wird dies allerdings noch einige Schritte weiter gedacht.\nEin Custom Element enthält zusätzlichen Code, der den Inhalt, das Styling und die Verhaltensweisen steuert.\nUm ein <i>Custom Element</i> anzulegen, muss zunächst mithilfe einer Erweiterung der <i>HTMLElement</i>-Klasse eine eigene Klasse erzeugt werden, welche das Element definiert.\nÜber die <i>define()</i>-Methode des customElements-Objektes wird dann im Browser dieses neue HTML-Element registriert.\nDiese bekommt als ersten Parameter den gewünschten Namen des Custom Elements übergeben. Dieser Name muss einen Bindestrich enthalten, um sicherzugeheen, dass er nicht mit bestehenden Namen kollidiert.\nAls zweiter Parameter wird die Klasse übergeben, aus der sich die neue Komponente definiert."},{"type":"code","crDate":1706103275684,"chDate":1706105754922,"text":"class myWB extends HTMLElement { }\n\ncustomElements.define('my-wb', myWB);"},{"type":"subheader","crDate":1701960388068,"chDate":1701960397692,"text":"HTML Templates"},{"type":"paragraph","crDate":1701960400293,"chDate":1706105695877,"text":"Die Struktur der Komponente wird in einem sog. Template vorbereitet und dann in die Komponente integriert. Das wird so gemacht, damit beim mehrfachen Einbinden einer Komponenten dynamische Veränderungen der einen Komponente die anderen nicht beeinflusst.\nDas Template besteht aus DOM-Elementen, welche zur Laufzeit erzeugt werden. Hier kann zwar auch ein langer String verwendet werden, dieser ist aber schwer zu lesen und zu manipulieren.\nDaher empfiehlt sich die Verwendung von JS-Code.\nDie Einbindung in die Komponente erfolgt weiter unten im Abschnitt <i>Shadow DOM</i>"},{"type":"code","crDate":1706105706614,"chDate":1706105749842,"text":"const template = document.createElement('div');\ntemplate.innerHTML = 'Dies ist mein eigene Custom Element';\ntemplate.className = 'myComponent';\n\nclass myWB extends HTMLElement { }\n\ncustomElements.define('my-wb', myWB);"},{"type":"subheader","crDate":1701960186635,"chDate":1701960192075,"text":"Shadow DOM"},{"type":"paragraph","crDate":1701960195179,"chDate":1706106299175,"text":"Damit eine Komponente vollkommen unabhängig funktioniert, muss sichergestellt werden, dass die Komponente nicht von außen manipuliert werden kann. Aber auch, das die Komponente nicht andere Bestandteile manipuliert. Dafür sorgt das Shadow DOM. Dieses fasst die Definitionen in einen geschlossenen Container.\nSo beeinflusst z.B. das CSS keine Bestandteile außerhalb der Web Component.\nDas Shadow DOM wird in der <i>constructor()</i>-Methode mit der Komponente verknüpft.\nEine <i>Kopie</i> des HTML-Templates wird dann an den Shadow DOM angehängt. Eine Kopie deswegen, damit sich dynamische Änderungen in der Struktur einer <i>Komponenteninstanz</i> in den anderen Instanzen nicht auswirken."},{"type":"code","crDate":1706104255139,"chDate":1706106385235,"text":"'use strict';\n\nconst template = document.createElement('div');\ntemplate.innerHTML = 'Dies ist mein eigene Custom Element';\ntemplate.className = 'myComponent';\n\nclass myWB extends HTMLElement {\n constructor(){\n  super();\n  this.root = this.attachShadow();\n  this.root.append(template.cloneNode(true));\n }\n}\n\ncustomElements.define('my-wb', myWB);"},{"type":"subheader","crDate":1701960321747,"chDate":1701960326930,"text":"ES Modules"},{"type":"paragraph","crDate":1701960329297,"chDate":1706103821483,"text":"Der Code zum Anlegen eines CustomElements sollte in einer eigenen Datei liegen. \nDa die Komponente direkt im Window registriert wird, steht sie sofort global zur Verfügung. Daher braucht nichts exportiert zu werden."},{"type":"code","crDate":1706103830186,"chDate":1706103847454,"text":"// Datei my_ws.js"},{"type":"code","crDate":1706103856128,"chDate":1706103879054,"text":"// Einbinden der my_ws.js\nimport './my_ws.js';"},{"type":"links","crDate":1701443306159,"chDate":1701443306159,"links":[{"title":"Offizielle Webseite","url":"https://www.webcomponents.org/"},{"title":"Auf MDN","url":"https://developer.mozilla.org/en-US/docs/Web/API/Web_components"}]},{"type":"subheader","crDate":1701443404742,"chDate":1701443407415,"text":"Polymer"},{"type":"paragraph","crDate":1701443410377,"chDate":1701443435084,"text":"Polymer ist die meistverwendete Library, um mit Webcomponents zu arbeiten."},{"type":"links","crDate":1701443439468,"chDate":1701443439468,"links":[{"title":"Offizielle Webseite","url":"https://polymer-library.polymer-project.org/"}]}]}