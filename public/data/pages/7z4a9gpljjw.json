{"content":[{"type":"paragraph","crDate":1695131177131,"chDate":1695131660871,"text":"In den meisten Datenbanken gibt es einige Anfragen, die sich ständig wiederholen. In einer Datenbank für Städte z.B. wird vermutlich häufig nach Städten mit mehr als 1Mio Einwohner gesucht, etc.\nStatt nun jedesmal eine eine find()-Methode zu konstruieren, kann in der Datenbank ein sogenannter <i>View</i> angelegt werden. Dies ist eine vorbereitete Suche, deren Ergebnisse gecacht wird und damit schneller funktioniert als die find()-Methode."},{"type":"paragraph","crDate":1695131666323,"chDate":1695976574077,"text":"In der Datenbank sind Views in sogenannten Designdokumenten organisiert. So können viele Views organisiert und wiedergefunden werden.\nEin View kann über die GUI angelegt werden. Dazu muss in der Datenbank-Ansicht bei <i>Design Documents</i> auf das Plus-Symbol geklickt und dann <i>New View</i> ausgewählt werden."},{"type":"image","crDate":1695132588543,"chDate":1695132588543,"filename":"dfe2e95c9b2ae8e2ef2a22800.jpg","width":"600"},{"type":"paragraph","crDate":1695132861362,"chDate":1695133113392,"text":"In der folgenden Ansicht wird der View und das Design Document definiert.\nFalls kein Design Document existiert, kann nun ein neues benannt werden. Ansonsten kann ein bestehendes Design Document gewählt werden.\nUnter dem Punkt <i>index-name</i> muss dann der Name des gewünschten Views eingetragen werden."},{"type":"image","crDate":1695133117384,"chDate":1695133117384,"filename":"dfe2e95c9b2ae8e2ef2a22801.png","width":"600"},{"type":"subheader","crDate":1695133172451,"chDate":1695133181563,"text":"Map-Funktion"},{"type":"paragraph","crDate":1695133186067,"chDate":1695133497702,"text":"In der <i>Map</i>-Funktion wird schließlich die eigentliche Suche definiert. \nDie Map-Funktion wird für jedes Dokument in der Datenbank einmal aufgerufen. Das Dokument wird dabei als <i>Parameter</i> übergeben.\nNun kann in der Funktion die <i>emit()</i>-Funktion aufgerufen werden. Für jeden Aufruf wird ein neuer Datensatz in die Antwort eingehängt. Die emit()-Funktion nimmt dazu zwei Argumente an, die dann als <i>Schlüssel-Wert-Paar</i> in der Antwort stehen. \nDer Aufruf von emit() kann auch übersprungen werden, wodurch sich ein Filter erzeugen lässt.\nIm Beispiel unten werden aus der Datenbank alle Dokumente herausgesucht, deren Einwohnerzahl 1Mio oder drüber ist."},{"type":"code","crDate":1695133596437,"chDate":1695133604621,"text":"doc=> {\n if(doc.einwohnerzahl >= 1e6){\n  emit(doc._id, doc);\n } \n}"},{"type":"subheader","crDate":1695133661241,"chDate":1695133668088,"text":"Aufruf aus Nano"},{"type":"paragraph","crDate":1695133659267,"chDate":1695133721189,"text":"In Nano kann dieser View mithilfe der <i>view()</i>-Methode aufgerufen werden.\nDiese bekommt den Namen des Design-Dokumentes und den Namen des Views übergeben."},{"type":"code","crDate":1695133837892,"chDate":1695133847947,"text":"let myDB = db.use(dbName);\n\nmyDB.view('my_dd', 'millionenstaedte').then(\n res => res.rows.map(row => row.value)\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695132119527,"chDate":1695132125638,"text":"per Nano"}]}