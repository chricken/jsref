{"content":[{"type":"paragraph","crDate":1688392019976,"chDate":1688392166413,"text":"<i>Scope</i> in JavaScript bezieht sich auf den Bereich oder Kontext, in dem Variablen und Funktionen definiert und zugänglich sind. Der Scope bestimmt die Sichtbarkeit und Zugänglichkeit dieser Variablen und Funktionen an verschiedenen Stellen Ihres Codes.\nDie korrekte Verwendung des Scopes ist ein zentraler Aspekt der JS-Programmierung. Sie hilft, Fehler zu vermeiden, die durch unbeabsichtigte Überschreibung oder Zugriff auf Variablen entstehen können."},{"type":"subheader","crDate":1688392025760,"chDate":1688392030455,"text":"Globaler Scope"},{"type":"paragraph","crDate":1688392285918,"chDate":1688392287631,"text":"Variablen, die außerhalb jeder Funktion definiert werden, gehören zum globalen Scope. Sie können von jedem Code in der Anwendung, einschließlich Funktionen, aufgerufen werden."},{"type":"code","crDate":1688393517289,"chDate":1688393524729,"text":"let myVar = 42;\n\nconst myFunction = () => {\n console.log(myVar); // -> 42\n myVar = 100;\n}\n\nmyFunction();\n\nconsole.log(myVar); // -> 100"},{"type":"subheader","crDate":1688392034320,"chDate":1688392041950,"text":"Blockscope"},{"type":"paragraph","crDate":1688392317050,"chDate":1688392731706,"text":"Blockscope bezieht sich auf den Scope, der durch <i>{ }</i> (Klammern) erstellt wird. \n<i>let</i> und <i>const</i> in ES6 folgen dem Block Scope. Das bedeutet, dass sie nur innerhalb des Blocks, in dem sie definiert wurden, sichtbar sind.\n{ } können Funktionsblöcke, Schleifen oder bedingte Anweisung umschließen. Sie können auch allein stehen."},{"type":"code","crDate":1688393618330,"chDate":1688393814049,"text":"{\n let myVar = 100;\n console.log(myVar);  // -> 100\n}\n\nconsole.log(myVar);  // -> Fehlermeldung"},{"type":"subheader","crDate":1688392044031,"chDate":1688392051365,"text":"Functional Scope"},{"type":"paragraph","crDate":1688392752897,"chDate":1688393965880,"text":"Functional Scope hat heute nur noch historische Bedeutung. \nSie gilt für Variablen die mit <i>var</i> innerhalb einer Funktion angelegt wurde.\nFunctional Scope wurde in ES6 durch <i>Blockscope</i> angelöst."},{"type":"code","crDate":1688393114386,"chDate":1688393567572,"text":"function myFunction() {\n    var myVar = \"Hallo Welt!\";\n    console.log(myVar); // -> Hallo Welt\n}\nmyFunction();\nconsole.log(myVar); // -> Fehlermeldung"},{"type":"code","crDate":1688393904788,"chDate":1688393911378,"text":"{\n let myVar = 100;\n console.log(myVar);  // -> 100\n}\n\nconsole.log(myVar);  // -> 100"}]}