{"content":[{"type":"paragraph","crDate":1710766488317,"chDate":1710766499853,"text":"WebSocket ist ein Netzwerkprotokoll, das eine bidirektionale, zuverlässige und schnelle Kommunikation zwischen einem Client und einem Server ermöglicht. Es basiert auf TCP und ermöglicht es, Daten in Echtzeit zu übertragen sowie vom Server den Client anzusprechen.\nWebSockets werden häufig in Webanwendungen verwendet, die eine Echtzeitkommunikation erfordern, wie z. B.:\n<ul>\n<li>Chat-Anwendungen</li>\n<li>Spiele</li>\n<li>Finanzanwendungen</li>\n<li>Echtzeit-Datenvisualisierung</li>\n<li>Kooperatives Arbeiten</li>\n<li>Internet of Things</li>\n<li>etc.</li>\n</ul>"},{"type":"subheader","crDate":1710766924849,"chDate":1710766927344,"text":"Server"},{"type":"paragraph","crDate":1710766801795,"chDate":1710767112782,"text":"Für NodeJS gibt es einige Module, um über Websocket zu kommunizieren. Eine der beliebtesten ist <i>ws</i>.\nEs wird zusätzlich zu express installiert. <i>Express</i> dient dazu, die Webseite vom Server zu laden. ws dient dann dazu, dass diese Webseite in Echtzeit mit dem Server kommunizieren kann."},{"type":"terminal","crDate":1710767131090,"chDate":1710767159855,"text":"npm i express ws"},{"type":"paragraph","crDate":1710767609285,"chDate":1710768228008,"text":"Im nächsten Schritt werden die Module importiert.\nUm die Seite in den Browser laden zu können muss zunächst ein Express-Server aufgebaut werden."},{"type":"code","crDate":1710768233739,"chDate":1710769000921,"text":"import express from 'express';\n\nconst server = express();\n\nserver.use(express.static('public', {\n extensions:['html']\n}));\n\nconst init = () => {\n server.listen(80, err => console.log(err || 'Server läuft'));\n}\n\ninit();"},{"type":"paragraph","crDate":1710768348538,"chDate":1710772195895,"text":"Sobald das alles vorbereitet ist, kann der Websocket-Server integriert werden. \nDieser macht im Wesentlichen zwei Dinge: Er sendet Nachrichten zu verbundenen Clients und reagiert auf Nachrichten von verbundenen Clients.\nDazu wird mit dem importierten <i>WebSocketServer()</i>-Constructor ein solcher Server angelegt. \nDiesem muss ein Port mitgegeben werden, der größer als 1000 sein sollte.\nSchließlich wird ein Eventlistener eingerichtet, der auf eine Verbindung wartet.\n"},{"type":"paragraph","crDate":1710772708152,"chDate":1710772751342,"text":"Sobald der Websocket-Server bereit ist und auf Verbindungen wartet, wird der <i>listening</i>-Event gefeuert."},{"type":"paragraph","crDate":1710769547999,"chDate":1710772630942,"text":"Sobald ein Client die Verbindung herstellt, wird der <i>connection</i>-Event ausgeführt. Die Callback-Funktion des Eventlisteners bekommt ein <i>Socket</i>-Objekt übergeben. Dieses Objekt enthält alle Methoden und Informationen, um mit dem verbundenen Client zu kommunizieren.\nIn der Callback-Funktion kann nun:\n<ul>\n<li>Mithilfe der <i>socket.send()</i>-Methode Nachrichten an einen Client gesendet werden.</li>\n<li>Mithilfe der <i>socket.on()</i>-Methode auf Nachrichten vom Server reagiert werden</li>\n</ul>\nDas Beispiel unten sendet bei jeder neuen Verbindung direkt eine Nachricht an den Client."},{"type":"code","crDate":1710768931036,"chDate":1710772682224,"text":"const server = express();\nconst wss = new WebSocketServer({ port: 8000 });\n\nconst handleMsg = () => console.log('Nachricht empfangen');\n\nwss.on('listening', () => {\n console.log('SocketServer ist bereit und wartet auf Clients')\n});\n\nwss.on('connection', socket => {\n socket.on('error', console.error);\n socket.on('message', handleMsg);\n socket.send('message');\n});"},{"type":"subheader","crDate":1710769826853,"chDate":1710769830322,"text":"Client"},{"type":"paragraph","crDate":1710769833147,"chDate":1710772094939,"text":"Jeder moderne Webbrowser hat die <i>Websocket</i>-Schnittstelle bereits eingebunden. Diese gilt es nur noch zu benutzen.\nDazu wird die URL des Websocket-Servers inklusive des Ports an den <i>Websocket()</i>Constructor übergeben. Dieser stellt eine Verbindung zum Websocket-Server her. \nSobald die Verbindung hergestellt ist, wird der <i>open</i>-Event ausgelöst.\nSobald eine Nachricht vom Server kommt, wird der <i>message</i>-Event ausgelöst."},{"type":"code","crDate":1710771930166,"chDate":1710773194069,"text":"const socket = new WebSocket(\"ws://localhost:8000\");\n\n// Connection opened\nsocket.addEventListener(\"open\", evt => {\n console.log('Verbindung wurde hergestellt');\n});\n\nsocket.addEventListener(\"message\", evt => {\n console.log('Nachricht empfangen');\n});"}]}