{"content":[{"type":"paragraph","crDate":1707489974119,"chDate":1713521766015,"text":"Mit Hilfe von Eventlistenern können wir Daten aus der Komponente heraus in das Hauptscript bringen.\nDazu wird per <i>CustomEvent()</i>-Constructor ein eigener Event angelegt. Der Name des Events kann frei ausgedacht sein (z.B. \"squeeze\").\nEinem Element in der Webcomponent wird dann ein ganz normaler Eventlistener zugewiesen.\nSobald dieser Eventlistener ausgeführt wird, kann die Webcomponent per <i>dispatchEvent()</i>-Methode den selbsterstellten Event feuern."},{"type":"paragraph","crDate":1713521696101,"chDate":1713522380111,"text":"Im letzten Schritt wird dann dem Element, das aus der Webcomponent erzeugt wurde, der Eventlistener (z.B. \"squeeze\") zugewiesen."},{"type":"code","crDate":1707491784332,"chDate":1713523083051,"text":"// Web Component\n'use strict';\n\nconst template = document.createElement('div');\ntemplate.innerHTML = `\n&lt;div class=\"container\">\n &lt;button class=\"btn\">Give Random&lt;/button>\n&lt;/div>`\n\nclass RndClick extends HTMLElement {\n constructor() {\n  super();\n  this.root = this.attachShadow({\n   mode: 'closed'\n  })\n  this.root.append(template.cloneNode(true));\n }\n \n // Eventlistener für Mounting\n connectedCallback() {\n  const btn = this.root.querySelector('.btn');\n  \n  btn.addEventListener('click', () => {\n   const myEvent = new CustomEvent('squeezed', {\n    detail: { \n     num: ~~(Math.random()*100)\n     // Platz für eigene Daten\n   }})\n\n   this.dispatchEvent( myEvent );\n})}}\n\ncustomElements.define('rnd-click', RndClick);"},{"type":"code","crDate":1707491823610,"chDate":1713522671539,"text":"&lt;!-- Einbindung in HTML -->\n&lt;rnd-click>&lt;/rnd-click> &lt;!-- Object { num: 595 } -->"},{"type":"code","crDate":1707491853713,"chDate":1713522711040,"text":"// Eventlistener einfügen\nconst handleSqueezed = evt => {\n console.log(evt.detail);\n}\n\nconst rndClick = document.querySelector('rnd-click');\nrndClick.addEventListener('squeezed', handleSqueezed);"}]}