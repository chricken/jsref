{"content":[{"type":"subheader","crDate":1683729710264,"chDate":1683813754712,"text":"Inline"},{"type":"paragraph","crDate":1683729722503,"chDate":1683811447629,"text":"Javascript kann auf vielerlei Arten in Javascript eingebunden werden. \nDer einfachste Weg ist die Inline-Einbindung eines <i>script</i>-Tags. Das bedeutet, dass der Code direct zwischen die <i>script</i>-Tags geschrieben wird."},{"type":"paragraph","crDate":1683808806690,"chDate":1683808933936,"text":"Alle script-Tags teilen den globalen Scope. D.h. Variablen in einem Script können in einem anderen Script gelesen und überschrieben werden."},{"type":"code","crDate":1683730751577,"chDate":1683811816912,"text":"<html>\n <head>\n  <script>\n   let x = 12;\n   console.log(x);     \n  </script>\n </head>\n <body>        \n  <script>            \n   console.log(x);     \n  </script>\n </body>\n</html>"},{"type":"subheader","crDate":1683813709783,"chDate":1683813719215,"text":"Filebased JS"},{"type":"paragraph","crDate":1683811834752,"chDate":1683813517610,"text":"Inline-Code hat das Problem, dass jede HTML-Datei inidividuell mit Code gefüllt wird. JS-Code, der auf mehreren Seiten eingebunden ist, muss auch auf allen Seiten gepflegt werden.\nIn der Praxis hat sich daher die Technik durchgesetzt, JS in eigenen Dateien zu speichern und diese zu laden.\nDas wird ebenfalls mit dem <i>script</i>-Tag erledigt. Diesem wird das <i>src</i>-Attribut zugewiesen wird. Das erhält den Pfad zur JS-Datei als Wert.\nDadurch muss nur eine JS-Datei gepflegt werden, die dann in mehrere HTML-Seiten eingebunden werden kann.\nDie Scripte teilen ebenso den globalen Scope wie inline-Code es tut."},{"type":"code","crDate":1683813187420,"chDate":1683813624618,"text":"--HTML\n<html>\n <head>\n  <script src=\"first.js\"> </script>\n </head>\n <body>        \n  <script src=\"second.js\"> </script>\n </body>\n</html>\n\n--first.js\n'use strict';\nlet x = 12;\nconsole.log(x); \n\n--second.js\nconsole.log(x);"}]}