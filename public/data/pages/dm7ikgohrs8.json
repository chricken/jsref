{"content":[{"type":"subheader","crDate":1683729710264,"chDate":1683813754712,"text":"Inline"},{"type":"paragraph","crDate":1683729722503,"chDate":1684228285982,"text":"Javascript kann auf vielerlei Weisen in HTML eingebunden werden. \nDer einfachste Weg ist die <i>Inline</i>-Einbindung eines <i>script</i>-Tags. Das bedeutet, dass der Code direct zwischen die script-Tags geschrieben wird."},{"type":"paragraph","crDate":1683808806690,"chDate":1683808933936,"text":"Alle script-Tags teilen den globalen Scope. D.h. Variablen in einem Script können in einem anderen Script gelesen und überschrieben werden."},{"type":"code","crDate":1683730751577,"chDate":1693910449638,"text":"&lt;html>\n &lt;head>\n  &lt;script>\n   let x = 12;\n   console.log(x);     \n  &lt;/script>\n &lt;/head>\n &lt;body>        \n  &lt;script>            \n   console.log(x);     \n  &lt;/script>\n &lt;/body>\n&lt;/html>"},{"type":"subheader","crDate":1683813709783,"chDate":1684228311865,"text":"Dateibasiertes JS"},{"type":"paragraph","crDate":1683811834752,"chDate":1684321453620,"text":"Inline-Code hat das Problem, dass jede HTML-Datei inidividuell mit Code gefüllt wird. JS-Code, der von mehreren HTML-Seiten verwendet wird, muss auch auf allen Seiten gepflegt werden.\nIn der Praxis hat es sich daher durchgesetzt, JS in eigenen Dateien zu speichern und diese zu laden.\nDas wird ebenfalls mit dem <i>script</i>-Tag erledigt. Diesem wird das <i>src</i>-Attribut zugewiesen. Das erhält den Pfad zur JS-Datei als Wert.\nDadurch muss nur eine JS-Datei gepflegt werden, die dann in mehrere HTML-Seiten eingebunden werden kann.\nEs können auch mehrere JS-Dateien eingebunden werden, diese teilen ebenso den globalen Scope wie inline-Code es tut."},{"type":"code","crDate":1683813187420,"chDate":1693910471418,"text":"--HTML\n&lt;html>\n &lt;head>\n  &lt;script src=\"first.js\"> &lt;/script>\n &lt;/head>\n &lt;body>        \n  &lt;script src=\"second.js\"> &lt;/script>\n &lt;/body>\n&lt;/html>\n\n--first.js\n'use strict';\nlet x = 12;\nconsole.log(x);  // -> 12\n\n--second.js\nconsole.log(x);  // -> 12"}]}