{"content":[{"type":"paragraph","crDate":1726127329203,"chDate":1726127331156,"text":"Im Beispiel sollen Daten aus einem Formular gespeichert werden. Um es einfach zu halten, soll das Formular Vor- und Nachnamen sowie den Geburtstag einer Person entgegennehmen. Der HTML-Code sieht folgendermaßen aus:"},{"type":"code","crDate":1726127350201,"chDate":1726127351434,"text":"&lt;form id=\"myForm\">\n &lt;p> &lt;input type=\"text\" name=\"vName\" required> &lt;/p>\n &lt;p> &lt;input type=\"text\" name=\"nName\" required> &lt;/p>\n &lt;p> &lt;input type=\"date\" name=\"geboren\" required> &lt;/p>\n &lt;p> &lt;button type=\"submit\">Speichern&lt;/button> &lt;/p>\n&lt;/form>"},{"type":"paragraph","crDate":1726127373305,"chDate":1726127377020,"text":"Um auf die Eingaben zu reagieren, wird ein <i>submit</i>-Eventlistener auf das Formular gelegt.\nDamit an den submit-Eventhandler auch das Datenbank-Objekt übergeben werden kann, wurde der Eventlistener innerhalb des <i>success</i>-Eventhandlers angelegt."},{"type":"code","crDate":1726127397964,"chDate":1726127400445,"text":"const handleReqSuccess = evt => {\n console.log('Verbindung erfolgreich hergestellt.');\n const db = evt.target.result;\n    \n const myForm = document.querySelector('#myForm');\n myForm.addEventListener('submit', evt => handleSubmitForm(evt, db));\n}"},{"type":"paragraph","crDate":1726127421246,"chDate":1726127423488,"text":"Der <i>submit</i>-Handler unterbindet mit <i>evt.preventDefault()</i> zunächst die Standard-Aktion, damit das Formular nicht automatisch die Seite neu lädt.\nDann werden die Nutzdaten aus den Formulareingaben herauskopiert und in ein Objekt geschrieben.\nAls letztes erfolgt der Schreibvorgang in die Datenbank.\nDamit die Datenbank irgendetwas macht, muss eine Transaktion erstellt werden.\nDiese wird von der Datenbank erzeugt und benötigt zwei Informationen: Der Name des zu verwendenden ObjectStore sowie die Art des Zugriffs.\nDer Rückgabewert enthält u.a. eine Funktion, um eine Instanz zum ObjectStore zu erhalten. Diese Funktion heißt treffend <i>objectStore()</i>.\nAus dieser ObjectStore-Instanz kann dann endlich die <i>add()</i>-Methode aufgerufen werden, um Daten in die Datenbank zu schreiben. Die add()-Methode hat widerum als Rückgabe ein <i>IDBRequest</i>-Objekt, das u.a. Events enthält, um auf ein erfolgreiches Schreiben bzw einen Fehler zu reagieren.\n"},{"type":"code","crDate":1726134707296,"chDate":1726134733320,"text":"const handleSubmitForm = (evt, db) => {\n evt.preventDefault();\n let payload = new FormData(evt.target);\n payload = {\n  vName: payload.get('vName'),\n  nName: payload.get('nName'),\n  geboren: payload.get('geboren'),\n };\n\n const myObjectStore = db.transaction('myData', 'readwrite').objectStore('myData');\n const addRequest = myObjectStore.add(payload);\n\n addRequest.addEventListener('success', () => {\n  console.log('Daten wurden erfolgreich geschrieben', payload);\n })\n    \n addRequest.addEventListener('error', () => {\n  console.log('Es gab ein Problem', payload);\n })   \n}"}]}