{"content":[{"type":"subheader","crDate":1701848062445,"chDate":1701848065774,"text":"sort()"},{"type":"paragraph","crDate":1686058400186,"chDate":1701848149358,"text":"Die <i>sort()</i>-Methode ist eine <i>destruktive</i> Methode, die es ermöglicht, ein Array zu sortieren. \nFür die <i>nicht-destruktive</i> Methode, schau weiter unten nach der <i>toSorted()</i>-Methode.\nDas Standard-Verhalten ist, dass das Array alphanummerisch (nach der ASCII-Tabelle) sortiert wird."},{"type":"code","crDate":1686058973128,"chDate":1686059054337,"text":"'use strict';\n\nconst myArray = [\n    'Max Mustermann',\n    'Birgit Beispiel',\n    'Miriam Musterfrau',\n    'Erich Exempel',\n];\n\nmyArray.sort();\n\nconsole.log(myArray);  // -> [\n                       //     'Birgit Beispiel',\n                       //     'Erich Exempel',\n                       //     'Max Mustermann',\n                       //     'Miriam Musterfrau'\n                       //    ] "},{"type":"subheader","crDate":1686059350811,"chDate":1686059357362,"text":"Nicht-Strings sortieren"},{"type":"paragraph","crDate":1686059370380,"chDate":1686059784048,"text":"Während die Sortierung von Strings sehr einfach von der Hand geht, ist das Sortieren von Zahlen oder anderen Elementen eine ganz andere Sache.\n<i<sort()</i> ist eine Higher-Class-Methode, die eine Funktion als Parameter annehmen kann. An diese Callback-Funktion werden Paare von nebeneinander liegenden Slots übergeben.\nWenn die Callback-Funktion eine <i>positive</i> Zahl zurückgibt, dann tauschen die Slots ihre Position. Bei einem <i>negativen</i> Rückgabewert bleiben die Slots in ihrer Reihenfolge. 0 wird wie eine negative Zahl behandelt."},{"type":"code","crDate":1686059361935,"chDate":1701955620116,"text":"const createNumber = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nconst myArray = [...new Array(100)].map(() => createNumber(0,100));\nmyArray.sort((a, b) => a - b);\n\nconsole.log(myArray); "},{"type":"paragraph","crDate":1686060086782,"chDate":1686060110529,"text":"Auch Objekte lassen sich nach einem bestimmten Attribut sortieren;"},{"type":"code","crDate":1686060079892,"chDate":1686141788397,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nmyArray.sort((a,b) => a.age - b.age);\n\nconsole.log(myArray); // -> [\n                      //    { name: 'Birgit Beispiel', age: 14 },\n                      //    { name: 'Max Mustermann', age: 17 },\n                      //    { name: 'Miriam Musterfrau', age: 18 },\n                      //    { name: 'Erich Exempel', age: 32 }\n                      //   ]"},{"type":"code","crDate":1686060187709,"chDate":1686060326400,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nmyArray.sort((a,b) => (a.name < b.name) ? -1 : 1);\n\nconsole.log(myArray);  // -> [\n                       //     { name: 'Birgit Beispiel', age: 14 },\n                       //     { name: 'Erich Exempel', age: 32 },\n                       //     { name: 'Max Mustermann', age: 17 },\n                       //     { name: 'Miriam Musterfrau', age: 18 }\n                       //    ]"},{"type":"subheader","crDate":1686060447449,"chDate":1686060453248,"text":"Rückgabe"},{"type":"paragraph","crDate":1686060455808,"chDate":1686060521850,"text":"Die sort()-Methode liefert das Ergebnis auch als Rückgabewert zurück. Das erlaubt es z.B., eine <i>sort()</i>-Methode auch in einem <i>Chaining</i> zu verwenden."},{"type":"code","crDate":1686060569600,"chDate":1686060610964,"text":"const myArray = [{\n    name: 'Max Mustermann',\n    age: 17\n},{\n    name: 'Miriam Musterfrau',\n    age: 18\n},{\n    name: 'Erich Exempel',\n    age: 32\n},{\n    name: 'Birgit Beispiel',\n    age: 14\n}];\n\nlet result = myArray\n    .sort((a,b) => a.age - b.age)\n    .filter(val => val.age >= 18);\n\nconsole.log(result);  // -> [\n                      //     { name: 'Miriam Musterfrau', age: 18 },\n                      //     { name: 'Erich Exempel', age: 32 }\n                      //    ]"},{"type":"subheader","crDate":1701848073857,"chDate":1701848094831,"text":"toSorted()"},{"type":"paragraph","crDate":1701848155522,"chDate":1701958531393,"text":"Die <i>toSorted()</i>-Methode funktioniert ebenso wie die sort()-Methode. Allerdings ist sie nicht-destruktiv. D.h. sie sortiert nicht direkt das Array, sondern gibt eine sortierte Kopie das Arrays zurück.\n<b>Achtung:</b> Die toSorted()-Methode wurde erst 2023 eingeführt und wird noch nicht flächendeckend unterstützt."},{"type":"code","crDate":1701955507443,"chDate":1701955544959,"text":"const createNumber = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nconst myArray = [...new Array(20)].map(() => createNumber(0,100));\nlet yourArray = myArray.toSorted((a,b)=>a-b);\n\nconsole.log(myArray);\nconsole.log(yourArray);"},{"type":"subheader","crDate":1701959169241,"chDate":1701959242468,"text":"reverse()"},{"type":"paragraph","crDate":1701959245427,"chDate":1701959391914,"text":"Die reverse()-Methode dreht die Reihenfolge der Slots um.\nSie ist eine <i>destruktive Methode</I> die das Array direkt verändert.\nSie liefert auch eine Referenz auf das Array als Rückgabewert zurück."},{"type":"code","crDate":1701959505918,"chDate":1701959514022,"text":"const myArray = [... new Array(10)].map((val, i) => i);\nconsole.log(...myArray);  // -> 0 1 2 3 4 5 6 7 8 9\n        \nconst otherArray = myArray.reverse();\nconsole.log(...myArray);  // -> 9 8 7 6 5 4 3 2 1 0\nconsole.log(...otherArray);  // -> 9 8 7 6 5 4 3 2 1 0"},{"type":"subheader","crDate":1701959551495,"chDate":1701959556907,"text":"toReversed()"},{"type":"paragraph","crDate":1701959559802,"chDate":1701959719214,"text":"Die <i>toReversed()</i>-Methode funktioniert wie die reverse()-Methode, nur dass sie nicht-destruktiv ist. Das Array wird nicht direkt verändert sondern gibt ein neues Array mit umgekehrter Reihenfolge zurück."},{"type":"code","crDate":1701959793824,"chDate":1701959802656,"text":"const myArray = [... new Array(10)].map((val, i) => i);\nconsole.log(...myArray);  // -> 0 1 2 3 4 5 6 7 8 9\n        \nconst otherArray = myArray.toReversed();\nconsole.log(...myArray);  // -> 0 1 2 3 4 5 6 7 8 9\nconsole.log(...otherArray);  // -> 9 8 7 6 5 4 3 2 1 0"}]}