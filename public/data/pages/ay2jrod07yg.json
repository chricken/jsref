{"content":[{"type":"paragraph","crDate":1686142036601,"chDate":1686142877445,"text":"Die <i>Spread-Syntax</i> erlaubt es, ein <i>Array</i> oder <i>Array-ähnliches Element</i> in eine Liste unabhängiger Einzelwerte umzuwandeln. Diese Werte können an eine Funktion übergeben, in ein neues Array geschrieben oder in ein Destructuring übertragen werden.\nSie besteht einfach aus drei Punkten \"<i>...</i>\""},{"type":"code","crDate":1686142730680,"chDate":1686142825564,"text":"const myArray = [21, 54, 87, 32];\n\nconst myFunction = (a, b, c, d) => {\n console.log(a);  // -> 21\n console.log(b);  // -> 54\n console.log(c);  // -> 87\n console.log(d);  // -> 32\n}\n\nmyFunction(...myArray);"},{"type":"paragraph","crDate":1686143045584,"chDate":1686143606389,"text":"Die Spread-Syntax kann auch verwendet werden, um eine echte Shallow-Copy zu erzeugen.\nEcht, weil das Ergebnis keine Referenz auf das ursprüngliche Array ist sondern ein neues.\nShallow-Copy, weil die Elemente <i>im</i> neuen Array u.U. Referenzen sind."},{"type":"code","crDate":1686143874082,"chDate":1686144023406,"text":"const myArray = [21, 54, 87, 32];\nconst newArray = [...myArray];\nconst newestArray = [...myArray, ...newArray, 100, 200];\n\nconsole.log(newestArray);  // -> [ 21, 54, 87, 32, 21, 54, 87, 32, 100, 200 ]"}]}