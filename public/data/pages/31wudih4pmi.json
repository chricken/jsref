{"content":[{"type":"paragraph","crDate":1686828268888,"chDate":1686833951837,"text":"Der Begriff Getter/Setter bezieht sich in Javascript auf Methoden, die sich wie normale Attribute verhalten.\nDer Hintergrund ist, dass es manchmal Methoden gibt, die einfach einen Wert zurückgeben sollen. Sie sollen sich also verhalten, wie ganz normale Attribute.\nDas ist beispielsweise der Fall, wenn die Methode einen umgewandelten oder zusammengesetzten Wert aus bestehenden Attributen zurückgeben soll. \nEin Getter wird mit dem Schlüsselwort <i>get</i> markiert. Der Aufruf geschieht wie die Abfrage eines normalen Attributes, Parameter können nicht übergeben werden."},{"type":"code","crDate":1686834689144,"chDate":1686835062418,"text":"const meinAuto = {\n    marke: 'Hyundai',\n    modell:'i20',\n    leistungKW: 62,\n    baujahr: 2016,\n    get leistungPS(){\n        return Math.round(this.leistungKW / .73 * 100) /100;\n    },\n    get alter(){\n        let jetzt = new Date();\n        return jetzt.getFullYear() - this.baujahr;\n    }\n}\n\nconsole.log(`${meinAuto.leistungPS} PS`);       // -> 84.93 PS\nconsole.log(`Alter: ${meinAuto.alter} Jahre`);  // -> 7 Jahre (Stand 2023)"},{"type":"subheader","crDate":1686834867715,"chDate":1686834874161,"text":"Setter"},{"type":"paragraph","crDate":1686834876489,"chDate":1686835653661,"text":"Ein Getter bietet keine Möglichkeit, den Wert zu ändern. Dazu braucht es <i>Setter</i>.\nEin Setter ist eine Methode, die einen Wert entgegennehmen kann. Dieser Wert kann dann verändert und/oder in das Objekt übertragen werden.\nUm beim obigen Beispiel zu bleiben: Ein Wert in PS kann übergeben werden. Dieser Wert wird umgewandelt in kW und in das Attribut geschrieben, um Redundanzen zu vermeiden.\nWird später über den Getter die PS abgefragt, so liest der Getter die veränderten kW und wandelt sie wieder um."},{"type":"code","crDate":1686835770882,"chDate":1686835783468,"text":"const meinAuto = {\n marke: 'Hyundai',\n modell: 'i20',\n leistungKW: 62,\n get leistungPS() {\n  return Math.round(this.leistungKW / .73 * 100) / 100;\n },\n set leistungPS(wert) {\n  this.leistungKW = Math.round(wert * .73 * 100) / 100;\n }\n}\n\nconsole.log(`${meinAuto.leistungPS} PS`);\nmeinAuto.leistungPS = 100;\nconsole.log(`${meinAuto.leistungPS} PS`);"},{"type":"subheader","crDate":1686835134774,"chDate":1686835143733,"text":"Private Felder"},{"type":"paragraph","crDate":1686835820584,"chDate":1686837814916,"text":"Mit der Einführung <i>privater Felder</i> ergab sich eine neue Einsatzmöglichkeit für Getter und Setter.\nEin privates Feld ist eine in einem Objekt gespeicherte Information, die von außerhalb nicht direkt angesprochen werden kann.\nDer Wert kann dann nur von innerhalb des Objektes angesprochen werden, bspw. über einen Getter. So kann der Wert gelesen werden, ohne einen schreibenden Zugriff zu erlauben. Oder ein Wert kann verändert werden, ohne ihn lesen zu können. Oder es können zusätzliche Sicherheitsmaßnahmen ergriffen werden, um den Zugriff einzuschränken.\n"},{"type":"code","crDate":1686836884600,"chDate":1686837725939,"text":"class Auto {\n // #keyNo kann gelesen werden, aber nicht überschrieben\n #keyNo = (Math.random() * 1e7).toString(36);\n get key() {\n  return this.#keyNo;\n }\n}\n\nconst myCar = new Auto();\n\n// console.log(myCar.#keyNo);  // -> Fehlermeldung\nconsole.log(myCar.key);        // -> Zufälliger Sting"}]}