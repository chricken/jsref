{"content":[{"type":"paragraph","crDate":1754390223157,"chDate":1754390804535,"text":"Die <i>tsconfig.json</i> ist die zentrale <i>Konfigurationsdatei</i> für TypeScript-Projekte.\nSie liegt im Wurzelverzeichnis des Projekts und spezifiziert die Quelldateien und Compiler-Optionen, die für die Kompilierung des Projekts benötigt werden.\nDie Wichtigsten sind:\n<ul>\n<li><strong>compilerOptions</strong>: Hauptkonfigurationsobjekt, das das Verhalten des TypeScript-Compilers steuert.\n<ul>\n<li><strong>target</strong>: Bestimmt die ECMAScript-Zielversion für den generierten JavaScript-Code, z.B. \"ES2020\" oder \"ES2015\".</li>\n<li><strong>module</strong>: Legt das zu verwendende Modulsystem für die JavaScript-Ausgabedateien fest (z.B. \"CommonJS\", \"ESNext\", \"AMD\").</li>\n<li><strong>moduleResolution</strong>: Definiert die Strategie, mit der der Compiler Module-Imports auflöst, meist \"node\" oder \"classic\".</li>\n<li><strong>strict</strong>: Aktiviert alle strikten Typprüfungsoptionen für erhöhte Typsicherheit und bessere Codequalität.</li>\n<li><strong>esModuleInterop</strong>: Ermöglicht eine bessere Interoperabilität zwischen CommonJS und ES-Modulen bei Imports.</li>\n<li><strong>skipLibCheck</strong>: Überspringt die Typprüfung von Deklarationsdateien (.d.ts) in externen Bibliotheken für schnellere Kompilierung.</li>\n<li><strong>forceConsistentCasingInFileNames</strong>: Erzwingt konsistente Groß-/Kleinschreibung bei Dateinamen, um plattformübergreifende Kompatibilität zu gewährleisten.</li>\n<li><strong>outDir</strong>: Bestimmt das Verzeichnis für die kompilierten JavaScript-Ausgabedateien.</li>\n<li><strong>rootDir</strong>: Legt das Wurzelverzeichnis der TypeScript-Quelldateien fest, das bei der Ausgabestruktur berücksichtigt wird.</li>\n<li><strong>sourceMap</strong>: Erstellt Quellkarten (.map-Dateien), die das Debugging des TypeScript-Codes im Browser oder Editor ermöglichen.</li>\n<li><strong>declaration</strong>: Generiert Typdefinitionsdateien (.d.ts), die die API des Codes dokumentieren und in anderen Projekten nutzbar machen.</li>\n<li><strong>removeComments</strong>: Steuert, ob Kommentare im kompilierten JavaScript-Code entfernt oder beibehalten werden.</li>\n<li><strong>noUnusedLocals</strong>: Meldet Fehler bei nicht verwendeten lokalen Variablen, um die Codequalität zu verbessern.</li>\n<li><strong>noUnusedParameters</strong>: Meldet Fehler bei nicht verwendeten Funktionsparametern für sauberere Funktionssignaturen.</li>\n<li><strong>noImplicitReturns</strong>: Stellt sicher, dass alle Codepfade in einer Funktion einen expliziten Rückgabewert haben.</li>\n<li><strong>noFallthroughCasesInSwitch</strong>: Verhindert unbeabsichtigtes Durchfallen zwischen cases in switch-Anweisungen.</li>\n</ul>\n</li>\n<li><strong>include</strong>: Ein Array von Glob-Mustern, das angibt, welche Dateien in die Kompilierung einbezogen werden sollen. Beispiel: [\"src/**/*\"] bezieht alle Dateien im src-Verzeichnis und seinen Unterverzeichnissen ein.</li>\n<li><strong>exclude</strong>: Ein Array von Glob-Mustern, das angibt, welche Dateien von der Kompilierung ausgeschlossen werden sollen, selbst wenn sie durch \"include\" erfasst werden. Standardmäßig werden \"node_modules\", \"bower_components\" und \"jspm_packages\" ausgeschlossen.</li>\n</ul>\n"},{"type":"code","crDate":1754390413096,"chDate":1754390414544,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"sourceMap\": true,\n    \"declaration\": true,\n    \"removeComments\": false,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n"}]}