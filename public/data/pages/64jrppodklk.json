{"content":[{"type":"paragraph","crDate":1692962845756,"chDate":1692963269384,"text":"Im Rahmen des Kurses fiel die Wahl auf <i>couchDB</i> als Datenbank.\nDiese kann von der folgenden Web-Adresse heruntergeladen werden: <a href=\"https://couchdb.apache.org/\">couchdb.apache.org</a>.\nBitte beachte, dass auf Windows das <i>.net</i>-Framework in der Version 3.5 installiert sein muss. Keine neuer Vesion, es muss diese alte Version sein. Das Framework kann hier heruntergeladen werden: <a href=\"https://dotnet.microsoft.com/en-us/download/dotnet-framework/net35-sp1\">microsoft.com</a>.\nWährend der Installation von couchDB wird der Anwender gebeten, einen Benutzernamen und ein Passwort anzugeben. Diese sollten unbedingt irgendwo abgelegt werden, da sie später benötigt werden, um sich in der Datenbank anzumelden.\nAußerdem wird der Benutzer während der Installation gebeten, einen \"Cookie\" anzugeben. Der hat nichts mit den Webseiten-Cookies zu tun, es muss einfach ein zufälliger Wert sein."},{"type":"subheader","crDate":1692963841456,"chDate":1692963923314,"text":"nano"},{"type":"paragraph","crDate":1692963925898,"chDate":1692977378819,"text":"Es gibt einige <i>Module</i>, um mit der couchDB zu kommunizieren. Die beste Wahl dürfte <i>nano</i> sein, da dieses Modul von den Couch-Entwicklern selbst stammt.\nNano basiert zum größten Teil auf Promises.\nDie Einbindung von Nano geschieht grob in drei Schritten:"},{"type":"subheader","crDate":1692977384603,"chDate":1692977389882,"text":"Einbindung"},{"type":"terminal","crDate":1692977409377,"chDate":1692977418984,"text":"npm i nano"},{"type":"code","crDate":1692977423883,"chDate":1693224099168,"text":"import nano from 'nano';\n\n// Bitte beachten, dass im package.json der type auf module gesetzt werden muss"},{"type":"subheader","crDate":1692977393963,"chDate":1692977399912,"text":"Connection"},{"type":"paragraph","crDate":1693227251664,"chDate":1693230732277,"text":"Als erstes sollten wir über das Thema Sicherheit reden. Benutzernamen und Passwörter (sog. <i>Credentials</i>) sollten nicht im Quellcode hinterlegt werden. Denn dann würde jede Person, die den Code sieht, die Credentials kennen. Eine beliebte Technik ist, die Credentials in eine <i>eigene Datei</i> zu legen (JS-Modul, JSON-File, whatever) und zur Laufzeit zu laden. Diese Datei sollte von <i>GIT</i> ignoriert werden."},{"type":"code","crDate":1693228513269,"chDate":1693229371887,"text":"const credentials = {\n    user: 'alfa',\n    pw: 'alfa',\n    url: '127.0.0.1:5984'\n}\n\nexport default credentials;\nexport let user = credentials.user;\nexport let pw = credentials.pw;"},{"type":"paragraph","crDate":1693228924283,"chDate":1693229470193,"text":"Die <i>credetials</i>-Datei kann nun importiert werden.\nDas <i>nano</i>-Modul liefert eine Funktion zurück, mit der die Verbindung zur Datenbank aufgebaut werden kann. Dazu wird der Funktion die URL samt Credentials übergeben.\nAls Test kann dann die list-Methode aufgerufen werden."},{"type":"code","crDate":1692977473510,"chDate":1693229934350,"text":"import nano from 'nano';\nimport {user, pw} from './credentials.js';\n\nconst db = nano(`http://${user}:${pw}@127.0.0.1:5984`).db;"},{"type":"subheader","crDate":1692977401818,"chDate":1692977405722,"text":"Verwendung"},{"type":"paragraph","crDate":1693224015390,"chDate":1693230540124,"text":"Mit obigem Code wird in der Variablen <i>db</i> ein Objekt gespeichert, das alle Methoden enthält, um mit der Datenbank zu kommunizieren.\nUnten der gesamte Code zusammen."},{"type":"code","crDate":1693229937534,"chDate":1693230617781,"text":"'use strict';\n\nimport nano from 'nano';\nimport {user, pw} from './credentials.js';\n\nconst db = nano(`http://${user}:${pw}@127.0.0.1:5984`).db;\n\ndb.list().then(\n console.log  // -> Array mit den Namen aller Datenbanken\n).catch(\n console.warn\n)\n"}]}