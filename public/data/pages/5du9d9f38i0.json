{"content":[{"type":"paragraph","crDate":1758117070009,"chDate":1758117764900,"text":"Wenn die Webseite nach der Anleitung als Server Side Rendering funktioniert, gibt es eigentlich nur noch ein Problem: Nach dem Kompilierung funktioniert sie nicht mehr. \nDas liegt daran, dass die Struktur nach der Kompilierung ganz anders aussieht.\nDamit die kompilierte (a.k.a. die <i>production</i>)-Version funktioniert, muss abschließend noch zwischen Development und Production unterschieden werden.\nDies kann bequem über eine <i>Environment-Variable</i> erledigt werden. Dies ist eine Variable, die nicht im Programm abgelegt wird sondern außerhalb, im Betriebssystem.\nIm Server wird dann überprüft, ob das Projekt als Production gestartet wurde oder nicht. Entsprechend wird der gewünschte Code ausgeführt."},{"type":"header","crDate":1758117772433,"chDate":1758118176767,"text":"Skripte"},{"type":"paragraph","crDate":1758117779467,"chDate":1758118164111,"text":"Zunächst muss die <i>package.json</i> erweitert werden.\nIm <i>script</i>-Teil werden die folgenden Scripte hinzugefügt: <i>build</i> und <i>serve</i> sollten schon vorhanden sein. Sie sind nur der Vollständigkeit halber hinzugefügt.\n<ul><li><b>build: </b>Kompiliert den Client-Code in den dist-Ordner</li>\n<li><b>build:server: </b>Kompiliert den Server-Code in den dist-Ordner</li>\n<li><b>serve: </b>Startet das Projekt als <i>Development</i>-Version. Änderungen werden per hot reload automatisch sofort angezeigt</li>\n<li><b>start: </b>Startet das Projekt als <i>Production</i>-Version. Die Daten im dist-Ordner werden angezeigt.</li></ul>\n"},{"type":"code","crDate":1758117889264,"chDate":1758117897986,"text":"\"build\": \"vite build\",\n\"build:server\": \"vite build --ssr src/entry-server.jsx --outDir dist/server\",\n\"serve\": \"node server/server.js\",\n\"start\": \"set NODE_ENV=production&& node server/server.js\","},{"type":"header","crDate":1758185382636,"chDate":1758185386852,"text":"Server"},{"type":"paragraph","crDate":1758185390374,"chDate":1758186533349,"text":"Nun muss der Server angepasst werden.\nZunächst muss auf den Pfad des Servers zugegriffen werden können, um die Daten zuverlässig zu lesen.\nAußerdem wird der - im Start-Script festgelegte - Wert aus der Environment-Variable gelesen."},{"type":"paragraph","crDate":1758186539778,"chDate":1758187791154,"text":"Dann wird eine <i>zusätzliche catch-All-Route</i> für den Produktionsmodus benötigt.\nDie <i>addCatchAllProd</i>-Funktion konfiguriert den Express-Server für die Produktionsumgebung mit <i>Server-Side Rendering</i> (SSR).\nZunächst wird eine statische Datei-Middleware eingerichtet, um die gebauten Assets aus dem /dist-Ordner auszuliefern.\nAnschließend wird ein Catch-All-Handler registriert, der:\n<ul><li>für alle eingehenden Requests die HTML-Vorlage aus `dwist/index.html` lädt.</li>\n<li>das Server-Side Rendering-Modul importiert</li>\n<li>die React-Komponenten auf dem Server rendert</li>\n<li>das gerenderte HTML in die Vorlage einfügt</li>\n<li>und es an den Client sendet</li></ul>\nDiese Konfiguration ermöglicht es, dass die React-Anwendung sowohl statische Assets effizient ausliefert als auch dynamische Inhalte serverseitig vorrendert. Das verbessert die Ladezeiten und SEO-Optimierung.\n"},{"type":"paragraph","crDate":1758188034535,"chDate":1758188519718,"text":"Schließlich muss noch in der init()-Funktion unterschieden werden, welche Catch-All-Funktion verknüpft werden soll.\nUnten der vollständige Server-Code."},{"type":"code","crDate":1758188527407,"chDate":1758188787699,"text":"'use strict';\n\nimport express from 'express';\nimport {createServer as createViteServer} from 'vite';\nimport {promises as fs} from 'fs';\n\n// Added for production\nimport path from 'path';\nimport {fileURLToPath} from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst isProduction = process.env.NODE_ENV === 'production';\n\nconst server = express();\nlet viteServer;\n\nconst addCatchAllProd = () => {\n // Statische Dateien servieren\n server.use(express.static(path.resolve(__dirname, '../dist'), {index: false}));\n\n server.use((req, res) => {\n  let template;\n  fs.readFile(\n   path.resolve(__dirname, '../dist/index.html'),\n   'utf-8'\n  ).then(\n   result => template = result\n  ).then(\n   () => import('../dist/server/entry-server.js')\n  ).then(\n   ({render}) => render(req.originalUrl)\n  ).then(\n   ({html: appHtml}) => {\n    const html = template.replace('<!--ssr-outlet-->', appHtml);\n    res.status(200).set({'Content-Type': 'text/html'}).end(html);\n   }\n  ).catch(\n   error => {\n    console.error('SSR Error:', error);\n    res.status(500).end(error.message);\n   }\n  );\n });\n\n return Promise.resolve();\n};\n\nconst addCatchAll = () => server.use((req, res) => {\n let template\n fs.readFile('index.html', 'utf-8').then(\n  payload => viteServer.transformIndexHtml(req.originalUrl, payload)\n ).then(\n  (result) => template = result\n ).then(\n  () => viteServer.ssrLoadModule('/src/entry-server.jsx')\n ).then(\n  ({render}) => render(req.originalUrl)\n ).then(\n  ({html: appHtml}) => {\n   const html = template.replace('<!--ssr-outlet-->', appHtml);\n   res.status(200).set({'Content-Type': 'text/html'}).end(html);\n  }\n ).catch(\n  console.warn\n )\n})\n\nconst init = () => {\n if (isProduction) {\n  console.log('Starting production server...');\n  return addCatchAllProd().then(\n   () => server.listen(process.env.PORT || 8001, (err) => {\n    if (err) console.log(err);\n    else console.log(`Production server läuft auf Port ${process.env.PORT || 8001}`);\n   })\n  )\n } else {\n  console.log('Starting development server...');\n  return createViteServer({\n   server: {middlewareMode: true},\n   appType: 'custom',\n  }).then(\n   result => {\n    viteServer = result;\n    server.use(viteServer.middlewares)\n   }\n  ).then(\n   addCatchAll\n  ).then(\n   () => server.listen(process.env.PORT || 8001, err => {\n    if (err) console.log(err);\n    else console.log(`Server läuft auf Port ${process.env.PORT || 8001}`);\n   })\n  )\n }\n}\n\ninit().catch(console.warn);"},{"type":"header","crDate":1758185410888,"chDate":1758185625847,"text":"Deployment"},{"type":"paragraph","crDate":1758186005681,"chDate":1758186060947,"text":"Wenn alles vorbereitet ist, kann der Code kompiliert werden. \nDabei muss der Client- und der Server-Code getrennt compiliert werden. Das wird über die vorbereiteten Scripte erledigt."},{"type":"terminal","crDate":1758186065983,"chDate":1758186098995,"text":"npm run build\nnpm run build:server"},{"type":"paragraph","crDate":1758185560898,"chDate":1758186309994,"text":"Damit die Produktionsversion funktioniert, wird nur ein Teil der Daten benötigt.\nDie auf den Server hochzulandenden Pfade sind:\n<ul><li>/dist/</li>\n<li>/server/</li>\n<li>/package.json</li></ul>\nSobald die Daten auf dem Server liegen, werden sie mit dem Start-Script gestartet."},{"type":"terminal","crDate":1758185548614,"chDate":1758185555308,"text":"npm run start"}]}