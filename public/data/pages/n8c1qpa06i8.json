{"content":[{"type":"paragraph","crDate":1692792353235,"chDate":1758633928362,"text":"Das <i>XMLHttpRequest</i>-Objekt ist das klassische Werkzeug für Ajax-Anwendungen. Es ermöglicht das asynchrone Austauschen von Daten zwischen Client und Server, ohne dass die gesamte Webseite neu geladen werden muss.\nDadurch können Webseiten dynamisch und benutzerfreundlich gestaltet werden, indem nur bestimmte Teile der Seite aktualisiert werden.\nMit dem XMLHttpRequest-Objekt kann man <i>HTTP-Anfragen</i> (wie <i>GET</i> oder <i>POST</i>) an einen Server senden und die Antwort verarbeiten."},{"type":"code","crDate":1758633930434,"chDate":1758634029450,"text":"const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.example.com/data');\nxhr.onload = () => {\n if (xhr.status == 200) {\n  console.log(xhr.response);\n }\n};\nxhr.send();"},{"type":"subheader","crDate":1758634046995,"chDate":1758634051424,"text":"responseType"},{"type":"paragraph","crDate":1758634053609,"chDate":1758634259303,"text":"Die <i>responseType</i>-Property bestimmt, in welchem Format die Antwort vom Server verarbeitet wird. \nStandardmäßig ist dies ein <i>String</i>, aber es können auch andere Typen wie <i>json</i>, <i>blob</i>, <i>document</i> oder <i>arraybuffer</i> gesetzt werden. \nDas ist besonders nützlich, wenn z.B. Binärdaten oder JSON erwartet:werden."},{"type":"code","crDate":1758634274432,"chDate":1758634293807,"text":"const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.example.com/data');\nxhr.responseType = 'json';\nxhr.onload = () => {\n if (xhr.status == 200) {\n  console.log(xhr.response);\n }\n};\nxhr.send();"},{"type":"subheader","crDate":1758634316014,"chDate":1758634321355,"text":"timeout"},{"type":"paragraph","crDate":1758634328727,"chDate":1758634384434,"text":"Mit der timeout-Property kann festgelegt werden, wie viele Millisekunden eine Anfrage maximal dauern darf, bevor sie automatisch abgebrochen wird. Der Standardwert ist 0 (kein Timeout). \nWenn das Timeout überschritten wird, wird das <i>timeout</i>-Event ausgelöst. \nDies ist hilfreich, um auf Netzwerkprobleme oder langsame Server zu reagieren."},{"type":"code","crDate":1758635091993,"chDate":1758635109427,"text":"const xhr = new XMLHttpRequest();\nxhr.open('GET', '/example');\nxhr.timeout = 500;\nxhr.addEventListener('load', () => {\n if (xhr.status == 200) console.log(xhr.response);\n else console.warn(xhr.statusText)\n})\n\nxhr.addEventListener('timeout', () => {\n console.log('Anfrage dauert zu lange');\n})\n\nxhr.send();"},{"type":"subheader","crDate":1758635136734,"chDate":1758635142914,"text":"setRequestHeader"},{"type":"paragraph","crDate":1758635146434,"chDate":1758635415980,"text":"Die Methode <i>setRequestHeader()</i> dient dazu, eigene HTTP-Header zur Anfrage hinzuzufügen. \nSie muss nach open() und vor send() aufgerufen werden.\nEs können beliebige Header angehängt werden, um weitere Informationen an den Server zu senden.\nDie häufigste Information ist dabei das verwendete Encoding hochgeladener Daten. Angenommen, es sollen per POST-Methode Daten im JSON-Format hochgeladen werden, würde der Code folgendermaßen aussehen."},{"type":"code","crDate":1758635659176,"chDate":1758635671578,"text":"const xhr = new XMLHttpRequest();\nxhr.open('POST', '/example');\nxhr.setRequestHeader('Content-Type', 'application/json');\nxhr.addEventListener('load', () => {\n if (xhr.status == 200) console.log(xhr.response);\n else console.warn(xhr.statusText)\n})\n\nxhr.send(JSON.stringify({payload: 'test'}));"}]}