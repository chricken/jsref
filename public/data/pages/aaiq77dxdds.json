{"content":[{"type":"paragraph","crDate":1722603784618,"chDate":1722604616802,"text":"Die Mango Query Syntax ist entwickelt worden, um eine Datenbank-Abfrage als JSON-String an eine Datenbank zu übertragen. Sie wird v.a. von CouchDB verwendet und ist von der Abfragesprache der MongoDB inspiriert. Daher der Name.\nMit der Mango-Query können komplexe Abfragen realisiert werden."},{"type":"paragraph","crDate":1722604618794,"chDate":1722869201618,"text":"Eine Query wird als Objekt angelegt, in dem alle relevanten Angaben als Attribute angelegt werden. Dies sind:\n<ul>\n<li><b>selector</b>:\nbestimmt die Auswahl, welche Dokument gelesen werden sollen.\n</li>\n<li><b>fields</b>:\nEin Array, das bestimmt, welche Attribute aus den Dokumenten gelesen werden sollen.\n</li>\n<li><b>sort</b>:\nBestimmt, wie und wonach sortiert werden soll,\n</li>\n<li><b>limit</b>:\nLimitiert die Anzahl der ausgegeben Dokumente.\n</li>\n<li><b>skip</b>:\nBestimmt, wieviele Dokumente ausgelassen werden sollen.\n</li>\n<li><b>execution_stats</b>:\nBestimmt die Ausgabe von Statistiken am Ende des Queries.\n</li>\n</ul>\nIn den folgenden Beispielen soll eine imaginäre Datenbank mit Daten zu Autos herhalten."},{"type":"subheader","crDate":1722868581228,"chDate":1722868647504,"text":"Selector"},{"type":"paragraph","crDate":1722868649583,"chDate":1722869287063,"text":"Jeder Query braucht das <i>selector</i>-Attribut. \nDieses bestimmt, welche Dokumente aus der Datenbank gesucht wird. Im einfachsten Fall wird einfach nach einem bestimmten Attribut mit einem bestimmten Wert gesucht. "},{"type":"code","crDate":1722869291122,"chDate":1722869315743,"text":"db.find({\n selector:{\n  marke: 'Hyundai'\n }\n})"},{"type":"paragraph","crDate":1722869324468,"chDate":1722870888954,"text":"Um <i>Logik</i> abzufragen, kann ein Objekt hinzugefügt werden, in dem logische Aussagen über den Attribut-Namen definiert werden."},{"type":"code","crDate":1722869485619,"chDate":1722869495214,"text":"selector: {\n leistungKW: {\n  $lt: 100\n }\n}"},{"type":"paragraph","crDate":1695042742031,"chDate":1722870866190,"text":"<i>Logische Verknüpfungen</i> können einfach mit mehreren logischen Aussagen. Diese werden standardmäßig mit AND verknüpft.\nSollen sie anders verknüpft werden, so wird die gewünschte Verknüpfung als Attributname für eine weitere Verschachtelung vewendet. Mögliche Verknüpfungen sind:\n<ul>\n<li><b>$and</b>\nUnd-Verknüpfung. Erwartet ein Array.</li>\n<li><b>$or</b>\nOder-Verknüpfung. Erwartet ein Array.</li>\n<li><b>$not</b>\nErwartet einen Selector. Matcht, falls der Selector nicht passt.</li>\n<li><b>$nor</b>\nErwartet ein Array. Matcht, falls keiner der Selektoren passt.</li>\n<li><b>$all</b>\nErwartet ein Array. Matcht, wenn alle Selektoren passen.</li>\n</ul>\n"},{"type":"code","crDate":1722869484147,"chDate":1722870342669,"text":"db.find({\n selector: {\n  $or: [\n   {\n    marke: 'Hyundai'\n   }, {\n    marke: 'Audi'\n   }\n  ]\n }\n})"},{"type":"paragraph","crDate":1695042728321,"chDate":1722870854103,"text":"<i>Verschachtelte Daten</i> können abgefragt werden, indem einfach die Objekt-Struktur mit Verschachtelungen verfolgt wird."},{"type":"code","crDate":1722870669846,"chDate":1722871091471,"text":"db.find({\n selector: {\n  motor: {\n   gefahreneKM: {\n    $lt: 10000\n   }\n  }\n }\n})\n\n// Eine einfache Abfrage kann auch mit der <i>dot-Notation</i> dargestellt werden:\ndb.find({\n selector: {\n  \"motor.gefahreneKM\": {\n   $lt: 10000\n  }\n }\n})"},{"type":"subheader","crDate":1722604886642,"chDate":1722604891386,"text":"Index"},{"type":"subheader","crDate":1722606141587,"chDate":1722606156279,"text":"Explain Endpoint"}]}