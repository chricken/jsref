{"content":[{"type":"paragraph","crDate":1689140407846,"chDate":1689143802396,"text":"Eine Middleware ist eine Funktion, die durch eine Anfrage an den Server in einer Verarbeitungskette aufgerufen wird. Sie werden z.B. für das Parsen von eingehenden Anforderungsdaten, die Bereitstellung statischer Dateien, das Verwalten von Authentifizierungs- und Sitzungszuständen, das Protokollieren und mehr verwendet.\nEine Middleware bekommt drei Parameter übergeben:\n<ul>\n<li>Ein Objekt, das viele Informationen zur Anfrage enthält</li>\n<li>Ein Objekt, das alle Methoden enthält, um eine Antwort an den Client zu senden</li>\n<li>Eine Funktion, um den nächsten Schritt in der Verarbeitungskette aufzurufen</li> </ul>\nIn einem Express-Server können beliebig viele Middlewares eingebunden werden. Diese werden in der Reihenfolge registriert, in der sie im Code auftauchen. Und in der selben Reihenfolge werden sie auch bei einer Anfrage aufgerufen.\nEine Verarbeitungskette einfacher Middlewares könnte wie unten aussehen."},{"type":"code","crDate":1689143517490,"chDate":1689144001825,"text":"import express from 'express';\nconst server = express();\n\n// Protokollierung der Anforderungszeit\nserver.use((req, res, next) => {\n console.log(`Zeit der Anforderung: ${Date.now()}`);\n next();\n});\n\n// Protokollierung der Methode und URL der Anforderung\nserver.use((req, res, next) => {\n console.log(`Methode: ${req.method}, URL: ${req.url}`);\n next();\n});\n\n// Überprüfung, ob ein Benutzer eingeloggt ist (konzeptionelles Beispiel)\nserver.use((req, res, next) => {\n if (!req.user) {\n  res.status(401).send('Bitte einloggen');\n } else {\n  next();\n }\n});\n\n// Einbinden der statischen Dateien\n// Dies wird durch eine Funktion berwerkstelligt, die \n// als Rückgabewert von express.static() kommt.\nserver.use(express.static('public', {\n    extensions: ['html', 'htm']\n}));\n\n// Fehlerbehandlung wird immer am Ende des Middleware-Stacks platziert\nserver.use((err, req, res, next) => {\n console.error(err.stack);\n res.status(500).send('Ein Fehler ist aufgetreten');\n});"},{"type":"subheader","crDate":1689141302882,"chDate":1689141306367,"text":"next()"},{"type":"paragraph","crDate":1689143894349,"chDate":1689144304222,"text":"Die <i>next()</i>-Funktion ruft den nächsten Schritt in der Verarbeitungskette auf.\nDadurch lässt sich gut steuern, ob die Verarbeitungskette stoppt oder weiterläuft.\nIm Beispiel unten wird ein Log in eine Datei geschrieben. Die Verarbeitungskette soll nur weiterlaufen, wenn das Schrieben der Log-Datei funktioniert hat."},{"type":"code","crDate":1689145531925,"chDate":1689145572983,"text":"import fs from 'fs';\nimport express from 'express';\nconst server = express();\n\nserver.use((req, res, next) => {\n let entry = `${Date.now()} - ${req.url}, ${req.method}\\n`;\n\n fs.appendFile(\n  'data/log.txt',\n  entry,\n  err => {\n   if (err) console.warn(err);\n    else next();\n   }\n  )\n});\n\n// Einbinden der statischen Dateien\nserver.use(express.static('public', {\n extensions: ['html', 'htm']\n}));\n\nserver.listen(8000, err => {\n if (err) console.log(err)\n else console.log('Server läuft');\n});\n"},{"type":"subheader","crDate":1689141231107,"chDate":1689145886950,"text":"Einschränkung auf URL"},{"type":"paragraph","crDate":1689145889136,"chDate":1689145933083,"text":"Express.js erlaubt es, Middleware auf bestimmte Routen oder Pfade zu beschränken. Um dies zu tun, wird der Pfad als erster Parameter in die <i>app.use()</i>-Methode ein. Die Middleware wird dann nur ausgeführt, wenn der Pfad der Anforderung mit dem angegebenen Pfad übereinstimmt."},{"type":"code","crDate":1689145949563,"chDate":1689146103816,"text":"server.use('/api', (req, res, next) => {\n console.log('Diese Middleware ist nur für Pfade aktiv, die mit /api beginnen.');\n next();\n});"}]}