{"content":[{"type":"paragraph","crDate":1718370918237,"chDate":1718370989817,"text":"Eiegntlich ist das Entfernen einer Webcomponent aus dem Dom sehr einfach.\nDas <i>this</i> der Klasse zeigt auf die eingebundene Komponente und diese kann mit der <i>remove()</i>-Methode entfernt werden. "},{"type":"code","crDate":1718371188336,"chDate":1718371258301,"text":"class Dummy extends HTMLElement {\n constructor(){\n  super();\n  this.root = this.attachShadow({mode: 'closed'});\n  this.root.append(template.cloneNode(true));\n }\n // Eventlistener für Mounting\n connectedCallback() {\n  setTimeout(() => {\n\n   this.remove();\n\n  }, 1000)\n }\n}\n\ncustomElements.define('my-dummy', Dummy);"},{"type":"subheader","crDate":1718370996497,"chDate":1718371004450,"text":"Eventhandler"},{"type":"paragraph","crDate":1718371616323,"chDate":1718371864830,"text":"Etwas schwieriger sieht die Sache aus, falls ein <i>Eventlistener</i> das Element entfernen soll.\nDenn wenn ein Eventlistener seien Handler aufruft, um die Komponente zu entfernen, dann wird dem Handler automatisch das angeklickte DOM-Element in das this geschrieben. Dieses zu entfernen, löscht nur den Button. \nDie Lösung ist, das <i>this</i> manuell mit der Componenten zu <i>binden</i>.\nDazu wird beim an den Eventlistener eine Version der Funktion übergeben, die mit der bind()-Methode ein definiertes Element als this übergeben bekommt."},{"type":"code","crDate":1718371875582,"chDate":1718371935918,"text":"class Dummy extends HTMLElement {\n constructor(){\n  super();\n  this.root = this.attachShadow({mode: 'closed'});\n  this.root.append(template.cloneNode(true));\n }\n delete(){\n  this.remove();\n }\n connectedCallback() {\n  const btn = this.root.querySelector('.btnRemove');\n  btn.addEventListener('click', this.delete.bind(this));\n }\n}\ncustomElements.define('my-dummy', Dummy);"}]}