{"content":[{"type":"paragraph","crDate":1718195479481,"chDate":1718196970160,"text":"Das Builder Design-Pattern soll das Anlegen von komplexen Objekten erleichtern. Statt die gewünschten Parameter der Klasse mit Argumenten zu füllen, wird für jedes gewünschte <i>Attribut</i> eine <i>Methode</i> erstellt, welche das Attribut anlegt.\nBeim Anlegen des Objektes wird dann zunächst das leere Objekt erzeugt. \nDann wird Schritt für Schritt jedes gewünschte Attribut über die dazugehörige Methode erzeugt.\nJede Methode gibt das gesamte Objekt als Rückgabewert zurück, sodass die Methoden verkettet werden können.\nDadurch soll die Klasse und vor allem das Anlegen der Objekte übersichtlicher und besser lesbar sein.\nÜbrigens braucht ein Builder keinen Constructor."},{"type":"code","crDate":1718196651037,"chDate":1718196691209,"text":"class Auto {\n setMarke(val) {\n  this.marke = val\n  return this;\n }\n setModell(val) {\n  this.modell = val;\n  return this;\n }\n setLeistungKW(val) {\n  this.leistungKW = val\n  return this;\n }\n setFarbe(val) {\n  this.farbe = val\n  return this;\n }\n}\n\nlet myCar = new Auto()\n .setMarke('Hyundai')\n .setModell('i20')\n .setLeistungKW(60)\n .setFarbe('Weiß')\n\nconsole.log(myCar);"}]}