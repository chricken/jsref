{"content":[{"type":"paragraph","crDate":1686727303204,"chDate":1686733235379,"text":"Argumente werden in der Reihenfolge in die Parameter einer Funktion geschrieben, in der sie auftauchen. Das erste Argument landet im ersten Parameter, das zweite im zweiten etc.\nSo einfach und nachvollziehbar dieses Prinzip auch ist, hat es mehrere Probleme bei Funktionen mit mehreren (mehr als zwei) Parametern.\n<ul>\n<li>Die Reihenfolge muss immer beachtet werden</li>\n<li>Nicht benötigte Argumente müssen trotzdem übergeben werden, wenn ein späteres Argument auftaucht</li>\n</ul>\nDiese Probleme können gelindert werden, indem die Parameter in der Reihenfolge ihrer \"Wichtigkeit\" angelegt werden. Wichtigkeit heißt, wie wahrscheinlich es ist, dass dieser Parameter benötigt wird. Eine vollständige Lösung ist dies aber nicht, da die \"Wichtigkeit\" nicht immer klar ist.\n<i>Named Arguments</i> bieten eine Lösung für dieses Problem: Die Argumente werden in einem Objekt zusammenzufasst und auf der Seite der Funktion per Destructuring auseinandergenommen.\nDas erlaubt es, die Reihenfolge zu ignorieren und unnötige Argumente wegzulassen."},{"type":"code","crDate":1686733102755,"chDate":1686733146135,"text":"const create = ({\n content = false,\n classes = [],\n type = 'div',\n parent = false\n} = {}) => {\n const newEl = document.createElement(type);\n if (content) newEl.innerHTML = content;\n if (classes.length) newEl.className = classes.join(' ');\n if (parent) parent.append(newEl);\n return newEl;\n}\n\nlet container = create({\n parent: document.body,\n content: 'Hallo Welt'\n})\n\ncreate({\n parent: container,\n content: 'Inner Element',\n classes: ['container']\n})"}]}