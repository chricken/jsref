{"content":[{"type":"paragraph","crDate":1753968838772,"chDate":1754055513941,"text":"Um Fehler in der Typisierung oder unnötige automatische Typisierung zu vermeiden, setzt Typescript auf <i>statische Typisierung</i>. Das bedeutet, eine Variable bekommt einen Datentypen zugewiesen und dieser Datentyp kann nicht verändert werden.\nDas wird erreicht, indem beim Compiling die Datentypen beobachtet werden. Bei einer Unstimmigkeit führt dies zu einer Fehlermeldung.\nWenn diese Überprüfung erfolgreich abgelaufen ist, wird der JS-Code erzeugt.\nDas bedeutet unter anderem, dass die Typsicherheit nur während der Entwicklung gegeben ist. Falls Daten zur Laufzeit z.B. aus einer JSON-Datei importiert werden, wird der Datentyp nicht weiter geprüft.\nDie Deklaration des Datentypes ist übrigens <i>optional</i>, muss also nicht gemacht werden."},{"type":"subheader","crDate":1754051746535,"chDate":1754051749911,"text":"Deklaration"},{"type":"paragraph","crDate":1754051653096,"chDate":1754054227573,"text":"Um den Datentypen einer Variablen zu deklarieren, wird dieser mit einem Doppelpunkt <i>:</i> hinter den Variablennamen geschrieben.\nErlaubt sind die bekannten Datentypen <i>number</i>, <i>string</i> und <i>boolean</i>.\nFalls unsicher ist, welchen Datentypen diese Variable annehmen wird oder sich dieser zur Laufzeit variabel sein soll, kann das Schlüsselwort <i>any</i> verwendet werden."},{"type":"code","crDate":1754052791132,"chDate":1754053380934,"text":"let myNum: number =  1234;\nlet myString = 'Hello World';\n\nconsole.log(myNum, myString)"},{"type":"subheader","crDate":1754054881951,"chDate":1754054887820,"text":"Alternative Datentypen"},{"type":"paragraph","crDate":1754054890396,"chDate":1754054949869,"text":"Mithilfe von Pipes können mehrere Datentypen deklariert werden.\nDamit können die Variablen dann mit Werten in diesen Datentypen überschrieben werden."},{"type":"code","crDate":1754054956820,"chDate":1754054996551,"text":"let myValue: string | number = 23;\nconsole.log(myValue);\n\nmyValue = \"Hallo\";\nconsole.log(myValue);\n"},{"type":"subheader","crDate":1754053937863,"chDate":1754054168901,"text":"Arrays"},{"type":"paragraph","crDate":1754054172003,"chDate":1754054442080,"text":"Arrays können mehrere Werte enthalten. Diese bekommen ebenfalls einen Datentypen zugewiesen. So kann ein Array nur mit diesem Datentypen gefüllt werden. Die Datentypen der Attribute werden in <i>&lt;></i> geschrieben. \nHierfür kann auch any verwendet werden.."},{"type":"code","crDate":1754054532669,"chDate":1754055084556,"text":"let myArr: Array&lt;number> = [12, 45, 78];\nlet myArr2: Array&lt;string> = ['Merkur', 'Venus', 'Erde', 'Mars'];\nlet myArr3: Array&lt;any> = ['Merkur', 132, true];\n\nconsole.log(myArr);\nconsole.log(myArr2);\nconsole.log(myArr3);"},{"type":"subheader","crDate":1754055535461,"chDate":1754055540794,"text":"Objekte"},{"type":"paragraph","crDate":1754055544313,"chDate":1754055951339,"text":"Auch bei Objekten kann die innere Struktur vordefiniert werden. \nDies wird im einfachsten Fall über eine { } gemacht, in der die Datentypen der Attribute vordefiniert werden.\nWenn diese Variable mit anderen Datentypen gefüllt wird, führt dies zu einer Fehlermeldung im Editor. Im Browser jedoch nicht.\nAuch Attribute, die in der Definition nicht aufgeführt werden, führen zu einer Fehlermeldung."},{"type":"code","crDate":1754056032064,"chDate":1754056058027,"text":"let myObj: { vName: string, nName: string, yearOfBirth: number } = {\n vName: 'Max',\n nName: 'Mustermann',\n yearOfBirth: 1990,\n place: 'Musterhausen'  // -> Fehlermeldung\n}\n\nconsole.log(myObj);"}]}