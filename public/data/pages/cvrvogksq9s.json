{"content":[{"type":"paragraph","crDate":1688981384383,"chDate":1688985271374,"text":"Die Idee hinter Enum (<i>Enumerations</i>) ist, dass statische Werte, die thematisch zusammengehören, in einer Gruppe organisiert werden.\nDie wesentlichen Vorteile gegenüber normalen Variablen sind:\n<ul>\n<li><b>Typsicherheit</b>: Enums erfordern, dass jede Variable auf einen Wert im Enum verweist, wodurch unerwartete Werte vermieden werden.</li>\n<li><b>Lesbarkeit</b>: Enums können verwendet werden, um den Code lesbarer zu machen, indem sie semantisch zusammengehörige Werte zu einer Gruppe zusammenfassen.</li>\n<li><b>Dokumentation</b>: Enums sind in der Regel selbst dokumentiert, wodurch Entwickler schnell erkennen können, welche Werte zulässig sind und welche nicht.</li>\n</ul>\nSie werden gern in Scenarien eingesetzt wie z.B.: \n<ul>\n<li>Definition von Statuscodes, Zuständen oder Optionen</li>\n<li>Definition von Konstanten, die in einer bestimmten Domäne gelten</li>\n<li>Gruppierung von Werten mit ähnlicher Semantik, um die Lesbarkeit des Codes zu verbessern</li>\n<li>Fallunterscheidungen, bei denen nur bestimmte diskrete Werte zulässig sind</li>\n</ul>\nJavascript bietet selbst keine Enums an, aber dank der Flexibilität von JS lassen sich diese relativ einfach umsetzen."},{"type":"paragraph","crDate":1688981852756,"chDate":1707228451654,"text":"Im einfachsten und unvollständigen Fall lässt sich eine Enum mit einem Array simulieren.\nIm folgenden Beispiel werden Fehlermeldungen in einem Array abgelegt. Auf diese Weise müssen im Code diese Meldungen nicht mehr geschreiben werden. Dadurch ergeben sich weniger Fehler und ein besser lesbarer Code.\nDas Beispiel ist zwar gut zum Erläutern der Idee, in der Praxis aber unpraktisch. Denn es müssen Indizies eingesetzt werden, welche sich schwer merken lassen und fehleranfällig sind."},{"type":"code","crDate":1688982005969,"chDate":1688982452048,"text":"const errors = [\n    'Die Datei konnte nicht geöffnet werden.',\n    'Ungültige Eingabe',\n    'Es wurde versucht, auf eine nicht vorhandene Datei zuzugreifen.',\n    'Die Datei ist schreibgeschützt und kann nicht bearbeitet werden.',\n    'Kein Speicherplatz auf dem Laufwerk verfügbar.',\n    'Das Dateiformat wird nicht unterstützt.'\n]\n\nconsole.log(errors[1]);  // -> Ungültige Eingabe"},{"type":"paragraph","crDate":1688982572132,"chDate":1688985917714,"text":"Etwas besser als die Verwendung eines Arrays sind Objekte. In diesen können die Daten mit Schlüsseln versehen werden, die relativ leicht zu merken sind. \nDamit das Objekt nun nicht nachträglich verändert werden kann, soll es noch mit <i>Object.freeze()</i> eingefroren werden.\nSo kann der Aufruf verkürzt werden."},{"type":"code","crDate":1688982705312,"chDate":1688985903792,"text":"const errors = Object.freeze({\n    access: 'Die Datei konnte nicht geöffnet werden.',\n    entry: 'Ungültige Eingabe.',\n    exists:'Es wurde versucht, auf eine nicht vorhandene Datei zuzugreifen.',\n    readonly: 'Die Datei ist schreibgeschützt und kann nicht bearbeitet werden.',\n    storage: 'Kein Speicherplatz auf dem Laufwerk verfügbar.',\n    format: 'Das Dateiformat wird nicht unterstützt.'\n})\n\nconsole.log(errors.entry);  // -> Ungültige Eingabe\n\nerrors.murks = 'Alles ist Murks.'\n\nconsole.log(errors.murks);  // -> undefined"}]}