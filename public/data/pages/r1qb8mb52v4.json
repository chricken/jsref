{"content":[{"type":"paragraph","crDate":1689168097353,"chDate":1689169664466,"text":"Routen und Middlewares bekommen als zweiten Parameter ein Objekt übergeben, das viele Methoden enthält, um eine Antwort zum Client zu senden.\nDie wichtigsten dieser Methoden sind:\n"},{"type":"subheader","crDate":1689169991654,"chDate":1689169996685,"text":"send()"},{"type":"paragraph","crDate":1689169998750,"chDate":1689170111774,"text":"Die send()-Methode sendet einen String an den Client."},{"type":"code","crDate":1689170000126,"chDate":1689170003878,"text":"import express from 'express';\nconst server = express();\n\nserver.use('/', (req, res) => {\n    res.send('Hallo Welt')\n});\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));"},{"type":"subheader","crDate":1689170366026,"chDate":1689170369420,"text":"json()"},{"type":"paragraph","crDate":1689170371956,"chDate":1689170553971,"text":"Die json()-Methode wandelt den übergebenen Parameter in einen JSON.String um und gibt diesen an den Client zurück."},{"type":"code","crDate":1689170373793,"chDate":1689170378897,"text":"import express from 'express';\nconst server = express();\n\nserver.use('/', (req, res) => {\n    const meinAuto = {\n        marke: 'Hyundai',\n        modell:'i20',\n        leistungKW: 62,\n    }\n    res.json(meinAuto)\n});\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));"},{"type":"subheader","crDate":1689171203988,"chDate":1689171217500,"text":"set()"},{"type":"paragraph","crDate":1689171220323,"chDate":1689171267886,"text":"Mit der set()-Methode lässt sich ein neuer <i>Header</i> in die Antwort schreiben"},{"type":"code","crDate":1689171272791,"chDate":1689171285301,"text":"import express from 'express';\nconst server = express();\n\nserver.use('/', (req, res) => {\n    res.set('Hallo', 'Welt');\n    res.send('OK')\n});\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));\n"},{"type":"subheader","crDate":1689171312467,"chDate":1689171316362,"text":"get()"},{"type":"paragraph","crDate":1689171319066,"chDate":1689171458928,"text":"Die get()-Methode ließt den Wert eines Headers aus.\nDies ist besonders hilfreich, wenn die Header mittels mehrerer Middlewares erweitert wurden."},{"type":"code","crDate":1689171413155,"chDate":1689171472959,"text":"import express from 'express';\nconst server = express();\n\nserver.use('/', (req, res) => {\n res.set('Hallo', 'Welt');\n console.log(res.get('Hallo'));  // -> Welt\n res.send('OK')\n});\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));\n"},{"type":"subheader","crDate":1689171713429,"chDate":1689171717557,"text":"redirect()"},{"type":"paragraph","crDate":1689171738716,"chDate":1689171761250,"text":"Weißt den Client an, die angegebene URL zu öffnen."},{"type":"code","crDate":1689171852149,"chDate":1689171867306,"text":"import express from 'express';\nconst server = express();\n\nserver.use('/anfrage', (req, res) => {\n    console.log('Anfrage angekommen');\n    res.redirect('/hash');\n});\n\nserver.get('/hash', (req, res) => {\n    let hash = (Math.random() * 1e16).toString(36);\n    res.send(hash);\n})\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));\n"},{"type":"subheader","crDate":1689171881877,"chDate":1689171885728,"text":"render()"},{"type":"paragraph","crDate":1689241807131,"chDate":1689243005376,"text":"Die render()-Methode wird für <i>Serverside Rendering</i> verwendet. Eine Vorlage wird mit Daten gerendert und das Ergebnis als HTML an den Client gesendet.\nDie Methode setzt voraus, dass ein View-Rendering-System (z.B. <i>EJS</i> oder <i>Pug</i>) eingerichtet ist.\nDie Funktion nimmt zwei Hauptparameter an: den Dateinamen der Vorlage und ein Objekt mit den Daten, die an die Vorlage übergeben werden sollen.\nExpress sucht automatisch nach der angegebenen Vorlagendatei im zuvor konfigurierten View-Ordner. \nDas gerenderte HTML wird dann als Antwort an den Client gesendet."},{"type":"code","crDate":1689242453483,"chDate":1689242580246,"text":"// SERVER\n// Express-Konfiguration\nimport express from 'express';\nconst server = express();\n\nserver.set('view engine', 'ejs');  // Verwendetes View-Rendering-System\nserver.set('views', 'views');      // Ordner für View-Vorlagen\n\n// Routen-Handler\nserver.get('/', (req, res) => {\n const data = {\n  title: 'Meine Seite',\n  message: 'Willkommen auf meiner Webseite!'\n };\n res.render('index', data);      // index.ejs wird gerendert und mit den Daten kombiniert\n});\n\n// Start des Servers\nserver.listen(3000, () => {\n console.log('Server läuft auf Port 3000');\n});\n"},{"type":"paragraph","crDate":1689243007908,"chDate":1689243011838,"text":"In diesem Beispiel wird EJS verwendet. Es wird erwartet, dass es einen Ordner namens \"views\" gibt, in dem sich eine Datei namens \"index.ejs\" befindet. Diese Datei kann EJS-Tags enthalten, um auf die übergebenen Daten zuzugreifen und diese in das HTML einzufügen."},{"type":"code","crDate":1689242463935,"chDate":1689243089095,"text":"// Vorlage index.ejs im Ordner ./views\n\n&lt;!DOCTYPE html>\n&lt;html>&lt;head>\n &lt;title> &lt;%= title %> &lt;/title>\n&lt;/head>&lt;body>\n &lt;h1> &lt;%= title %> &lt;/h1>\n &lt;p> &lt;%= message %> &lt;/p>\n&lt;/body>&lt;/html>"},{"type":"subheader","crDate":1689171892272,"chDate":1689171896373,"text":"sendfile()"},{"type":"paragraph","crDate":1689243156011,"chDate":1689245050621,"text":"Die sendFile()-Methode in Express wird verwendet, um eine <i>Datei</i> als Antwort an den Client zu senden. Diese Methode übernimmt den Dateipfad zur gewünschten Datei und sendet diese als Antwort an den Client. \nIm Beispiel unten stellt der Server eine Route bereit unter dem Namen <i>random.png</i>.\nIn dieser Route wird ein zufälliger Pfad zu einer Bilddatei ausgewürfelt und das Bild an den Client ausgeliefert.\nIm Client ist ein img-Tag eingerichtet, der die Route aufruft und das zurückgelieferte Bild darstellt."},{"type":"code","crDate":1689244559842,"chDate":1689249314452,"text":"import express from 'express';\nconst server = express();\n\nserver.use(express.static('public', { extensions: ['html'] }));\n\nserver.get('/random.png', (req, res) => {\n let rnd = ~~(Math.random() * 9 + 1); \n const filePath = 'absolute/path/to/files/in/os/nature_0${rnd}.png`);\n res.sendFile(filePath);\n});\n\nserver.listen(3000, () => {\n console.log('Server läuft auf Port 3000');\n});"},{"type":"code","crDate":1689244763834,"chDate":1689245080805,"text":"// HTML-Client\n\n&lt;img src=\"/random.png\" width=\"500\"/>"},{"type":"subheader","crDate":1689171905352,"chDate":1689171912591,"text":"download()"},{"type":"paragraph","crDate":1689248138601,"chDate":1689248598777,"text":"Die download()-Methode wird verwendet, um eine Datei zum Herunterladen an den Client zu senden. \nDiese Methode bietet die Möglichkeit, den Dateinamen, den Speicherort, den MIME-Typ und andere Optionen für den Download festzulegen. \nIm Beispiel wird bei Aufruf des download-Pfades ein zufälliges Bild zum Download angeboten. Beachte, dass auch Bilder und HTML-Codes nicht angezeigt sondern heruntergeladen werden können."},{"type":"code","crDate":1689248499369,"chDate":1689249277255,"text":"import express from 'express';\nconst server = express();\n\nserver.use(express.static('public', { extensions: ['html'] }));\n\nserver.get('/download', (req, res) => {\n\n // Zufällige Zahl\n let rnd = ~~(Math.random() * 9 + 1);\n\n // Pfad zusammenstellen\n const filePath = 'absolute/path/to/files/in/os/nature_0${rnd}.png`);\n\n res.download(filePath, 'bild.png', err => {\n  if (err) {\n   // Fehlerbehandlung\n   console.error(err);\n   res.status(404).send('Datei nicht gefunden');\n  }\n  });\n\n});\n\nserver.listen(3000, () => {\n console.log('Server läuft auf Port 3000');\n});\n"}]}