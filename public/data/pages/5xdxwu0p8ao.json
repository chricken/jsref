{"content":[{"type":"paragraph","crDate":1688560748440,"chDate":1688562665256,"text":"Komplexere Datenstrukturen können es notwendig machen, mehrere ähnliche Klassen zu erstellen. \nZum Beispiel könnte eine Klasse für das Erstellen von Mitarbeiter-Objekten und eine andere Klasse für Kunden gebraucht werden. Es gibt einige Informationen, die beide Klassen benötigen (Name, Geburtstag, Kontakt, ...). Andere Informationen werden nur von einer der Klassen benötigt (Mitarbeiternummer, Abteilung, ...). \nIn einem solchen Fall empfiehlt es sich, eine allgemeine Klasse zu erstellen, die alle gemeinsamen Informationen enthält. Und von dieser Klasse die Kind-Klassen abzuleiten.\nDas Erben einer Klasse erfolgt über das <i>extends</i>-Schlüsselwort. Die neue Klasse erhält dann eine Verknüpfung zu der \"Eltern\"-Klasse.\nIn der Kind-Klasse kann dann die Funktion <i>super()</i> aufgerufen werden, welche die Eltern-Klasse benutzt, um das Grund-Objekt anzulegen. An die Eltern-Klasse können über die super()-Funktion <i>Parameter</i> übergeben werden.\nNach dem Aufruf von super() kann dann das this-Objekt mit weiteren Eigenschaften und Methoden gefüllt werden."},{"type":"code","crDate":1688562644074,"chDate":1688562658809,"text":"class Person {\n    constructor(vname, nname, gebJahr) {\n        Object.assign(this, { vname, nname, gebJahr });\n    }\n    get fullName() {\n        return `${this.vname} ${this.nname}`;\n    }\n    get alter() {\n        return new Date().getFullYear() - this.gebJahr;\n    }\n}\n\nclass Mitarbeiter extends Person {\n    constructor(vname, nname, gebJahr, MaNr, Abteilung) {\n        super(vname, nname, gebJahr);\n        Object.assign(this, { MaNr, Abteilung });\n    }\n}\n\nclass Kunde extends Person {\n    constructor(vname, nname, gebJahr, KundenNr) {\n        super(vname, nname, gebJahr);\n        Object.assign(this, { KundenNr });\n    }\n}\n\nlet myMitarbeiter = new Mitarbeiter('Max', 'Mustermann', 1990, 123, 'admin');\nlet myKunde = new Kunde('Erika', 'Exempel', 1987, 100);\n\nconsole.log(myMitarbeiter.fullName);\nconsole.log(myKunde.alter);"},{"type":"paragraph","crDate":1694176801043,"chDate":1694177011972,"text":"Von einer vererbten Klasse kann auch mit dem super-Schlüsselwort auf die Eltern-Klasse zugegriffen werden.\nAuf diese Weise lassen sich z.B. Methoden aufrufen, etc."},{"type":"code","crDate":1694177014267,"chDate":1694177049768,"text":"'use strict';\n\nclass Person {\n constructor(vname, nname, geburtsjahr) {\n  Object.assign(this, { vname, nname, geburtsjahr });\n }\n get alter() {\n  return new Date().getFullYear() - this.geburtsjahr;\n }\n}\n\nclass Kunde extends Person {\n constructor(vname, nname, geburtsjahr) {\n  super(vname, nname, geburtsjahr);\n  this.kdNr = (Math.random() * 1e17).toString(36);\n }\n get volljaehrig() {\n  return super.alter >= 18;\n }\n}\n\nlet myKunde = new Kunde('Max', 'Mustermann', 2001);\nlet yourKunde = new Kunde('Max', 'Mustermann', 2010);\n\nconsole.log(myKunde.volljaehrig);\nconsole.log(yourKunde.volljaehrig);"}]}