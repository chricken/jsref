{"content":[{"type":"paragraph","crDate":1716815424847,"chDate":1716817222316,"text":"Das Memento Designpattern erlaubt es, die Zustände (<i>State</i>s) eines Objektes auf eine flexible Weise zu speichern und darauf zuzugreifen.\nDas Pattern besteht aus drei Elementen:\n<ul>\n<li><b>Originator</b>: Dieses speichert die Daten in seinem state-Attribut und legt die Mementos an. Im Beispiel der Stack.</li>\n<li><b>Memento</b>: Dies enthält einen Datensatz sowie weitere Steuerdaten (im Beispiel der Timestamp).</li>\n<li><b>Caretaker</b>: Dieser enthält alle gespeicherten sowie die Methoden, um darauf zuzugreifen.</li>\n</ul>"},{"type":"paragraph","crDate":1716815899965,"chDate":1716816756086,"text":"Im Beispiel unten wird ein Undo-Stack verwaltet. \nDazu wird bei jeder Eingabe eines Leerzeichens der Inhalt des Textfeldes in das State-Attribut des Originators (\"stack\") eingetragen.\nDann wird für den aktuellen State ein neuer Eintrag in den Caretaker (\"handleStack\") eingetragen. Für jeden neuen Eintrag wird ein neues Option-Element in die Selectbox eingehängt.\nSobald aus der Selectbox eine Option ausgewählt wurde, wird vom Caretaker das zum Timestamp passende State herausgepickt und in die Ausgabe übertragen.\n. "},{"type":"code","crDate":1716816792105,"chDate":1716817183516,"text":"&lt;body>\n &lt;textarea id=\"eingabe\">&lt;/textarea>\n &lt;div>\n  &lt;select id=\"selUndo\">&lt;/select>\n  &lt;button id=\"btnUndo\">Undo&lt;/button>\n &lt;/div>\n&lt;/body>"},{"type":"code","crDate":1716816866287,"chDate":1716816941164,"text":"// Originator\nclass UndoStack {\n constructor() {\n  this.state = '';\n }\n createMemento() {\n  const memento = new Memento(this.state);\n  handleStack.addMemento(memento);\n  return memento;\n }\n restore(memento) {\n  this.state = memento.getState();\n }\n}"},{"type":"code","crDate":1716816949604,"chDate":1716816985245,"text":"// Memento\nclass Memento {\n constructor(state) {\n  this.state = state;\n  this.timestamp = Date.now();\n }\n get getState() {\n  return this.state;\n }\n}"},{"type":"code","crDate":1716816994889,"chDate":1716817027493,"text":"// Caretaker\nclass Caretaker {\n constructor() {\n  this.mementos = [];\n }\n addMemento(memento) {\n  this.mementos.push(memento);\n }\n getByTimeStamp(timestamp) {\n  return this.mementos.find(\n   mem => mem.timestamp == timestamp\n  );\n }\n}"},{"type":"code","crDate":1716816830769,"chDate":1716817101359,"text":"// KONSTANTEN / VARIABLEN\nconst elements = {};\nconst stack = new UndoStack();\nconst handleStack = new Caretaker();\n\n// FUNKTIONEN\nconst domMapping = () => {\n elements.eingabe = document.querySelector('#eingabe')\n elements.btnUndo = document.querySelector('#btnUndo')\n elements.selUndo = document.querySelector('#selUndo')\n}\n\nconst handleSelectUndo = evt => {\n let undo = handleStack.getByTimeStamp(+evt.target.value)\n elements.eingabe.value = undo.getState;\n}\n\nconst handleInput = evt => {\n  if (evt.key == ' ') {\n   stack.state = evt.target.value;\n   const memento = stack.createMemento();\n\n   // Auswahl für das Selectfeld erstellen\n   const elOption = document.createElement('option');\n   elOption.innerHTML = `${memento.timestamp} (${memento.state.length} chars)`;\n   elOption.value = memento.timestamp;\n   elements.selUndo.prepend(elOption);\n\n   elements.selUndo.addEventListener('input', handleSelectUndo)\n  }\n}\n\nconst appendEventlisteners = () => {\n elements.eingabe.addEventListener('keydown', handleInput);\n}\n\nconst init = () => {\n domMapping();\n appendEventlisteners();\n}\n\n// INIT\ninit();"}]}