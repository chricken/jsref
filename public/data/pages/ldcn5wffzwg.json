{"content":[{"type":"paragraph","crDate":1692879068247,"chDate":1692879334148,"text":"<i>Named Route Parameters</i> sind eine Schreibweise, um GET-Parameter als Teil der URL zu übergeben, statt sie mit einem ? hinter die URL zu hängen. Das erlaubt eine besser lesbare Syntax und einfachere Untergliederung komplexer Routen.\nDie Parameter werden wie Ordnernamen in die URL des Aufrufs eingetragen. \nIn der Routen-URL werden die Parameter mit einem Doppelpunkt markiert.\nDie übergebenen Argumente werden im <i<params</i>-Attribut des <i>Request</i>-Objektes abgelegt."},{"type":"code","crDate":1692879349983,"chDate":1692880284509,"text":"// Server\nconst people = [\n { id: 1, name: \"John Doe\", age: 30, weight: 80 },\n { id: 2, name: \"Jane Doe\", age: 25, weight: 60 }\n];\n\nserver.get('/user/:id', (request, response) => {\n let person = people.find(item => item.id == request.params.id);\n response.json({\n  status: 'ok',\n  data: person\n })\n})\n\nserver.listen(8000, err => console.log(err || 'Server läuft'));"},{"type":"code","crDate":1692879351871,"chDate":1692880398181,"text":"// Client\nfetch('/user/1').then(\n res => res.text()  \n).then(\n console.log  \n // -> {\"status\":\"ok\",\"data\":\n // ->  {\"id\":1,\"name\":\"John Doe\",\"age\":30,\"weight\":80}\n // -> } \n).catch(\n console.warn\n)\n"},{"type":"paragraph","crDate":1692879354199,"chDate":1692880524563,"text":"Eine Route kann mehr als einen Parameter enthalten und dieser muss auch nicht am Ende der URL stehen.\nParameter und Routenbestandteile können vermischt werden und erlauben dadurch einen sehr flexiblen Umgang mit zu übergebenden Daten.\nAlle Routenbestandteile müssen in der URL gefunden werden, damit die Route reagiert."},{"type":"code","crDate":1692879857564,"chDate":1692880087163,"text":"// Server\nconst people = [\n { id: 1, name: \"John Doe\", age: 30, weight: 80 },\n { id: 2, name: \"Jane Doe\", age: 25, weight: 60 }\n];\n\nserver.get('/user/:id/profile/:attr', (request, response) => {\n let person = people.find(item => item.id == request.params.id);\n\n response.json({\n  status: 'ok',\n  data: person[request.params.attr]\n })\n})\n\nserver.listen(80, err => console.log(err || 'Server läuft'));"},{"type":"code","crDate":1692879887761,"chDate":1692880756835,"text":"// Client\nfetch('/user/1/profile/weight')\n.then( res => res.text())\n.then( console.log ) // -> 80\n.catch( console.warn )\n\nfetch('/user/2/profile/age')\n.then( res => res.text())\n.then( console.log ) // -> 25\n.catch( console.warn )   \n\nfetch('/user/1')\n.then( res => res.text())\n.then( console.log ) // -> ERROR\n.catch( console.warn )   \n\nfetch('/user/1/profile')\n.then( res => res.text() )\n.then( console.log ) // -> ERROR\n.catch( console.warn )   \n\n"}]}