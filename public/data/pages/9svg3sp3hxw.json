{"content":[{"type":"paragraph","crDate":1718197069616,"chDate":1718198512243,"text":"Funktionen in Javascript erwarten die Argumente in derselben Reihenfolge wie die Parameter angelegt wurden. Das hat zwei undschöne Auswirkungen:\n<ul>\n<li>Entwickler:innen müssen die <i>Reihenfolge</i> der Argumente beachten. Das kostet Konzentration und ggf. immer wieder ein Nachsehen in der Funktion</li>\n<li>Wenn ein Parameter einer Funktion seinen <i>Default</i>-Wert erhalten soll, dann muss das Argumet eigentlich nicht übergeben werden, Wenn aber die nachfolgenden Parameter mit Argumenten gefüllt werden müssen, dann muss auch das Argument übergeben werden, das eigentlich nicht gebraucht wird.</li>\n</ul>In einem solchen Fall können die <i>Named Arguments</i> helfen.\nEine Funktion oder Klasse erhält statt einzelner Parameter eine <i>Destructuring</i>-Syntax für ein Objekt. An die Funktion wird dann ein Objekt übergeben, in dem die gewünschten Argumente als Attribute hinterlegt sind.\nDies hat den Vorteil, dass die Reihenfolge irrelevant ist und dass damit auch unnötige Argumente nicht übergeben werden müssen.. Es hat allerdings den Nachteil, dass es mehr Schreib-Aufwand ist."},{"type":"code","crDate":1718197989650,"chDate":1718198005294,"text":"const calcVolume = ({\n length = 1,\n height = 1,\n depth = 1 }) => {\n return length * height * depth;\n}\n\nlet vol = calcVolume({\n length: 12,\n depth: 4\n})\n\nconsole.log(vol);  // -> 48"},{"type":"paragraph","crDate":1718198010876,"chDate":1718198413108,"text":"Nun kann es sein, dass an die Funktion gar kein Argument übergeben werden soll. In dem Fall würde die Funktion den Fehler ausgeben, dass das Destructuring keine Eingabe hat.\nDa auch das Destructuring nichts anderes als ein <i>Parameter</i> ist, kann das Destructuring auch einen Default-Parameter erhalten. Dies ist üblicherweise ein leeres Objekt."},{"type":"code","crDate":1718198450492,"chDate":1718198465643,"text":"const calcVolume = ({\n length = 1,\n height = 1,\n depth = 1 \n} = {}) => {\n return length * height * depth;\n}\n\nlet vol = calcVolume()\n\nconsole.log(vol);  // -> 1"}]}