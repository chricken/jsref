{"content":[{"type":"paragraph","crDate":1703082331960,"chDate":1703083421502,"text":"Vue bietet eine handvoll praktischer <i>Direktiven</i>. Falls diese Direktiven die Wünsche nicht erfüllen können, muss eine eigene Direktive erstellt werden, die das gewünschte Verhalten bereitstellt.\nEine eigene Direktive wird mit der <i>directive()</i>-Methode angelegt. \nDiese bekommt zwei Argumente übergeben: \n<ul>\n<li><b>Name</b>\nDies ist der Name der Direktive.</li>\n<li><b>Hooks</b>\nEine Sammlung von <i>Funktionen</i>, die zu bestimmten Zeitpunkten im Lebenszyklus eines Elementes ausgelöst werden. Sogenannte Hooks.\n<ul>\n<li><b>created</b>\nWird gefeuert, wenn das Element angelegt wurde, noch bevot es Attribute oder Eventlistener eingehängt wurden.</li>\n<li><b>beforeMount</b>\nWird gefeuert, kurz bevor das Element in das DOM eingehängt wird.</li>\n<li><b>mounted</b>\nWird gefeuert, wenn das Element und alle seine Kind-Elemente in das DOM eingehängt worden sind.</li>\n<li><b>beforeUpdate</b>\nWird gefeuert, kurz bevor ein Element sich verändert</li>\n<li><b>updated</b>\nWird gefeuert, nachdem ein Element sich verändert hat.</li>\n<li><b>beforeUnmount</b>\nWird gefeuert, kurz bevor ein Element aus dem DOM entfernt wird.</li>\n<li><b>unmounted</b>\nWird gefeuert, nachdem ein Element aus dem DOM entfernt wurde.</li>\n</ul>\n</li>\n</ul>"},{"type":"code","crDate":1703082175900,"chDate":1703082204185,"text":"myApp.directive('countchars', {\n mounted(el) {\n  // console.log(el);\n  let ta = el.querySelector('textarea');\n  let numChars = ta.value.length;\n                \n  const elCount = document.createElement('p');\n  elCount.className = 'count';\n  elCount.innerText = numChars + ' Zeichen';\n  el.append(elCount);\n }\n})"},{"type":"subheader","crDate":1703083475450,"chDate":1703083479713,"text":"Parameter"},{"type":"paragraph","crDate":1703083490193,"chDate":1703085364604,"text":"Jeder Hook kann bis zu vier Parameter annehmen. \nDiese sind: \n<ul>\n<li><b>element</b>\nDas Element, dem die Direktive zugewiesen wurde. Hiermit kann das DOM-Element direkt verändert werden</li>\n<li><b>binding</b>\nEin Objekt, über das weitere Parameter auf verscheidene Weise übergeben werden können\n<ul>\n<li><b>value</b>\nDer Wert, der an die Direktive übergeben wird. Bei v-my-directive=\"1 + 1\" wäre der Wert zum Beispiel 2.</li>\n<li><b>oldValue</b>\nDer vorherige Wert, nur verfügbar in beforeUpdate und updated. Er ist unabhängig davon verfügbar, ob sich der Wert geändert hat oder nicht.\n</li>\n<li><b>arg</b>\nDas Argument wird mit <i>: (Doppelpunkt)</i> an die Direktive angehängt, wie in der v-on-Direktive. In v-my-directive:myArg zum Beispiel wäre das Argument \"myArg\".</li>\n<li><b>modifiers</b>\nEin Objekt, das Modifikatoren enthält. Es können mehrere Modifikatoren mit <i>. (Punkt)</i> an die Direktive angehängt werden. In v-my-directive.a.b wäre das Objekt modifiers zum Beispiel { a: true, b: true }.</li>\n<li><b>instance</b>\nDie Instanz der Direktive, in der die Richtlinie verwendet wird</li>\n<li><b>dir</b>\nDas Objekt, das die Direktive definiert\n</ul>\n</li>\n<li><b>vnode</b>\nDas vue-Objekt, das vom DOM-Element repräsentiert wird.</li>\n<li><b>prevNode</b>\nDas vue-Objekt, das vom DOM-Element aus dem vorherigen Rendering repräsentiert wird. Nur in den Hooks beforeUpdate und updated verfügbar</li>\n</ul>"}]}