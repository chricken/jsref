{"content":[{"type":"paragraph","crDate":1688387555851,"chDate":1688388019239,"text":"Ein Closure ist eine Funktion, die eine Verbindung zu den Variablen ihres umgebenden Scopes herstellt, auch nachdem die äußere Funktion, in der sie definiert wurde, bereits zurückgegeben wurde.\nSie nutzt aus, dass eine Funktion als Referenz kopiert wird. Da eine Wertrückgabe auch ein Kopievorgang ist, bleibt die zurückgegebene Funktion im Scope der umgebenden Funktion und es kann auf die Variablen zugegriffen werden.\n"},{"type":"code","crDate":1688387942903,"chDate":1688387977201,"text":"const createCounter = (start = 0) => {\n    let count = start;\n\n    return () => {\n        return count++;\n    }\n}\n\nlet counter = createCounter();\n\nconsole.log(counter());  // -> 0\nconsole.log(counter());  // -> 1\nconsole.log(counter());  // -> 2"},{"type":"paragraph","crDate":1688388137495,"chDate":1688388289282,"text":"Ein anderes Beispiel.\nIn diesem Code ist <i>createAdder()</i> eine Funktion, die eine andere Funktion zurückgibt. Die innere Funktion ist ein Closure, weil sie Zugriff auf das <i>x</i> hat, das ursprünglich an createAdder() übergeben wurde, auch nachdem createAdder ausgeführt wurde."},{"type":"code","crDate":1688388139967,"chDate":1688388144278,"text":"const createAdder = x => y => x + y;\n\nlet add5 = createAdder(5);\nlet add2 = createAdder(2);\n\nconsole.log(add5(2));  // gibt 7 aus\nconsole.log(add2(10));  // gibt 12 aus"},{"type":"paragraph","crDate":1688388609388,"chDate":1688388977514,"text":"Ein Closure erlaubt es auch, quasi schreibgeschützte Variablen anzulegen.\nDie zurückgegebene Funktion kann den Wert auslesen, ohne die Daten beschreiben zu können.\nMit der Einführung von Konstanten verliert diese Eigenschaft an Bedeutung."},{"type":"code","crDate":1688388987238,"chDate":1688388995509,"text":"const createReadOnly = () => {\n let key = (Math.random()*1e17).toString(36);\n return () => {\n  return key;\n }\n}\n\nlet myKey1 = createReadOnly();\nlet myKey2 = createReadOnly();\n\nconsole.log(myKey1());\nconsole.log(myKey2());\nconsole.log(myKey1());\nconsole.log(myKey2());\n"}]}