{"content":[{"type":"paragraph","crDate":1723195161389,"chDate":1723195225970,"text":"Ein Import wird als sog. <i>Live Binding</i> angelegt. D.h., der Import ist eine Verknüpfung mit der exportierten Variable.\nDas hat zur Folge, dass die Variable nur innerhalb des importierten Moduls überschrieben werden kann. Der Versuch, einen import zu überschrieben, führt zu einer Fehlermeldung.\nÄnderungen, die im Modul vorgenommen werden, sind im Import sofort sichtbar.\nFalls aus einem Modul ein Objekt importiert wird, kann dessen Inhalt problemlos verändert werden. Das Objekt selbst kann aber nicht überschrieben werden. Damit verhält sich ein import wie eine Konstante."},{"type":"code","crDate":1723195344732,"chDate":1723195422450,"text":"// dummy.js\nexport let x = 1;\n\n// Variable kann im Modul problemlos geändert werden\nsetInterval(() => x++, 500)"},{"type":"code","crDate":1723195356530,"chDate":1723195770267,"text":"import {x} from './dummy.js';\n\nsetTimeout(() => {\n    console.log(x);  // irgendwas größer als 1\n}, 500)\n\ndummy = 200;    // -> \"Dummy\" is read-only"},{"type":"subheader","crDate":1723195440109,"chDate":1723195447809,"text":"Default-Export"},{"type":"paragraph","crDate":1723195449907,"chDate":1723195637164,"text":"Default-Export verhält sich etwas anders. Änderungen, die nachträglich in der exportierten Variablen gemacht wurde, sind im Import nicht zu sehen. \nDas liegt daran, dass der default-Export als Kopie ausgeführt wird und nachträgliche Änderungen an der Variablen keine Auswirkung haben."},{"type":"code","crDate":1723195707670,"chDate":1723195725097,"text":"// dummy.js\nlet x = 1;\nexport default x;\nsetInterval(() => x++, 50)"},{"type":"code","crDate":1723195737195,"chDate":1723195804825,"text":"import x from './dummy.js';\n\nsetTimeout(() => {\n    console.log(x);  // -> 1\n}, 500)"},{"type":"paragraph","crDate":1723196330640,"chDate":1723196865016,"text":"Eine Lösung ist das Exportieren eines Objektes. Da dieses als Referenz kopiert wird, kann es nach dem Export im Modul verändert werden. Außerdem können die Attribute eines Objektes problemlos im importieren Script verändert und erweitert werden."},{"type":"code","crDate":1723196869990,"chDate":1723196911631,"text":"// dummy.js\nlet dummy = {\n    x: 1\n}\nexport default dummy;\nsetInterval(() => dummy.x++, 50)"},{"type":"code","crDate":1723196917415,"chDate":1723196956711,"text":"import dummy from './dummy.js';\n\nsetTimeout(() => {\n    console.log(dummy.x); // -> irgendwas größer als 200\n}, 500)\n\ndummy.x = 200;    // -> Das Objekt kann beliebig verändert werden\ndummy.y = 300;    // -> Änderungen sind in allen Modulen sichtbar\n\n"},{"type":"paragraph","crDate":1723197299031,"chDate":1723197422070,"text":"Falls der Import nicht veränderbar sein soll, dann empfiehlt sich der Export eines Funktion, welche die Variable ausliest.\nDa die Funktion ihren Scope in dem Modul behält, kann sie bei jeder Ansprache den aktuellen Wert der Variablen auslesen."},{"type":"code","crDate":1723197428608,"chDate":1723197458531,"text":"// dummy.js\nlet x = 1;\n\nexport const getX = () => x;\n\nsetInterval(() => x++, 50)"},{"type":"code","crDate":1723197427724,"chDate":1723197486965,"text":"// index.js\nimport {getX} from './dummy.js';\n\nsetTimeout(() => {\n    console.log(getX()); // -> irgendwas größer als 1\n}, 500)\n\ngetX = 200;    // -> getX is readOnly\n\n"}]}