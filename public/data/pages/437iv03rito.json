{"content":[{"type":"paragraph","crDate":1755072865988,"chDate":1755073577709,"text":"Redux ist eine Open-Source-JavaScript-Bibliothek für die Verwaltung und Zentralisierung des Anwendungszustands (<i>Application State</i>).\nEs wurde entwickelt, um Anwendungen zu erstellen, die sich konsistent verhalten. Diese sollen in verschiedenen Umgebungen (Client, Server und nativ) laufen und einfach zu testen sein.\nRedux dient hauptsächlich als Speicherverwaltung für Javascript-Anwendungen. Es wird am häufigsten zusammen mit Bibliotheken wie React oder Angular für den Aufbau von Benutzeroberflächen verwendet.\nDabei folgt Redux vier Grundregeln:\n<ul><li><b>Einzige Wahrheitsquelle (Single Source of Truth): </b>Der gesamte Anwendungszustand ist in einem einzigen JavaScript-Objekt gespeichert, das als \"Store\" bezeichnet wird.</li>\n<li><b>Unveränderlicher Zustand (Immutable State): </b>Der Zustand kann nicht direkt verändert werden. Stattdessen werden Änderungen durch die Ausführung von \"Aktionen\" (Actions) ausgelöst.</li>\n<li><b>Reducer-Funktionen: </b>Reine Funktionen, die den aktuellen Zustand und eine Aktion entgegennehmen und einen neuen Zustand zurückgeben.\n</li>\n<li><b>Unidirektionaler Datenfluss: </b>Daten fließen in eine Richtung\n<ul>\n<li>Actions werden ausgelöst (dispatched)</li>\n<li>Reducer verarbeiten diese Actions</li>\n<li>Der Store wird aktualisiert</li>\n<li>UI reagiert auf Änderungen</li>\n</ul></li></ul>"},{"type":"paragraph","crDate":1755073283680,"chDate":1755073753499,"text":"Obwohl Redux mit verschiedenen UI-Bibliotheken verwendet werden kann, wird es besonders häufig mit React kombiniert. \nDie offizielle Verbindung zwischen React und Redux wird durch die react-redux-Bibliothek hergestellt die spezielle Komponenten und Hooks bereitstellt, um React-Komponenten mit dem Redux-Store zu verbinden"},{"type":"subheader","crDate":1755072856180,"chDate":1755072863967,"text":"React-Redux"},{"type":"paragraph","crDate":1755072675275,"chDate":1755073795472,"text":"React-Redux ist die offizielle Bibliothek, die eine React-Anwendung mit einem Redux-Store verbindet.\nDie Hauptaufgabe von React-Redux besteht darin, React-Komponenten die Möglichkeit zu geben, mit dem Redux-Store zu \"sprechen\".\nDies geschieht auf zwei Wegen:<ul>\n<li><b>Zustand auslesen: </b>Komponenten können Daten aus dem Redux-Store lesen.</li>\n<li><b>Aktionen auslösen (Dispatching): </b>Komponenten können Aktionen auslösen, um den Zustand im Store zu aktualisieren.</li></ul>"},{"type":"subheader","crDate":1755074209818,"chDate":1755074227265,"text":"Installation"},{"type":"paragraph","crDate":1755074230054,"chDate":1755075164434,"text":"Für neue Projekte empfiehlt das Redux-Team die Verwendung des Redux-Toolkits, da es \n<ul><li>Die Redux-Store-Konfiguration vereinfacht</li>\n<li>Weniger Boilerplate-Code erfordert</li>\n<li>Best Practices bereits integriert hat</li>\n<li>Die gängigsten Redux-Addons enthält</li></ul>"},{"type":"terminal","crDate":1755074395421,"chDate":1755074414463,"text":"npm install @reduxjs/toolkit react-redux"},{"type":"paragraph","crDate":1755074443867,"chDate":1755074654903,"text":"Nach der Installation kann Redux im Projekt importieren und verwendet werden.\n"},{"type":"code","crDate":1755074742050,"chDate":1755076365457,"text":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// Store mit Redux Toolkit erstellen\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nconst store = configureStore({ reducer: rootReducer });\n\n// Mit React-Redux verbinden\nimport { Provider } from 'react-redux';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n &lt;Provider store={store}>\n  &lt;App />\n &lt;/Provider>\n);\n"}]}