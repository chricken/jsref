{"content":[{"type":"paragraph","crDate":1693230914616,"chDate":1693231137617,"text":"Das aus dem Modul importierte Methode liefert alle Methoden, um mit der Datenbank zu kommunizieren.\nHier eine Übersicht über die wichtigsten Methoden:"},{"type":"subheader","crDate":1693231327054,"chDate":1693231345666,"text":"list()"},{"type":"paragraph","crDate":1693231797872,"chDate":1693231816951,"text":"Lädt ein Array mit den Namen aller Datenbanken in Couch."},{"type":"code","crDate":1693231819174,"chDate":1693231849958,"text":"db.list().then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1693231320491,"chDate":1693231348626,"text":"create()"},{"type":"paragraph","crDate":1695038683233,"chDate":1695038731903,"text":"Die <i>create()</i>-Methode erzeugt eine neue Datenbank mit dem Namen, der als Parameter übergeben wird."},{"type":"code","crDate":1695038750540,"chDate":1695038777858,"text":"let dbName = 'example';\n\n// ...\n\ndb.create(dbName).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"paragraph","crDate":1695038859284,"chDate":1695039242729,"text":"Falls die Datenbank schon existiert, liefert die Methode eine Fehlermeldung wieder zurück. Generell sollte daher vor dem Anlegen einer Datenbank geprüft werden, ob diese existiert. \nIm Beispiel unten wird zunächst eine Liste der vorhandenen Datenbanken geladen. Dann wird geprüft, ob der gewünschte Datenbankname in der Liste existiert. Nur, wenn sie <i>nicht</i> existiert, wird sie angelegt."},{"type":"code","crDate":1695039350401,"chDate":1695041048623,"text":"let dbName = 'example';\n\n// ...\n\ndb.list().then(\n res => {\n  if (!res.includes(dbName)) {\n   return db.create(dbName);\n  }\n }\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1693231580733,"chDate":1693231583315,"text":"get()"},{"type":"paragraph","crDate":1693231585202,"chDate":1693231662242,"text":"Informationen über die genannten Datenbank laden."},{"type":"code","crDate":1693231677075,"chDate":1695041065318,"text":"db.get('autos').then(\n console.log  // -> Informationen über die DB\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1693231388745,"chDate":1693231393054,"text":"destroy()"},{"type":"paragraph","crDate":1695039466378,"chDate":1695039945608,"text":"Entfernt eine Datenbank mit dem genannten Namen.\nFalls die Datenbank nicht existiert, liefert nano eine Fehlermeldung. Um dies zu verhindern, sollte zunächst auf die Existenz der Datenbank geprüft werden. Die Datenbank wird nur dann angelegt, wenn nicht schon eine Datenbank gleichen Namens existiert."},{"type":"code","crDate":1695040295757,"chDate":1695041079261,"text":"let dbName = 'example';\n\n// ...\n\ndb.list().then(\n res => {\n  if (res.includes(dbName)) {\n   return db.destroy(dbName);\n  }\n }\n).then(\n console.log\n).catch(\n console.warn\n)"},{"type":"subheader","crDate":1695040721335,"chDate":1695040725481,"text":"use()"},{"type":"paragraph","crDate":1695040718087,"chDate":1695040869260,"text":"Diese Methode liefert ein Objekt zurück, das alle Methoden enthält, um die genannte Datenbank zu bearbeiten. \nDie use()-Methode ist die einzige Methode in nano, die keinen Promise zurückliefert."},{"type":"code","crDate":1695040878148,"chDate":1695041090044,"text":"let dbName = 'example';\n\n// ...\n\nlet myDB = db.use(dbName);\n\n// Alle Dokument-Methoden\nmyDB.list().then(\n console.log\n).catch(\n console.warn\n)"}]}