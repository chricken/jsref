{"content":[{"type":"paragraph","crDate":1685447075824,"chDate":1685448594015,"text":"Javascript wurde entwickelt unter der Vorgabe, dass es leicht zu erlernen sein soll.\nDaher wurde darauf verzichtet, viele verschiedene Datentypen zum Verarbeiten von Zahlen bereitzustellen. In Javascript gibt es zum Speichern von Zahlen nur den Datentyp \"Number\". Dahinter verbirgt sich eine 16-stellige Fließkommazahl mit Vorzeichen.\nDiese Einfachheit ist auf der einen Seite simpel. Andererseits hat sie in gewissen Situationen ihre Einschränkungen."},{"type":"paragraph","crDate":1685450924202,"chDate":1685455399466,"text":"Natürlich sind Zahlen zum Rechnen gedacht. Javascript unterstützt die Rechenoperatoren Addition, Subtraktion, Multiplikation, Division, Potenzierung und Modulo."},{"type":"code","crDate":1685452200930,"chDate":1685455466789,"text":"let x = 50, y = 34;\n\nlet result = x + y;\nconsole.log(result);  // -> 84\n\nresult = x - y;\nconsole.log(result);  // -> 16\n\nresult = x * y;\nconsole.log(result);  // -> 1700\n\nresult = x / y;\nconsole.log(result);  // -> 1.4705882352941178\n\nresult = x ** y;\nconsole.log(result);  // -> 2500\n\nresult = x % y;\nconsole.log(result);  // -> 16"},{"type":"subheader","crDate":1685453003326,"chDate":1685453008877,"text":"Kurzsyntax"},{"type":"paragraph","crDate":1685452570859,"chDate":1685452875390,"text":"Ein sehr häufiger Wunsch ist es, eine Variable mithilfe einer Rechnung direkt zu manipulieren. \nDabei hilft die Kurzsyntax. \nx += 2 \nist desselbe wie \nx = x + 2"},{"type":"code","crDate":1685452877392,"chDate":1685455545487,"text":"let x = 34, y = 5;\n\nx += y;\nconsole.log(x);  // -> 39\n\nx *= y;\nconsole.log(x);  // -> 195\n\nx -= y;\nconsole.log(x);  // -> 190\n\nx /= y;\nconsole.log(x);  // -> 38\n\nx **= 2;\nconsole.log(x);  // -> 1444\n\nx %= y;\nconsole.log(x);  // -> 3"},{"type":"subheader","crDate":1685452987983,"chDate":1685452996590,"text":"Inkrement, Dekrement"},{"type":"paragraph","crDate":1685453797797,"chDate":1685454080509,"text":"Um schnell einen Wert um 1 erhöhen oder verringern zu können, helfen die Operatoren ++ und --\nDieser Operator kann vor oder hinter eine Variable geschrieben werden.\n"},{"type":"code","crDate":1685454204869,"chDate":1685454795736,"text":"let x = 23;\n\nx++;\nconsole.log(x);  // -> 24\n\nx--;\nconsole.log(x);  // -> 23"},{"type":"paragraph","crDate":1685454387406,"chDate":1685454742828,"text":"Je nachdem, ob der Operator vor der Variablen steht oder dahinter, wird die Variable zuerst verändert und dann verwendet ..."},{"type":"code","crDate":1685454544363,"chDate":1685454698511,"text":"let x = 23;\n\nconst ausgabe = value => console.log('inner', value);  // -> 24\n\nausgabe(++x);\n\nconsole.log('outer', x);  // -> 24"},{"type":"paragraph","crDate":1685454576616,"chDate":1685454748133,"text":"... oder zuerst verwendet und dann verändert."},{"type":"code","crDate":1685454601766,"chDate":1685454656109,"text":"let x = 23;\n\nconst ausgabe = value => console.log('inner', value);  // -> 23\n\nausgabe(x++);\n\nconsole.log('outer', x);  // -> 24"},{"type":"subheader","crDate":1685454890216,"chDate":1685454894368,"text":"Schreibweise"},{"type":"paragraph","crDate":1685454911416,"chDate":1685455183395,"text":"Bei großen Zahlen, insbesondere solche mit vielen Nullen, ist es sehr fehleranfällig die Nullen zu zählen.\nJavascript bietet daher den \"e\"-Operator für große Zahlen. Das \"e\" steht für Exponent und multipliziert mit dem 10er-Exponenten."},{"type":"code","crDate":1685455189251,"chDate":1685455319548,"text":"let x = 1.23e9;\n// let x = 1.23 * 10 ** 9;\n\nconsole.log(x);  // -> 1230000000"},{"type":"paragraph","crDate":1685457462434,"chDate":1685457874922,"text":"Zahlen können auch in anderen Zahlensystemen geschrieben werden. Ein Prefix definiert dabei das Zahlensystem.\nDer Prefix \"0x\" (\"Null x\") definiert eine Zahl als hexadezimal.\nDer Prefix \"0o\" (\"Null o\") definiert eine Zahl als oktal.\nDer Umgang mit Binärzahlen ist nicht ganz so simpel. Hier muss die Zahl als String definiert und dann mit parseInt() umgewandelt werden."},{"type":"code","crDate":1685457877107,"chDate":1685458030766,"text":"let x = 0x20;\nconsole.log(x);  // -> 32\n\nlet y = 0o20;\nconsole.log(y);  // -> 16\n\nlet z = Number.parseInt('10101', 2);\nconsole.log(z);  // -> 21\n"},{"type":"subheader","crDate":1685449661648,"chDate":1685449667007,"text":"Rundungsfehler"},{"type":"paragraph","crDate":1685448601279,"chDate":1685450399720,"text":"Mit Fließkommazahlen kommt es gelegentlich zu Ungenauigkeiten, da die Daten im Prozessor als Binärzahlen verarbeitet werden. So kann es geschehen, dass eine Addition wie 3 + 1 zu einem Ergebnis wie 4.00000000003 führt. Es gibt keine einfache Lösung für dieses Problem. Lediglich die Empfehlung, auf Brüche zu verzichten, wann immer möglich oder Libraries wie \"BigJS\" und \"decimal.js\" zu verwenden"},{"type":"header","crDate":1685456110484,"chDate":1685456114765,"text":"Methoden"},{"type":"subheader","crDate":1685456125205,"chDate":1685456444565,"text":"Number.isInteger()"},{"type":"paragraph","crDate":1685456116998,"chDate":1685456214720,"text":"Diese Methode ermittelt, ob ein Zahl Nachkommastellen hat oder nicht."},{"type":"code","crDate":1685456220719,"chDate":1685456363450,"text":"let x = 42, y = 3;\nconsole.log( Number.isInteger(x/y) );  // -> true\n\ny = 4;\nconsole.log( Number.isInteger(x/y) ); // -> false"},{"type":"subheader","crDate":1685456427967,"chDate":1685456450892,"text":"Number.isNaN()"},{"type":"paragraph","crDate":1685456455108,"chDate":1685456687547,"text":"isNaN() überprüft, ob ein Wert \"Not a Number\" ist.\nDazu wird geprüft, ob der Datentyp <i>Number</i> ist und der Wert keine Zahl enthält."},{"type":"code","crDate":1685456733818,"chDate":1685456883867,"text":"let x = 42, y = 3;\nconsole.log( Number.isNaN(x/y) );  // -> false, weil das Ergebnis eine Zahl ist\n\ny = 'abc';\nconsole.log( Number.isNaN(x/y) );  // -> true, weil diese Rechnung nicht ausgeführt werden kann\n\ny = '12';\nconsole.log( Number.isNaN(x/y) );  // -> false, weil der String für die Operation in eine Number konvertiert wird\n\nconsole.log( Number.isNaN(y) );  // -> false, weil der Datentyp nicht Number ist"},{"type":"subheader","crDate":1685456917682,"chDate":1685456938295,"text":"value.toFixed(2)"},{"type":"paragraph","crDate":1685456941240,"chDate":1685457018298,"text":"Diese Methode wandelt eine Zahl in einen String um. Dabei wird die Zahl auf die im Parameter definierte Zahl an Nachkommastellen gerunden.\nFalls nicht so viele Nachkommastellen existieren, werden diese mit Nullen aufgefüllt."},{"type":"code","crDate":1685457095125,"chDate":1685457119042,"text":"let x = Math.PI;\nconsole.log(x.toFixed(2));  // -> 3.14\n\nx = 12;\nconsole.log(x.toFixed(2));  // -> 12.00"},{"type":"subheader","crDate":1685457954578,"chDate":1685458543672,"text":"Number.parseInt()"},{"type":"paragraph","crDate":1685457961396,"chDate":1685458463909,"text":"Die <i>parseInt()</i>-Funktion interpretiert einen String und wandelt diesen zu einer ganzen Zahl um.\nDas Ergebnis dieser Operation hat keine Nachkommastellen und ist vom Datentyp <i>Number</i>, also Fließkomma. \nAls zweites Argument nimmt diese Methode die Basis der Ausgangszahl an (10 für Dezimal, 2 für Binär, etc.)"},{"type":"code","crDate":1685458152782,"chDate":1685458526097,"text":"let x = '123.45';\nx = Number.parseInt(x);\nconsole.log(x);  // -> 123\n\nx = '123.45';\nx = Number.parseInt(x, 16);\nconsole.log(x);  // -> 291\n"}]}