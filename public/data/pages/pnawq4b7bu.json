{"content":[{"type":"paragraph","crDate":1687354031586,"chDate":1687354957631,"text":"Eine klassische Funktion ist die Schreibweise für Funktionen aus der Zeit vor den Arrow-Funktionen.\nDie klassischen Funktionen bringen einige Eigenheiten mit, die durch die Einführung der Arrow-Funktionen beiseite geschoben wurden.\nAllerdings begegnet man dieser alten Schreibweise gelegentlich noch.\nDer Aufruf einer klassischen Funktion sowie das Verhalten bzgl. Parametern und Rückgabewerten entspricht dem einer Arrow-Funktion."},{"type":"paragraph","crDate":1687354678624,"chDate":1687355066359,"text":"Klassiche Funktionen können auf zweierlei Weise geschrieben werden. Die allgemeine (und ältere) Schreibweise ist die als <i>Funktionsausdruck</i> oder <i>Lexikale Funktion</i>.\nHier wird die Funktion angelegt und an einen Variable oder ähnliches übergeben. Zum Anlegen der Funktion dient das Schlüsselwort <i>function</i>.\n"},{"type":"code","crDate":1687355521961,"chDate":1687355523103,"text":"const myFunction = function (x, y) {\n    return x * y;\n}\n\nlet result = myFunction(12, 32);\nconsole.log(result);    // -> 384"},{"type":"paragraph","crDate":1687354974278,"chDate":1687355360368,"text":"Eine <i>Funktionsdeklaration</i> wurde eingeführt, um den Umgang mit Funktionen zu vereinfachen. Dem Schlüsselwort <i>function</i> wird der Name mitgegeben.\nDieser Name dient dann wie ein Variablenname dem Aufruf der Funktion. \nAuch wenn diese sehr ähnlich scheinen, gibt es doch einige Unterschiede:\n<ul>\n<li>Eine Funktionsdeklaration kann per <i>Hoisting</i> angesprochen werden (siehe weiter unten)</li>\n<li>Funktionsausdrücke können als anonyme Funktionen (siehe weiter unten) an z.B. Eventlistener gegeben werden</li>\n<li>Funktionsausdrücke können an Stellen verwendet werden, an denen <i>Ausdrücke</i> erwartet werden, z.B. als Argumente für andere Funktionen</li>\n</ul>"},{"type":"code","crDate":1687355488680,"chDate":1687355493343,"text":"function myFunction(x,y){\n return x*y;\n}\n\nlet result = myFunction(12,32);\nconsole.log(result);    // -> 384"},{"type":"subheader","crDate":1687354816499,"chDate":1687354830904,"text":"Anonyme Funktionen"},{"type":"paragraph","crDate":1687355561275,"chDate":1687356111040,"text":"Eine anonyme Funktion ist eine Funktion ohne Namen. Anonyme Funktionen werden oft verwendet, wenn eine Funktion als Argument an eine andere Funktion weitergegeben wird (wie bei Callbacks) oder wenn eine Funktion nur einmal ausgeführt wird und nicht wieder aufgerufen werden muss (<i>IIFE</i>)."},{"type":"code","crDate":1687355875618,"chDate":1687356051053,"text":"// Beispiel 1: Anonyme Funktion in einem Eventlistener\n\nlet btn = document.querySelector('#btn');\n\nbtn.addEventListener('click', function(evt){\n    console.log(`Button ${evt.currentTarget} wurde geklickt`);\n})"},{"type":"code","crDate":1687355935278,"chDate":1687356037581,"text":"// Beispiel 2: Anonyme Funktion in einem Interval\n\nsetInterval(function(){\n    console.log(new Date().toLocaleString());\n}, 1000)"},{"type":"subheader","crDate":1687354106530,"chDate":1687354108730,"text":"this"},{"type":"subheader","crDate":1687354110530,"chDate":1687354112794,"text":"args"},{"type":"subheader","crDate":1687354506093,"chDate":1687354509867,"text":"Hoisting"},{"type":"subheader","crDate":1687356076619,"chDate":1687356080947,"text":"IIFE"}]}