{"content":[{"type":"paragraph","crDate":1684236707971,"chDate":1684736364915,"text":"Für Entwickler:innen ist eine Ausgabe in der <i>Konsole</i> wesentlich hilfreicher als das Alert-Fenster:\n- Die Programmausführung wird nicht unterbrochen\n- Es können mehrere Ausgaben gleichzeitig gesehen werden\n- Es gibt mächtigere Ausgabeoptionen\nDie Konsole kann in allen gängigen Browsern mit der Taste <i>F12</i> geöffnet werden. Hier muss dann noch ggf. der richtige Reiter ausgewählt werden."},{"type":"subheader","crDate":1684233905006,"chDate":1684233915459,"text":"console.log()"},{"type":"paragraph","crDate":1684764472592,"chDate":1684764548707,"text":"Die <i>console.log()</i>-Methode erlaubt es, einfache Ausgaben in der Konsole umzusetzen.\nDabei wird nicht nur die Ausgabe angezeigt, sondern auch die Datei und die Codezeile, in der die Anzeige gemacht wurde."},{"type":"code","crDate":1684764557196,"chDate":1684764587671,"text":"let myValue = 12;\nconsole.log(myValue);  // -> 12"},{"type":"subheader","crDate":1704805588107,"chDate":1704805590948,"text":"Styling"},{"type":"paragraph","crDate":1684836986663,"chDate":1705073464585,"text":"Der Text in der Konsole kann frei gestylt werden.\nDazu kann im auszugebende String mit dem Marker \"<i>%c</i>\" der Start eines CSS-Stylings definiert werden. Im String können beliebig viele %c stehen. Alles, was nach dem Marker steht, wird dann mit dem dazugehörigen CSS gestylt.\nDie CSS-Angaben werden dann in Form jeweils eines Strings als zweites, drittes, etc. Argument übergeben. \nEs kann nur ein String zur Ausgabe angegeben werden."},{"type":"code","crDate":1684837870446,"chDate":1705073445234,"text":"console.log(\n 'Die Werte sind: %c321, %c852, %c951, %c654',\n 'color: #f00',\n 'color: #0f0',\n 'color: #00f',\n)\n"},{"type":"subheader","crDate":1684233918357,"chDate":1684233922491,"text":"console.warn()"},{"type":"paragraph","crDate":1684842808051,"chDate":1684842927203,"text":"Die <i>warn()</i>-Methode funktioniert genauso wie die log()-Methode.\nAllerdings wird die Ausgabe etwas hervorgehoben (abhängig vom Browser). \nEs können auch CSS-Angaben wie oben eingebracht werden."},{"type":"code","crDate":1684842964920,"chDate":1684842972807,"text":"let x = 12;\n\nconsole.warn('%cAlarm', 'font-size:25px; color: #a03');\nconsole.warn(`%c${x} ist zu wenig`, 'font-style: italic; font-family:Trebuchet MS; color: #0a0');\n"},{"type":"subheader","crDate":1684233925504,"chDate":1684233930292,"text":"console.error()"},{"type":"paragraph","crDate":1684843065625,"chDate":1684843673124,"text":"Die <i>error()</i>-Methode dient dem Ausgeben und Hervorheben von Programmfehlern. \nDazu ist die Ausgabe in der Konsole noch stärker hervorgehoben als in einer Warnmeldung. Außerdem kann die Ausgabe \"aufgeklappt\" werden und der Ablauf der Funktionsaufrufe verfolgt werden, die zu der Fehlermeldung  geführt haben."},{"type":"code","crDate":1684843585793,"chDate":1684843656597,"text":"let f1 = () => {\n f2();\n}\n\nlet f2 = () => {\n f3();\n}\n\nlet f3 = () => {\n console.error('Irgendwas ist schiefgelaufen');  // -> Ausgabe der Fehlermeldung\n}\n\nf1();\n"},{"type":"subheader","crDate":1684233933271,"chDate":1684233938181,"text":"console.trace()"},{"type":"paragraph","crDate":1684843709888,"chDate":1684844048775,"text":"Die <i>trace()</i>-Methode macht eine Ausgabe ähnlich der <i>log()</i>-Ausgabe. Zusätzlich wird der Ablauf der Funktionsaufrufe angezeigt.\nDiese Methode dient dem Debugging, um zu sehen, ob die Funktionen in der richtigen Reihenfolge aufgerufen werden.\n"},{"type":"code","crDate":1684844062271,"chDate":1684844129538,"text":"let f1 = () => {\n f2();\n}\n\nlet f2 = () => {\n f3();\n}\n\nlet f3 = () => {\n console.trace('%cAusgabe', 'font-size:25px; color: #a03');\n}\n\nf1();"},{"type":"subheader","crDate":1684233941747,"chDate":1684844728968,"text":"console.time()"},{"type":"paragraph","crDate":1684844146113,"chDate":1684845074211,"text":"Mit den time()- und timeEnd()-Methoden können Laufzeiten gemessen werden.\nDie <i>time()</i>-Methode wird ein timer gestartet. Durch Aufruf der <i>timeEnd()</i>-Methode wird der Timer beendet und die abgelaufene Zeit in Millisekunden ausgegeben.\nUm Zwischenzeiten auszugeben, kann die <i>timeLog()</i>-Methode aufgerufen werden. Diese gibt die abgelaufenen Millisekunden aus, ohne den Timer zu beenden."},{"type":"code","crDate":1684845086863,"chDate":1684845124552,"text":"console.time();\n\nlet x = 1;\nfor (let i = 0; i < 1e7; i++) {\n x++;\n if (!(i % 1e6)) {\n  console.timeLog();\n }\n}\n\nconsole.timeEnd();"},{"type":"paragraph","crDate":1684845255359,"chDate":1684845484254,"text":"Falls mehrere Timer gleichzeitig benötigt werden, können diese mit einem Label versehen werden.\nDas Label wird einfach als String in die Funktionsklammern geschrieben."},{"type":"code","crDate":1684845421331,"chDate":1684845435091,"text":"console.time('first');\nconsole.time('second');\n\nlet x = 1;\n\nfor (let i = 0; i < 1e7; i++) x++;\nconsole.timeEnd('first');\n\nfor (let i = 0; i < 1e7; i++) x++;\nconsole.timeEnd('second');"}]}